
Siren_AUTO_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000329c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800344c  0800344c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800344c  0800344c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800344c  0800344c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d94  20000070  080034c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  080034c4  00020e04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009715  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001876  00000000  00000000  000297ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000560  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013654  00000000  00000000  0002bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000611c  00000000  00000000  0003f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e7ae  00000000  00000000  00045310  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3abe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d8  00000000  00000000  000b3b3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003394 	.word	0x08003394

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003394 	.word	0x08003394

08000150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000154:	4b05      	ldr	r3, [pc, #20]	; (800016c <HAL_IncTick+0x1c>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	461a      	mov	r2, r3
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <HAL_IncTick+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4413      	add	r3, r2
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <HAL_IncTick+0x20>)
 8000162:	6013      	str	r3, [r2, #0]
}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000000 	.word	0x20000000
 8000170:	20000dfc 	.word	0x20000dfc

08000174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f103 0208 	add.w	r2, r3, #8
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800018c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f103 0208 	add.w	r2, r3, #8
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f103 0208 	add.w	r2, r3, #8
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr

080001b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001b2:	b480      	push	{r7}
 80001b4:	b083      	sub	sp, #12
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2200      	movs	r2, #0
 80001be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001c0:	bf00      	nop
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr

080001ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
 80001d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	689a      	ldr	r2, [r3, #8]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	1c5a      	adds	r2, r3, #1
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000226:	d103      	bne.n	8000230 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e00c      	b.n	800024a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3308      	adds	r3, #8
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e002      	b.n	800023e <vListInsert+0x2e>
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	429a      	cmp	r2, r3
 8000248:	d2f6      	bcs.n	8000238 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	683a      	ldr	r2, [r7, #0]
 8000258:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	6892      	ldr	r2, [r2, #8]
 8000296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	6852      	ldr	r2, [r2, #4]
 80002a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d103      	bne.n	80002b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
	...

080002d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d109      	bne.n	80002fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ec:	f383 8811 	msr	BASEPRI, r3
 80002f0:	f3bf 8f6f 	isb	sy
 80002f4:	f3bf 8f4f 	dsb	sy
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	e7fe      	b.n	80002fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80002fc:	f001 fb54 	bl	80019a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000308:	68f9      	ldr	r1, [r7, #12]
 800030a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800030c:	fb01 f303 	mul.w	r3, r1, r3
 8000310:	441a      	add	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2200      	movs	r2, #0
 800031a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800032c:	3b01      	subs	r3, #1
 800032e:	68f9      	ldr	r1, [r7, #12]
 8000330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000332:	fb01 f303 	mul.w	r3, r1, r3
 8000336:	441a      	add	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	22ff      	movs	r2, #255	; 0xff
 8000340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	22ff      	movs	r2, #255	; 0xff
 8000348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d114      	bne.n	800037c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d01a      	beq.n	8000390 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3310      	adds	r3, #16
 800035e:	4618      	mov	r0, r3
 8000360:	f000 ff96 	bl	8001290 <xTaskRemoveFromEventList>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d012      	beq.n	8000390 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <xQueueGenericReset+0xcc>)
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	f3bf 8f4f 	dsb	sy
 8000376:	f3bf 8f6f 	isb	sy
 800037a:	e009      	b.n	8000390 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3310      	adds	r3, #16
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff fef7 	bl	8000174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3324      	adds	r3, #36	; 0x24
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff fef2 	bl	8000174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000390:	f001 fb38 	bl	8001a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000394:	2301      	movs	r3, #1
}
 8000396:	4618      	mov	r0, r3
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	e000ed04 	.word	0xe000ed04

080003a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	4613      	mov	r3, r2
 80003b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <xQueueGenericCreate+0x28>
 80003b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003bc:	f383 8811 	msr	BASEPRI, r3
 80003c0:	f3bf 8f6f 	isb	sy
 80003c4:	f3bf 8f4f 	dsb	sy
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	e7fe      	b.n	80003ca <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d102      	bne.n	80003d8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
 80003d6:	e004      	b.n	80003e2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	68ba      	ldr	r2, [r7, #8]
 80003dc:	fb02 f303 	mul.w	r3, r2, r3
 80003e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3348      	adds	r3, #72	; 0x48
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fbd4 	bl	8001b94 <pvPortMalloc>
 80003ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00b      	beq.n	800040c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3348      	adds	r3, #72	; 0x48
 80003f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	4613      	mov	r3, r2
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f000 f805 	bl	8000416 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800040c:	69bb      	ldr	r3, [r7, #24]
	}
 800040e:	4618      	mov	r0, r3
 8000410:	3720      	adds	r7, #32
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	69ba      	ldr	r2, [r7, #24]
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000432:	69bb      	ldr	r3, [r7, #24]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000444:	2101      	movs	r1, #1
 8000446:	69b8      	ldr	r0, [r7, #24]
 8000448:	f7ff ff44 	bl	80002d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08e      	sub	sp, #56	; 0x38
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000462:	2300      	movs	r3, #0
 8000464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046c:	2b00      	cmp	r3, #0
 800046e:	d109      	bne.n	8000484 <xQueueGenericSend+0x30>
 8000470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000474:	f383 8811 	msr	BASEPRI, r3
 8000478:	f3bf 8f6f 	isb	sy
 800047c:	f3bf 8f4f 	dsb	sy
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
 8000482:	e7fe      	b.n	8000482 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d103      	bne.n	8000492 <xQueueGenericSend+0x3e>
 800048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <xQueueGenericSend+0x42>
 8000492:	2301      	movs	r3, #1
 8000494:	e000      	b.n	8000498 <xQueueGenericSend+0x44>
 8000496:	2300      	movs	r3, #0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d109      	bne.n	80004b0 <xQueueGenericSend+0x5c>
 800049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004a0:	f383 8811 	msr	BASEPRI, r3
 80004a4:	f3bf 8f6f 	isb	sy
 80004a8:	f3bf 8f4f 	dsb	sy
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
 80004ae:	e7fe      	b.n	80004ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d103      	bne.n	80004be <xQueueGenericSend+0x6a>
 80004b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d101      	bne.n	80004c2 <xQueueGenericSend+0x6e>
 80004be:	2301      	movs	r3, #1
 80004c0:	e000      	b.n	80004c4 <xQueueGenericSend+0x70>
 80004c2:	2300      	movs	r3, #0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d109      	bne.n	80004dc <xQueueGenericSend+0x88>
 80004c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004cc:	f383 8811 	msr	BASEPRI, r3
 80004d0:	f3bf 8f6f 	isb	sy
 80004d4:	f3bf 8f4f 	dsb	sy
 80004d8:	623b      	str	r3, [r7, #32]
 80004da:	e7fe      	b.n	80004da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80004dc:	f001 f874 	bl	80015c8 <xTaskGetSchedulerState>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <xQueueGenericSend+0x98>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d101      	bne.n	80004f0 <xQueueGenericSend+0x9c>
 80004ec:	2301      	movs	r3, #1
 80004ee:	e000      	b.n	80004f2 <xQueueGenericSend+0x9e>
 80004f0:	2300      	movs	r3, #0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d109      	bne.n	800050a <xQueueGenericSend+0xb6>
 80004f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fa:	f383 8811 	msr	BASEPRI, r3
 80004fe:	f3bf 8f6f 	isb	sy
 8000502:	f3bf 8f4f 	dsb	sy
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	e7fe      	b.n	8000508 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800050a:	f001 fa4d 	bl	80019a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	429a      	cmp	r2, r3
 8000518:	d302      	bcc.n	8000520 <xQueueGenericSend+0xcc>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d129      	bne.n	8000574 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	68b9      	ldr	r1, [r7, #8]
 8000524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000526:	f000 fa1c 	bl	8000962 <prvCopyDataToQueue>
 800052a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800052c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	2b00      	cmp	r3, #0
 8000532:	d010      	beq.n	8000556 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000536:	3324      	adds	r3, #36	; 0x24
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fea9 	bl	8001290 <xTaskRemoveFromEventList>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d013      	beq.n	800056c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000544:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <xQueueGenericSend+0x1f0>)
 8000546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	f3bf 8f6f 	isb	sy
 8000554:	e00a      	b.n	800056c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000558:	2b00      	cmp	r3, #0
 800055a:	d007      	beq.n	800056c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800055c:	4b39      	ldr	r3, [pc, #228]	; (8000644 <xQueueGenericSend+0x1f0>)
 800055e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800056c:	f001 fa4a 	bl	8001a04 <vPortExitCritical>
				return pdPASS;
 8000570:	2301      	movs	r3, #1
 8000572:	e063      	b.n	800063c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d103      	bne.n	8000582 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800057a:	f001 fa43 	bl	8001a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800057e:	2300      	movs	r3, #0
 8000580:	e05c      	b.n	800063c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000584:	2b00      	cmp	r3, #0
 8000586:	d106      	bne.n	8000596 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fee1 	bl	8001354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000592:	2301      	movs	r3, #1
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000596:	f001 fa35 	bl	8001a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800059a:	f000 fc95 	bl	8000ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800059e:	f001 fa03 	bl	80019a8 <vPortEnterCritical>
 80005a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005ae:	d103      	bne.n	80005b8 <xQueueGenericSend+0x164>
 80005b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d103      	bne.n	80005ce <xQueueGenericSend+0x17a>
 80005c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005ce:	f001 fa19 	bl	8001a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80005d2:	1d3a      	adds	r2, r7, #4
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fed0 	bl	8001380 <xTaskCheckForTimeOut>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d124      	bne.n	8000630 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80005e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80005e8:	f000 fab3 	bl	8000b52 <prvIsQueueFull>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d018      	beq.n	8000624 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80005f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f4:	3310      	adds	r3, #16
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fe24 	bl	8001248 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000602:	f000 fa3e 	bl	8000a82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000606:	f000 fc6d 	bl	8000ee4 <xTaskResumeAll>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	f47f af7c 	bne.w	800050a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <xQueueGenericSend+0x1f0>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	e772      	b.n	800050a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000626:	f000 fa2c 	bl	8000a82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800062a:	f000 fc5b 	bl	8000ee4 <xTaskResumeAll>
 800062e:	e76c      	b.n	800050a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000632:	f000 fa26 	bl	8000a82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000636:	f000 fc55 	bl	8000ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800063a:	2300      	movs	r3, #0
		}
	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	3738      	adds	r7, #56	; 0x38
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	e000ed04 	.word	0xe000ed04

08000648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <xQueueGenericSendFromISR+0x2c>
 8000660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000664:	f383 8811 	msr	BASEPRI, r3
 8000668:	f3bf 8f6f 	isb	sy
 800066c:	f3bf 8f4f 	dsb	sy
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 8000672:	e7fe      	b.n	8000672 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <xQueueGenericSendFromISR+0x3a>
 800067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <xQueueGenericSendFromISR+0x3e>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <xQueueGenericSendFromISR+0x40>
 8000686:	2300      	movs	r3, #0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d109      	bne.n	80006a0 <xQueueGenericSendFromISR+0x58>
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	623b      	str	r3, [r7, #32]
 800069e:	e7fe      	b.n	800069e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d103      	bne.n	80006ae <xQueueGenericSendFromISR+0x66>
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d101      	bne.n	80006b2 <xQueueGenericSendFromISR+0x6a>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <xQueueGenericSendFromISR+0x6c>
 80006b2:	2300      	movs	r3, #0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d109      	bne.n	80006cc <xQueueGenericSendFromISR+0x84>
 80006b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	61fb      	str	r3, [r7, #28]
 80006ca:	e7fe      	b.n	80006ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80006cc:	f001 fa26 	bl	8001b1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80006d0:	f3ef 8211 	mrs	r2, BASEPRI
 80006d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	61ba      	str	r2, [r7, #24]
 80006e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80006e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80006ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d302      	bcc.n	80006fe <xQueueGenericSendFromISR+0xb6>
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d12c      	bne.n	8000758 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800070e:	f000 f928 	bl	8000962 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000712:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800071a:	d112      	bne.n	8000742 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800071c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000720:	2b00      	cmp	r3, #0
 8000722:	d016      	beq.n	8000752 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000726:	3324      	adds	r3, #36	; 0x24
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fdb1 	bl	8001290 <xTaskRemoveFromEventList>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00e      	beq.n	8000752 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00b      	beq.n	8000752 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	e007      	b.n	8000752 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000746:	3301      	adds	r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	b25a      	sxtb	r2, r3
 800074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000752:	2301      	movs	r3, #1
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000756:	e001      	b.n	800075c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
 800075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000768:	4618      	mov	r0, r3
 800076a:	3738      	adds	r7, #56	; 0x38
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000786:	2b00      	cmp	r3, #0
 8000788:	d109      	bne.n	800079e <xQueueReceive+0x2e>
	__asm volatile
 800078a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	623b      	str	r3, [r7, #32]
 800079c:	e7fe      	b.n	800079c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d103      	bne.n	80007ac <xQueueReceive+0x3c>
 80007a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <xQueueReceive+0x40>
 80007ac:	2301      	movs	r3, #1
 80007ae:	e000      	b.n	80007b2 <xQueueReceive+0x42>
 80007b0:	2300      	movs	r3, #0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d109      	bne.n	80007ca <xQueueReceive+0x5a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	61fb      	str	r3, [r7, #28]
 80007c8:	e7fe      	b.n	80007c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80007ca:	f000 fefd 	bl	80015c8 <xTaskGetSchedulerState>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d102      	bne.n	80007da <xQueueReceive+0x6a>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <xQueueReceive+0x6e>
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <xQueueReceive+0x70>
 80007de:	2300      	movs	r3, #0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d109      	bne.n	80007f8 <xQueueReceive+0x88>
 80007e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e8:	f383 8811 	msr	BASEPRI, r3
 80007ec:	f3bf 8f6f 	isb	sy
 80007f0:	f3bf 8f4f 	dsb	sy
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	e7fe      	b.n	80007f6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80007f8:	f001 f8d6 	bl	80019a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000800:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000804:	2b00      	cmp	r3, #0
 8000806:	d01f      	beq.n	8000848 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800080c:	f000 f913 	bl	8000a36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00f      	beq.n	8000840 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000822:	3310      	adds	r3, #16
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fd33 	bl	8001290 <xTaskRemoveFromEventList>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d007      	beq.n	8000840 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000830:	4b3c      	ldr	r3, [pc, #240]	; (8000924 <xQueueReceive+0x1b4>)
 8000832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000840:	f001 f8e0 	bl	8001a04 <vPortExitCritical>
				return pdPASS;
 8000844:	2301      	movs	r3, #1
 8000846:	e069      	b.n	800091c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800084e:	f001 f8d9 	bl	8001a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000852:	2300      	movs	r3, #0
 8000854:	e062      	b.n	800091c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000858:	2b00      	cmp	r3, #0
 800085a:	d106      	bne.n	800086a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fd77 	bl	8001354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000866:	2301      	movs	r3, #1
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800086a:	f001 f8cb 	bl	8001a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800086e:	f000 fb2b 	bl	8000ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000872:	f001 f899 	bl	80019a8 <vPortEnterCritical>
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800087c:	b25b      	sxtb	r3, r3
 800087e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000882:	d103      	bne.n	800088c <xQueueReceive+0x11c>
 8000884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000892:	b25b      	sxtb	r3, r3
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000898:	d103      	bne.n	80008a2 <xQueueReceive+0x132>
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008a2:	f001 f8af 	bl	8001a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008a6:	1d3a      	adds	r2, r7, #4
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fd66 	bl	8001380 <xTaskCheckForTimeOut>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d123      	bne.n	8000902 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008bc:	f000 f933 	bl	8000b26 <prvIsQueueEmpty>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d017      	beq.n	80008f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	3324      	adds	r3, #36	; 0x24
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fcba 	bl	8001248 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80008d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008d6:	f000 f8d4 	bl	8000a82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80008da:	f000 fb03 	bl	8000ee4 <xTaskResumeAll>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d189      	bne.n	80007f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <xQueueReceive+0x1b4>)
 80008e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	f3bf 8f4f 	dsb	sy
 80008f0:	f3bf 8f6f 	isb	sy
 80008f4:	e780      	b.n	80007f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80008f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008f8:	f000 f8c3 	bl	8000a82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80008fc:	f000 faf2 	bl	8000ee4 <xTaskResumeAll>
 8000900:	e77a      	b.n	80007f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000904:	f000 f8bd 	bl	8000a82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000908:	f000 faec 	bl	8000ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800090c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800090e:	f000 f90a 	bl	8000b26 <prvIsQueueEmpty>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	f43f af6f 	beq.w	80007f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800091a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	e000ed04 	.word	0xe000ed04

08000928 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d109      	bne.n	800094a <uxQueueMessagesWaiting+0x22>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800094a:	f001 f82d 	bl	80019a8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000952:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8000954:	f001 f856 	bl	8001a04 <vPortExitCritical>

	return uxReturn;
 8000958:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000976:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10d      	bne.n	800099c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d14d      	bne.n	8000a24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fe39 	bl	8001604 <xTaskPriorityDisinherit>
 8000992:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	e043      	b.n	8000a24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d119      	bne.n	80009d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6898      	ldr	r0, [r3, #8]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	461a      	mov	r2, r3
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	f002 f8dd 	bl	8002b6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	441a      	add	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d32b      	bcc.n	8000a24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	e026      	b.n	8000a24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68d8      	ldr	r0, [r3, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	461a      	mov	r2, r3
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	f002 f8c3 	bl	8002b6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	425b      	negs	r3, r3
 80009f0:	441a      	add	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d207      	bcs.n	8000a12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	441a      	add	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d105      	bne.n	8000a24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000a2c:	697b      	ldr	r3, [r7, #20]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d018      	beq.n	8000a7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	441a      	add	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68da      	ldr	r2, [r3, #12]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d303      	bcc.n	8000a6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68d9      	ldr	r1, [r3, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	461a      	mov	r2, r3
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f002 f879 	bl	8002b6c <memcpy>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000a8a:	f000 ff8d 	bl	80019a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a96:	e011      	b.n	8000abc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d012      	beq.n	8000ac6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3324      	adds	r3, #36	; 0x24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fbf3 	bl	8001290 <xTaskRemoveFromEventList>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000ab0:	f000 fcc6 	bl	8001440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	dce9      	bgt.n	8000a98 <prvUnlockQueue+0x16>
 8000ac4:	e000      	b.n	8000ac8 <prvUnlockQueue+0x46>
					break;
 8000ac6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000ad0:	f000 ff98 	bl	8001a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000ad4:	f000 ff68 	bl	80019a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ade:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ae0:	e011      	b.n	8000b06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d012      	beq.n	8000b10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3310      	adds	r3, #16
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fbce 	bl	8001290 <xTaskRemoveFromEventList>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000afa:	f000 fca1 	bl	8001440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dce9      	bgt.n	8000ae2 <prvUnlockQueue+0x60>
 8000b0e:	e000      	b.n	8000b12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000b10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	22ff      	movs	r2, #255	; 0xff
 8000b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000b1a:	f000 ff73 	bl	8001a04 <vPortExitCritical>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000b2e:	f000 ff3b 	bl	80019a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e001      	b.n	8000b44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000b44:	f000 ff5e 	bl	8001a04 <vPortExitCritical>

	return xReturn;
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000b5a:	f000 ff25 	bl	80019a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d102      	bne.n	8000b70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e001      	b.n	8000b74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000b74:	f000 ff46 	bl	8001a04 <vPortExitCritical>

	return xReturn;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b08c      	sub	sp, #48	; 0x30
 8000b86:	af04      	add	r7, sp, #16
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fffc 	bl	8001b94 <pvPortMalloc>
 8000b9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00e      	beq.n	8000bc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000ba4:	2054      	movs	r0, #84	; 0x54
 8000ba6:	f000 fff5 	bl	8001b94 <pvPortMalloc>
 8000baa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb8:	e005      	b.n	8000bc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f001 f8ac 	bl	8001d18 <vPortFree>
 8000bc0:	e001      	b.n	8000bc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d013      	beq.n	8000bf4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000bcc:	88fa      	ldrh	r2, [r7, #6]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9303      	str	r3, [sp, #12]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	9302      	str	r3, [sp, #8]
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f80e 	bl	8000c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000be8:	69f8      	ldr	r0, [r7, #28]
 8000bea:	f000 f889 	bl	8000d00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	e002      	b.n	8000bfa <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000bfa:	69bb      	ldr	r3, [r7, #24]
	}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	f023 0307 	bic.w	r3, r3, #7
 8000c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d009      	beq.n	8000c4a <prvInitialiseNewTask+0x46>
 8000c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3a:	f383 8811 	msr	BASEPRI, r3
 8000c3e:	f3bf 8f6f 	isb	sy
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e7fe      	b.n	8000c48 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e012      	b.n	8000c76 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	4413      	add	r3, r2
 8000c56:	7819      	ldrb	r1, [r3, #0]
 8000c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3334      	adds	r3, #52	; 0x34
 8000c60:	460a      	mov	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	3301      	adds	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d9e9      	bls.n	8000c50 <prvInitialiseNewTask+0x4c>
 8000c7c:	e000      	b.n	8000c80 <prvInitialiseNewTask+0x7c>
		{
			break;
 8000c7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d901      	bls.n	8000c92 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fa82 	bl	80001b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb0:	3318      	adds	r3, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fa7d 	bl	80001b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	f1c3 0207 	rsb	r2, r3, #7
 8000cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	69b8      	ldr	r0, [r7, #24]
 8000ce2:	f000 fd79 	bl	80017d8 <pxPortInitialiseStack>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000d08:	f000 fe4e 	bl	80019a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <prvAddNewTaskToReadyList+0xb8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <prvAddNewTaskToReadyList+0xb8>)
 8000d14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <prvAddNewTaskToReadyList+0xbc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000d1e:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <prvAddNewTaskToReadyList+0xbc>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <prvAddNewTaskToReadyList+0xb8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d110      	bne.n	8000d4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000d2c:	f000 fbac 	bl	8001488 <prvInitialiseTaskLists>
 8000d30:	e00d      	b.n	8000d4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <prvAddNewTaskToReadyList+0xc0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <prvAddNewTaskToReadyList+0xbc>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d802      	bhi.n	8000d4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000d48:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <prvAddNewTaskToReadyList+0xbc>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <prvAddNewTaskToReadyList+0xc4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <prvAddNewTaskToReadyList+0xc4>)
 8000d56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <prvAddNewTaskToReadyList+0xc8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <prvAddNewTaskToReadyList+0xc8>)
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <prvAddNewTaskToReadyList+0xcc>)
 8000d78:	441a      	add	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4610      	mov	r0, r2
 8000d82:	f7ff fa22 	bl	80001ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d86:	f000 fe3d 	bl	8001a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <prvAddNewTaskToReadyList+0xc0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00e      	beq.n	8000db0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <prvAddNewTaskToReadyList+0xbc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <prvAddNewTaskToReadyList+0xd0>)
 8000da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	f3bf 8f4f 	dsb	sy
 8000dac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000018c 	.word	0x2000018c
 8000dbc:	2000008c 	.word	0x2000008c
 8000dc0:	20000198 	.word	0x20000198
 8000dc4:	200001a8 	.word	0x200001a8
 8000dc8:	20000194 	.word	0x20000194
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	e000ed04 	.word	0xe000ed04

08000dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d016      	beq.n	8000e14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <vTaskDelay+0x60>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d009      	beq.n	8000e02 <vTaskDelay+0x2e>
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e7fe      	b.n	8000e00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000e02:	f000 f861 	bl	8000ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000e06:	2100      	movs	r1, #0
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fc7f 	bl	800170c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000e0e:	f000 f869 	bl	8000ee4 <xTaskResumeAll>
 8000e12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d107      	bne.n	8000e2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <vTaskDelay+0x64>)
 8000e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	f3bf 8f4f 	dsb	sy
 8000e26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001b4 	.word	0x200001b4
 8000e38:	e000ed04 	.word	0xe000ed04

08000e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <vTaskStartScheduler+0x74>)
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <vTaskStartScheduler+0x78>)
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <vTaskStartScheduler+0x7c>)
 8000e52:	f7ff fe96 	bl	8000b82 <xTaskCreate>
 8000e56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d115      	bne.n	8000e8a <vTaskStartScheduler+0x4e>
 8000e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f3bf 8f6f 	isb	sy
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <vTaskStartScheduler+0x80>)
 8000e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <vTaskStartScheduler+0x84>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <vTaskStartScheduler+0x88>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000e84:	f000 fd20 	bl	80018c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000e88:	e00d      	b.n	8000ea6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e90:	d109      	bne.n	8000ea6 <vTaskStartScheduler+0x6a>
 8000e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e96:	f383 8811 	msr	BASEPRI, r3
 8000e9a:	f3bf 8f6f 	isb	sy
 8000e9e:	f3bf 8f4f 	dsb	sy
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	e7fe      	b.n	8000ea4 <vTaskStartScheduler+0x68>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001b0 	.word	0x200001b0
 8000eb4:	080033ac 	.word	0x080033ac
 8000eb8:	08001459 	.word	0x08001459
 8000ebc:	200001ac 	.word	0x200001ac
 8000ec0:	20000198 	.word	0x20000198
 8000ec4:	20000190 	.word	0x20000190

08000ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <vTaskSuspendAll+0x18>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <vTaskSuspendAll+0x18>)
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200001b4 	.word	0x200001b4

08000ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000ef2:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <xTaskResumeAll+0x114>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <xTaskResumeAll+0x2a>
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	e7fe      	b.n	8000f0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000f0e:	f000 fd4b 	bl	80019a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <xTaskResumeAll+0x114>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <xTaskResumeAll+0x114>)
 8000f1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <xTaskResumeAll+0x114>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d161      	bne.n	8000fe8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <xTaskResumeAll+0x118>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d05d      	beq.n	8000fe8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f2c:	e02e      	b.n	8000f8c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <xTaskResumeAll+0x11c>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3318      	adds	r3, #24
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f9a0 	bl	8000280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3304      	adds	r3, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f99b 	bl	8000280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	2201      	movs	r2, #1
 8000f50:	409a      	lsls	r2, r3
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <xTaskResumeAll+0x120>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <xTaskResumeAll+0x120>)
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <xTaskResumeAll+0x124>)
 8000f6a:	441a      	add	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4610      	mov	r0, r2
 8000f74:	f7ff f929 	bl	80001ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <xTaskResumeAll+0x128>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d302      	bcc.n	8000f8c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <xTaskResumeAll+0x12c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <xTaskResumeAll+0x11c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1cc      	bne.n	8000f2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000f9a:	f000 faf1 	bl	8001580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <xTaskResumeAll+0x130>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d010      	beq.n	8000fcc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000faa:	f000 f837 	bl	800101c <xTaskIncrementTick>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <xTaskResumeAll+0x12c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f1      	bne.n	8000faa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <xTaskResumeAll+0x130>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <xTaskResumeAll+0x12c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d009      	beq.n	8000fe8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <xTaskResumeAll+0x134>)
 8000fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	f3bf 8f4f 	dsb	sy
 8000fe4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000fe8:	f000 fd0c 	bl	8001a04 <vPortExitCritical>

	return xAlreadyYielded;
 8000fec:	68bb      	ldr	r3, [r7, #8]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001b4 	.word	0x200001b4
 8000ffc:	2000018c 	.word	0x2000018c
 8001000:	2000014c 	.word	0x2000014c
 8001004:	20000194 	.word	0x20000194
 8001008:	20000090 	.word	0x20000090
 800100c:	2000008c 	.word	0x2000008c
 8001010:	200001a0 	.word	0x200001a0
 8001014:	2000019c 	.word	0x2000019c
 8001018:	e000ed04 	.word	0xe000ed04

0800101c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <xTaskIncrementTick+0x14c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 808c 	bne.w	8001148 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001030:	4b4e      	ldr	r3, [pc, #312]	; (800116c <xTaskIncrementTick+0x150>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <xTaskIncrementTick+0x150>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11f      	bne.n	8001084 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <xTaskIncrementTick+0x154>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <xTaskIncrementTick+0x46>
 800104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	e7fe      	b.n	8001060 <xTaskIncrementTick+0x44>
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <xTaskIncrementTick+0x154>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <xTaskIncrementTick+0x158>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a40      	ldr	r2, [pc, #256]	; (8001170 <xTaskIncrementTick+0x154>)
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4a40      	ldr	r2, [pc, #256]	; (8001174 <xTaskIncrementTick+0x158>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <xTaskIncrementTick+0x15c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a3e      	ldr	r2, [pc, #248]	; (8001178 <xTaskIncrementTick+0x15c>)
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	f000 fa7e 	bl	8001580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <xTaskIncrementTick+0x160>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	429a      	cmp	r2, r3
 800108c:	d34d      	bcc.n	800112a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <xTaskIncrementTick+0x154>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <xTaskIncrementTick+0x80>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <xTaskIncrementTick+0x82>
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <xTaskIncrementTick+0x160>)
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	601a      	str	r2, [r3, #0]
					break;
 80010aa:	e03e      	b.n	800112a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <xTaskIncrementTick+0x154>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d203      	bcs.n	80010cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80010c4:	4a2d      	ldr	r2, [pc, #180]	; (800117c <xTaskIncrementTick+0x160>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
						break;
 80010ca:	e02e      	b.n	800112a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3304      	adds	r3, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f8d5 	bl	8000280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3318      	adds	r3, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f8cc 	bl	8000280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2201      	movs	r2, #1
 80010ee:	409a      	lsls	r2, r3
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <xTaskIncrementTick+0x164>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <xTaskIncrementTick+0x164>)
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <xTaskIncrementTick+0x168>)
 8001108:	441a      	add	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3304      	adds	r3, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4610      	mov	r0, r2
 8001112:	f7ff f85a 	bl	80001ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <xTaskIncrementTick+0x16c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	429a      	cmp	r2, r3
 8001122:	d3b4      	bcc.n	800108e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001124:	2301      	movs	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001128:	e7b1      	b.n	800108e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <xTaskIncrementTick+0x16c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	4914      	ldr	r1, [pc, #80]	; (8001184 <xTaskIncrementTick+0x168>)
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d907      	bls.n	8001152 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e004      	b.n	8001152 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <xTaskIncrementTick+0x170>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <xTaskIncrementTick+0x170>)
 8001150:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <xTaskIncrementTick+0x174>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800115a:	2301      	movs	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800115e:	697b      	ldr	r3, [r7, #20]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001b4 	.word	0x200001b4
 800116c:	20000190 	.word	0x20000190
 8001170:	20000144 	.word	0x20000144
 8001174:	20000148 	.word	0x20000148
 8001178:	200001a4 	.word	0x200001a4
 800117c:	200001ac 	.word	0x200001ac
 8001180:	20000194 	.word	0x20000194
 8001184:	20000090 	.word	0x20000090
 8001188:	2000008c 	.word	0x2000008c
 800118c:	2000019c 	.word	0x2000019c
 8001190:	200001a0 	.word	0x200001a0

08001194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <vTaskSwitchContext+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <vTaskSwitchContext+0xa4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80011a8:	e03e      	b.n	8001228 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <vTaskSwitchContext+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <vTaskSwitchContext+0xa8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	f1c3 031f 	rsb	r3, r3, #31
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	491e      	ldr	r1, [pc, #120]	; (8001240 <vTaskSwitchContext+0xac>)
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <vTaskSwitchContext+0x5a>
	__asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e7fe      	b.n	80011ec <vTaskSwitchContext+0x58>
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <vTaskSwitchContext+0xac>)
 80011fa:	4413      	add	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	3308      	adds	r3, #8
 8001210:	429a      	cmp	r2, r3
 8001212:	d104      	bne.n	800121e <vTaskSwitchContext+0x8a>
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <vTaskSwitchContext+0xb0>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200001b4 	.word	0x200001b4
 8001238:	200001a0 	.word	0x200001a0
 800123c:	20000194 	.word	0x20000194
 8001240:	20000090 	.word	0x20000090
 8001244:	2000008c 	.word	0x2000008c

08001248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <vTaskPlaceOnEventList+0x24>
 8001258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125c:	f383 8811 	msr	BASEPRI, r3
 8001260:	f3bf 8f6f 	isb	sy
 8001264:	f3bf 8f4f 	dsb	sy
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e7fe      	b.n	800126a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <vTaskPlaceOnEventList+0x44>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3318      	adds	r3, #24
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7fe ffcb 	bl	8000210 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800127a:	2101      	movs	r1, #1
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f000 fa45 	bl	800170c <prvAddCurrentTaskToDelayedList>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000008c 	.word	0x2000008c

08001290 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <xTaskRemoveFromEventList+0x2a>
 80012a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012aa:	f383 8811 	msr	BASEPRI, r3
 80012ae:	f3bf 8f6f 	isb	sy
 80012b2:	f3bf 8f4f 	dsb	sy
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e7fe      	b.n	80012b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	3318      	adds	r3, #24
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ffde 	bl	8000280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <xTaskRemoveFromEventList+0xac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d11c      	bne.n	8001306 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3304      	adds	r3, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ffd5 	bl	8000280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	2201      	movs	r2, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <xTaskRemoveFromEventList+0xb0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <xTaskRemoveFromEventList+0xb0>)
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <xTaskRemoveFromEventList+0xb4>)
 80012f6:	441a      	add	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	3304      	adds	r3, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7fe ff63 	bl	80001ca <vListInsertEnd>
 8001304:	e005      	b.n	8001312 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3318      	adds	r3, #24
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <xTaskRemoveFromEventList+0xb8>)
 800130e:	f7fe ff5c 	bl	80001ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <xTaskRemoveFromEventList+0xbc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	429a      	cmp	r2, r3
 800131e:	d905      	bls.n	800132c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001320:	2301      	movs	r3, #1
 8001322:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <xTaskRemoveFromEventList+0xc0>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e001      	b.n	8001330 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001330:	697b      	ldr	r3, [r7, #20]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001b4 	.word	0x200001b4
 8001340:	20000194 	.word	0x20000194
 8001344:	20000090 	.word	0x20000090
 8001348:	2000014c 	.word	0x2000014c
 800134c:	2000008c 	.word	0x2000008c
 8001350:	200001a0 	.word	0x200001a0

08001354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <vTaskInternalSetTimeOutState+0x24>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <vTaskInternalSetTimeOutState+0x28>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	605a      	str	r2, [r3, #4]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001a4 	.word	0x200001a4
 800137c:	20000190 	.word	0x20000190

08001380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <xTaskCheckForTimeOut+0x24>
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	e7fe      	b.n	80013a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <xTaskCheckForTimeOut+0x3e>
 80013aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e7fe      	b.n	80013bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80013be:	f000 faf3 	bl	80019a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <xTaskCheckForTimeOut+0xb8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013da:	d102      	bne.n	80013e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	e023      	b.n	800142a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <xTaskCheckForTimeOut+0xbc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d007      	beq.n	80013fe <xTaskCheckForTimeOut+0x7e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d302      	bcc.n	80013fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e015      	b.n	800142a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	d20b      	bcs.n	8001420 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff9d 	bl	8001354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e004      	b.n	800142a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800142a:	f000 faeb 	bl	8001a04 <vPortExitCritical>

	return xReturn;
 800142e:	69fb      	ldr	r3, [r7, #28]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000190 	.word	0x20000190
 800143c:	200001a4 	.word	0x200001a4

08001440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <vTaskMissedYield+0x14>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200001a0 	.word	0x200001a0

08001458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001460:	f000 f852 	bl	8001508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <prvIdleTask+0x28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d9f9      	bls.n	8001460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <prvIdleTask+0x2c>)
 800146e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800147c:	e7f0      	b.n	8001460 <prvIdleTask+0x8>
 800147e:	bf00      	nop
 8001480:	20000090 	.word	0x20000090
 8001484:	e000ed04 	.word	0xe000ed04

08001488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	e00c      	b.n	80014ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <prvInitialiseTaskLists+0x60>)
 80014a0:	4413      	add	r3, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe66 	bl	8000174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d9ef      	bls.n	8001494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <prvInitialiseTaskLists+0x64>)
 80014b6:	f7fe fe5d 	bl	8000174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <prvInitialiseTaskLists+0x68>)
 80014bc:	f7fe fe5a 	bl	8000174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <prvInitialiseTaskLists+0x6c>)
 80014c2:	f7fe fe57 	bl	8000174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <prvInitialiseTaskLists+0x70>)
 80014c8:	f7fe fe54 	bl	8000174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <prvInitialiseTaskLists+0x74>)
 80014ce:	f7fe fe51 	bl	8000174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <prvInitialiseTaskLists+0x78>)
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <prvInitialiseTaskLists+0x64>)
 80014d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <prvInitialiseTaskLists+0x7c>)
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <prvInitialiseTaskLists+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000090 	.word	0x20000090
 80014ec:	2000011c 	.word	0x2000011c
 80014f0:	20000130 	.word	0x20000130
 80014f4:	2000014c 	.word	0x2000014c
 80014f8:	20000160 	.word	0x20000160
 80014fc:	20000178 	.word	0x20000178
 8001500:	20000144 	.word	0x20000144
 8001504:	20000148 	.word	0x20000148

08001508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800150e:	e019      	b.n	8001544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001510:	f000 fa4a 	bl	80019a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <prvCheckTasksWaitingTermination+0x4c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fead 	bl	8000280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <prvCheckTasksWaitingTermination+0x50>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <prvCheckTasksWaitingTermination+0x50>)
 800152e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <prvCheckTasksWaitingTermination+0x54>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <prvCheckTasksWaitingTermination+0x54>)
 8001538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800153a:	f000 fa63 	bl	8001a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f80e 	bl	8001560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <prvCheckTasksWaitingTermination+0x54>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e1      	bne.n	8001510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000160 	.word	0x20000160
 8001558:	2000018c 	.word	0x2000018c
 800155c:	20000174 	.word	0x20000174

08001560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fbd3 	bl	8001d18 <vPortFree>
			vPortFree( pxTCB );
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fbd0 	bl	8001d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <prvResetNextTaskUnblockTime+0x40>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <prvResetNextTaskUnblockTime+0x14>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <prvResetNextTaskUnblockTime+0x16>
 8001594:	2300      	movs	r3, #0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <prvResetNextTaskUnblockTime+0x44>)
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80015a2:	e008      	b.n	80015b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <prvResetNextTaskUnblockTime+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <prvResetNextTaskUnblockTime+0x44>)
 80015b4:	6013      	str	r3, [r2, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000144 	.word	0x20000144
 80015c4:	200001ac 	.word	0x200001ac

080015c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <xTaskGetSchedulerState+0x34>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80015d6:	2301      	movs	r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	e008      	b.n	80015ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <xTaskGetSchedulerState+0x38>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80015e4:	2302      	movs	r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	e001      	b.n	80015ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80015ee:	687b      	ldr	r3, [r7, #4]
	}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000198 	.word	0x20000198
 8001600:	200001b4 	.word	0x200001b4

08001604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06c      	beq.n	80016f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <xTaskPriorityDisinherit+0xfc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d009      	beq.n	8001638 <xTaskPriorityDisinherit+0x34>
 8001624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001628:	f383 8811 	msr	BASEPRI, r3
 800162c:	f3bf 8f6f 	isb	sy
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e7fe      	b.n	8001636 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <xTaskPriorityDisinherit+0x50>
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	e7fe      	b.n	8001652 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	429a      	cmp	r2, r3
 8001668:	d044      	beq.n	80016f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	2b00      	cmp	r3, #0
 8001670:	d140      	bne.n	80016f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3304      	adds	r3, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fe02 	bl	8000280 <uxListRemove>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d115      	bne.n	80016ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001686:	491f      	ldr	r1, [pc, #124]	; (8001704 <xTaskPriorityDisinherit+0x100>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10a      	bne.n	80016ae <xTaskPriorityDisinherit+0xaa>
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	2201      	movs	r2, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <xTaskPriorityDisinherit+0x104>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4013      	ands	r3, r2
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <xTaskPriorityDisinherit+0x104>)
 80016ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	f1c3 0207 	rsb	r2, r3, #7
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	2201      	movs	r2, #1
 80016c8:	409a      	lsls	r2, r3
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <xTaskPriorityDisinherit+0x104>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <xTaskPriorityDisinherit+0x104>)
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <xTaskPriorityDisinherit+0x100>)
 80016e2:	441a      	add	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3304      	adds	r3, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f7fe fd6d 	bl	80001ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80016f4:	697b      	ldr	r3, [r7, #20]
	}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000008c 	.word	0x2000008c
 8001704:	20000090 	.word	0x20000090
 8001708:	20000194 	.word	0x20000194

0800170c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdac 	bl	8000280 <uxListRemove>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10b      	bne.n	8001746 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	2201      	movs	r2, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4013      	ands	r3, r2
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001744:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800174c:	d10a      	bne.n	8001764 <prvAddCurrentTaskToDelayedList+0x58>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3304      	adds	r3, #4
 800175a:	4619      	mov	r1, r3
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800175e:	f7fe fd34 	bl	80001ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001762:	e026      	b.n	80017b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d209      	bcs.n	8001790 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3304      	adds	r3, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7fe fd41 	bl	8000210 <vListInsert>
}
 800178e:	e010      	b.n	80017b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3304      	adds	r3, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7fe fd37 	bl	8000210 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d202      	bcs.n	80017b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80017ac:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000190 	.word	0x20000190
 80017c0:	2000008c 	.word	0x2000008c
 80017c4:	20000194 	.word	0x20000194
 80017c8:	20000178 	.word	0x20000178
 80017cc:	20000148 	.word	0x20000148
 80017d0:	20000144 	.word	0x20000144
 80017d4:	200001ac 	.word	0x200001ac

080017d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3b04      	subs	r3, #4
 80017e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b04      	subs	r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f023 0201 	bic.w	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3b04      	subs	r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <pxPortInitialiseStack+0x54>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3b14      	subs	r3, #20
 8001812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3b20      	subs	r3, #32
 800181e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	08001831 	.word	0x08001831

08001830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <prvTaskExitError+0x4c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001842:	d009      	beq.n	8001858 <prvTaskExitError+0x28>
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e7fe      	b.n	8001856 <prvTaskExitError+0x26>
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800186a:	bf00      	nop
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0fc      	beq.n	800186c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000004 	.word	0x20000004

08001880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <pxCurrentTCBConst2>)
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	6808      	ldr	r0, [r1, #0]
 8001886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800188a:	f380 8809 	msr	PSP, r0
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f380 8811 	msr	BASEPRI, r0
 800189a:	f04e 0e0d 	orr.w	lr, lr, #13
 800189e:	4770      	bx	lr

080018a0 <pxCurrentTCBConst2>:
 80018a0:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop

080018a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <prvPortStartFirstTask+0x1c>)
 80018aa:	6800      	ldr	r0, [r0, #0]
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	f380 8808 	msr	MSP, r0
 80018b2:	b662      	cpsie	i
 80018b4:	b661      	cpsie	f
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	df00      	svc	0
 80018c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80018c2:	bf00      	nop
 80018c4:	e000ed08 	.word	0xe000ed08

080018c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <xPortStartScheduler+0xcc>)
 80018d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <xPortStartScheduler+0xd0>)
 80018f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <xPortStartScheduler+0xd4>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018fc:	e009      	b.n	8001912 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <xPortStartScheduler+0xd4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3b01      	subs	r3, #1
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <xPortStartScheduler+0xd4>)
 8001906:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b80      	cmp	r3, #128	; 0x80
 800191c:	d0ef      	beq.n	80018fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <xPortStartScheduler+0xd4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	d009      	beq.n	800193e <xPortStartScheduler+0x76>
 800192a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	e7fe      	b.n	800193c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <xPortStartScheduler+0xd4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	4a15      	ldr	r2, [pc, #84]	; (800199c <xPortStartScheduler+0xd4>)
 8001946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <xPortStartScheduler+0xd4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <xPortStartScheduler+0xd4>)
 8001952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <xPortStartScheduler+0xd8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <xPortStartScheduler+0xd8>)
 8001962:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <xPortStartScheduler+0xd8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <xPortStartScheduler+0xd8>)
 800196e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001974:	f000 f8b0 	bl	8001ad8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <xPortStartScheduler+0xdc>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800197e:	f7ff ff93 	bl	80018a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001982:	f7ff fc07 	bl	8001194 <vTaskSwitchContext>
	prvTaskExitError();
 8001986:	f7ff ff53 	bl	8001830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	e000e400 	.word	0xe000e400
 8001998:	200001b8 	.word	0x200001b8
 800199c:	200001bc 	.word	0x200001bc
 80019a0:	e000ed20 	.word	0xe000ed20
 80019a4:	20000004 	.word	0x20000004

080019a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	f3bf 8f4f 	dsb	sy
 80019be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <vPortEnterCritical+0x54>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <vPortEnterCritical+0x54>)
 80019c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <vPortEnterCritical+0x54>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d10e      	bne.n	80019f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <vPortEnterCritical+0x58>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d009      	beq.n	80019f0 <vPortEnterCritical+0x48>
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	e7fe      	b.n	80019ee <vPortEnterCritical+0x46>
	}
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000004 	.word	0x20000004
 8001a00:	e000ed04 	.word	0xe000ed04

08001a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <vPortExitCritical+0x48>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <vPortExitCritical+0x22>
 8001a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	f3bf 8f6f 	isb	sy
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e7fe      	b.n	8001a24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <vPortExitCritical+0x48>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <vPortExitCritical+0x48>)
 8001a2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <vPortExitCritical+0x48>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <vPortExitCritical+0x3e>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000004 	.word	0x20000004

08001a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001a50:	f3ef 8009 	mrs	r0, PSP
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <pxCurrentTCBConst>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a60:	6010      	str	r0, [r2, #0]
 8001a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a6a:	f380 8811 	msr	BASEPRI, r0
 8001a6e:	f7ff fb91 	bl	8001194 <vTaskSwitchContext>
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f380 8811 	msr	BASEPRI, r0
 8001a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	6808      	ldr	r0, [r1, #0]
 8001a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a86:	f380 8809 	msr	PSP, r0
 8001a8a:	f3bf 8f6f 	isb	sy
 8001a8e:	4770      	bx	lr

08001a90 <pxCurrentTCBConst>:
 8001a90:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop

08001a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8001a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 8001aa6:	f3bf 8f6f 	isb	sy
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001ab0:	f7ff fab4 	bl	800101c <xTaskIncrementTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <xPortSysTickHandler+0x3c>)
 8001abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	e000ed04 	.word	0xe000ed04

08001ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <vPortSetupTimerInterrupt+0x30>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <vPortSetupTimerInterrupt+0x34>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <vPortSetupTimerInterrupt+0x38>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <vPortSetupTimerInterrupt+0x3c>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <vPortSetupTimerInterrupt+0x40>)
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001afa:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <vPortSetupTimerInterrupt+0x30>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	e000e010 	.word	0xe000e010
 8001b0c:	e000e018 	.word	0xe000e018
 8001b10:	20000008 	.word	0x20000008
 8001b14:	10624dd3 	.word	0x10624dd3
 8001b18:	e000e014 	.word	0xe000e014

08001b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001b22:	f3ef 8305 	mrs	r3, IPSR
 8001b26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d913      	bls.n	8001b56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <vPortValidateInterruptPriority+0x68>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <vPortValidateInterruptPriority+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	7afa      	ldrb	r2, [r7, #11]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d209      	bcs.n	8001b56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b46:	f383 8811 	msr	BASEPRI, r3
 8001b4a:	f3bf 8f6f 	isb	sy
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	e7fe      	b.n	8001b54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <vPortValidateInterruptPriority+0x70>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <vPortValidateInterruptPriority+0x74>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d909      	bls.n	8001b7a <vPortValidateInterruptPriority+0x5e>
 8001b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	e7fe      	b.n	8001b78 <vPortValidateInterruptPriority+0x5c>
	}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	e000e3f0 	.word	0xe000e3f0
 8001b88:	200001b8 	.word	0x200001b8
 8001b8c:	e000ed0c 	.word	0xe000ed0c
 8001b90:	200001bc 	.word	0x200001bc

08001b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001ba0:	f7ff f992 	bl	8000ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <pvPortMalloc+0x170>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001bac:	f000 f90c 	bl	8001dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <pvPortMalloc+0x174>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 808c 	bne.w	8001cd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01c      	beq.n	8001bfe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d013      	beq.n	8001bfe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f023 0307 	bic.w	r3, r3, #7
 8001bdc:	3308      	adds	r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <pvPortMalloc+0x6a>
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e7fe      	b.n	8001bfc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d068      	beq.n	8001cd6 <pvPortMalloc+0x142>
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <pvPortMalloc+0x178>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d863      	bhi.n	8001cd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <pvPortMalloc+0x17c>)
 8001c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <pvPortMalloc+0x17c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c18:	e004      	b.n	8001c24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d903      	bls.n	8001c36 <pvPortMalloc+0xa2>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f1      	bne.n	8001c1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <pvPortMalloc+0x170>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d04a      	beq.n	8001cd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	4413      	add	r3, r2
 8001c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d91e      	bls.n	8001ca0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <pvPortMalloc+0xf4>
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e7fe      	b.n	8001c86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c9a:	69b8      	ldr	r0, [r7, #24]
 8001c9c:	f000 f8f6 	bl	8001e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <pvPortMalloc+0x178>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <pvPortMalloc+0x178>)
 8001cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <pvPortMalloc+0x178>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <pvPortMalloc+0x180>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d203      	bcs.n	8001cc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <pvPortMalloc+0x178>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <pvPortMalloc+0x180>)
 8001cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <pvPortMalloc+0x174>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001cd6:	f7ff f905 	bl	8000ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <pvPortMalloc+0x164>
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e7fe      	b.n	8001cf6 <pvPortMalloc+0x162>
	return pvReturn;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000dc8 	.word	0x20000dc8
 8001d08:	20000dd4 	.word	0x20000dd4
 8001d0c:	20000dcc 	.word	0x20000dcc
 8001d10:	20000dc0 	.word	0x20000dc0
 8001d14:	20000dd0 	.word	0x20000dd0

08001d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d046      	beq.n	8001db8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	425b      	negs	r3, r3
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <vPortFree+0xa8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <vPortFree+0x42>
 8001d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e7fe      	b.n	8001d58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <vPortFree+0x5e>
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	e7fe      	b.n	8001d74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <vPortFree+0xa8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d019      	beq.n	8001db8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d115      	bne.n	8001db8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <vPortFree+0xa8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d9c:	f7ff f894 	bl	8000ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <vPortFree+0xac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <vPortFree+0xac>)
 8001dac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f000 f86c 	bl	8001e8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001db4:	f7ff f896 	bl	8000ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000dd4 	.word	0x20000dd4
 8001dc4:	20000dcc 	.word	0x20000dcc

08001dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001dce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <prvHeapInit+0xac>)
 8001dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3307      	adds	r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <prvHeapInit+0xac>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <prvHeapInit+0xb0>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <prvHeapInit+0xb0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e14:	2208      	movs	r2, #8
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0307 	bic.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <prvHeapInit+0xb4>)
 8001e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <prvHeapInit+0xb4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <prvHeapInit+0xb4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <prvHeapInit+0xb4>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <prvHeapInit+0xb8>)
 8001e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <prvHeapInit+0xbc>)
 8001e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <prvHeapInit+0xc0>)
 8001e62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200001c0 	.word	0x200001c0
 8001e78:	20000dc0 	.word	0x20000dc0
 8001e7c:	20000dc8 	.word	0x20000dc8
 8001e80:	20000dd0 	.word	0x20000dd0
 8001e84:	20000dcc 	.word	0x20000dcc
 8001e88:	20000dd4 	.word	0x20000dd4

08001e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <prvInsertBlockIntoFreeList+0xa8>)
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e002      	b.n	8001ea0 <prvInsertBlockIntoFreeList+0x14>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8f7      	bhi.n	8001e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d108      	bne.n	8001ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	441a      	add	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d118      	bne.n	8001f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <prvInsertBlockIntoFreeList+0xac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d00d      	beq.n	8001f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e008      	b.n	8001f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <prvInsertBlockIntoFreeList+0xac>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d002      	beq.n	8001f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000dc0 	.word	0x20000dc0
 8001f38:	20000dc8 	.word	0x20000dc8

08001f3c <DelayMicro>:
#include "ds18b20.h"
//--------------------------------------------------
void DelayMicro( uint32_t micros)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <DelayMicro+0x34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <DelayMicro+0x38>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0dda      	lsrs	r2, r3, #23
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8001f58:	bf00      	nop
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1fa      	bne.n	8001f5a <DelayMicro+0x1e>
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000008 	.word	0x20000008
 8001f74:	ee9bfab5 	.word	0xee9bfab5

08001f78 <port_init>:
//--------------------------------------------------
void port_init(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  GPIOB->CRH |= GPIO_CRH_MODE11;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <port_init+0x30>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <port_init+0x30>)
 8001f82:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001f86:	6053      	str	r3, [r2, #4]
  GPIOB->CRH |= GPIO_CRH_CNF11_0;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <port_init+0x30>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <port_init+0x30>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f92:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~GPIO_CRH_CNF11_1;
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <port_init+0x30>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <port_init+0x30>)
 8001f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f9e:	6053      	str	r3, [r2, #4]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40010c00 	.word	0x40010c00

08001fac <ds18b20_Reset>:
//--------------------------------------------------
uint8_t ds18b20_Reset(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint16_t status;
  GPIOB->ODR &= ~GPIO_ODR_ODR11;//������ �������
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <ds18b20_Reset+0x54>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <ds18b20_Reset+0x54>)
 8001fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fbc:	60d3      	str	r3, [r2, #12]
  DelayMicro(485);//�������� ��� ������� �� 480 �����������
 8001fbe:	f240 10e5 	movw	r0, #485	; 0x1e5
 8001fc2:	f7ff ffbb 	bl	8001f3c <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;//������� �������
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <ds18b20_Reset+0x54>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <ds18b20_Reset+0x54>)
 8001fcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd0:	60d3      	str	r3, [r2, #12]
  DelayMicro(65);//�������� ��� ������� �� 60 �����������
 8001fd2:	2041      	movs	r0, #65	; 0x41
 8001fd4:	f7ff ffb2 	bl	8001f3c <DelayMicro>
  status = GPIOB->IDR & GPIO_IDR_IDR11;//��������� �������
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <ds18b20_Reset+0x54>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	80fb      	strh	r3, [r7, #6]
  DelayMicro(500);//�������� ��� ������� �� 480 �����������
 8001fe4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fe8:	f7ff ffa8 	bl	8001f3c <DelayMicro>
  //(�� ������ ������ ������� ��������, ��� ��� ����� ���� ���������� � ��������)
  return (status ? 1 : 0);//����� ���������
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010c00 	.word	0x40010c00

08002004 <ds18b20_ReadBit>:
//----------------------------------------------------------
uint8_t ds18b20_ReadBit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;//������ �������
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <ds18b20_ReadBit+0x54>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <ds18b20_ReadBit+0x54>)
 8002014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002018:	60d3      	str	r3, [r2, #12]
  DelayMicro(2);
 800201a:	2002      	movs	r0, #2
 800201c:	f7ff ff8e 	bl	8001f3c <DelayMicro>
	GPIOB->ODR |= GPIO_ODR_ODR11;//������� �������
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <ds18b20_ReadBit+0x54>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <ds18b20_ReadBit+0x54>)
 8002026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800202a:	60d3      	str	r3, [r2, #12]
	DelayMicro(13);
 800202c:	200d      	movs	r0, #13
 800202e:	f7ff ff85 	bl	8001f3c <DelayMicro>
	bit = (GPIOB->IDR & GPIO_IDR_IDR11 ? 1 : 0);//��������� �������	
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <ds18b20_ReadBit+0x54>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	71fb      	strb	r3, [r7, #7]
	DelayMicro(45);
 8002046:	202d      	movs	r0, #45	; 0x2d
 8002048:	f7ff ff78 	bl	8001f3c <DelayMicro>
  return bit;
 800204c:	79fb      	ldrb	r3, [r7, #7]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40010c00 	.word	0x40010c00

0800205c <ds18b20_ReadByte>:
//-----------------------------------------------
uint8_t ds18b20_ReadByte(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	71bb      	strb	r3, [r7, #6]
 800206a:	e00d      	b.n	8002088 <ds18b20_ReadByte+0x2c>
  data += ds18b20_ReadBit() << i;
 800206c:	f7ff ffca 	bl	8002004 <ds18b20_ReadBit>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	b2da      	uxtb	r2, r3
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	4413      	add	r3, r2
 8002080:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	3301      	adds	r3, #1
 8002086:	71bb      	strb	r3, [r7, #6]
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	2b07      	cmp	r3, #7
 800208c:	d9ee      	bls.n	800206c <ds18b20_ReadByte+0x10>
  return data;
 800208e:	79fb      	ldrb	r3, [r7, #7]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <ds18b20_WriteBit>:
//-----------------------------------------------
void ds18b20_WriteBit(uint8_t bit)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <ds18b20_WriteBit+0x50>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <ds18b20_WriteBit+0x50>)
 80020a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020ac:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 3 : 65);
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <ds18b20_WriteBit+0x20>
 80020b4:	2303      	movs	r3, #3
 80020b6:	e000      	b.n	80020ba <ds18b20_WriteBit+0x22>
 80020b8:	2341      	movs	r3, #65	; 0x41
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff3e 	bl	8001f3c <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <ds18b20_WriteBit+0x50>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <ds18b20_WriteBit+0x50>)
 80020c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ca:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 65 : 3);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <ds18b20_WriteBit+0x3e>
 80020d2:	2341      	movs	r3, #65	; 0x41
 80020d4:	e000      	b.n	80020d8 <ds18b20_WriteBit+0x40>
 80020d6:	2303      	movs	r3, #3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff2f 	bl	8001f3c <DelayMicro>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40010c00 	.word	0x40010c00

080020ec <ds18b20_WriteByte>:
//-----------------------------------------------
void ds18b20_WriteByte(uint8_t dt)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e010      	b.n	800211e <ds18b20_WriteByte+0x32>
  {
    ds18b20_WriteBit(dt >> i & 1);
 80020fc:	79fa      	ldrb	r2, [r7, #7]
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	fa42 f303 	asr.w	r3, r2, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ffc3 	bl	8002098 <ds18b20_WriteBit>
    //Delay Protection
    DelayMicro(5);
 8002112:	2005      	movs	r0, #5
 8002114:	f7ff ff12 	bl	8001f3c <DelayMicro>
  for (uint8_t i = 0; i < 8; i++)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3301      	adds	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b07      	cmp	r3, #7
 8002122:	d9eb      	bls.n	80020fc <ds18b20_WriteByte+0x10>
  }
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	if(ds18b20_Reset()) return 1;
 8002136:	f7ff ff39 	bl	8001fac <ds18b20_Reset>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <ds18b20_init+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e012      	b.n	800216a <ds18b20_init+0x3e>
  if(mode==SKIP_ROM)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10e      	bne.n	8002168 <ds18b20_init+0x3c>
  {
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
 800214a:	20cc      	movs	r0, #204	; 0xcc
 800214c:	f7ff ffce 	bl	80020ec <ds18b20_WriteByte>
		//WRITE SCRATCHPAD
		ds18b20_WriteByte(0x4E);
 8002150:	204e      	movs	r0, #78	; 0x4e
 8002152:	f7ff ffcb 	bl	80020ec <ds18b20_WriteByte>
		//TH REGISTER 100 ��������
		ds18b20_WriteByte(0x64);
 8002156:	2064      	movs	r0, #100	; 0x64
 8002158:	f7ff ffc8 	bl	80020ec <ds18b20_WriteByte>
		//TL REGISTER - 30 ��������
		ds18b20_WriteByte(0x1E);
 800215c:	201e      	movs	r0, #30
 800215e:	f7ff ffc5 	bl	80020ec <ds18b20_WriteByte>
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
 8002162:	207f      	movs	r0, #127	; 0x7f
 8002164:	f7ff ffc2 	bl	80020ec <ds18b20_WriteByte>
  }
  return 0;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	460a      	mov	r2, r1
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	4613      	mov	r3, r2
 8002180:	71bb      	strb	r3, [r7, #6]
  ds18b20_Reset();
 8002182:	f7ff ff13 	bl	8001fac <ds18b20_Reset>
  if(mode==SKIP_ROM)
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <ds18b20_MeasureTemperCmd+0x20>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
 800218c:	20cc      	movs	r0, #204	; 0xcc
 800218e:	f7ff ffad 	bl	80020ec <ds18b20_WriteByte>
  }
  //CONVERT T
  ds18b20_WriteByte(0x44);
 8002192:	2044      	movs	r0, #68	; 0x44
 8002194:	f7ff ffaa 	bl	80020ec <ds18b20_WriteByte>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  ds18b20_Reset();
 80021b0:	f7ff fefc 	bl	8001fac <ds18b20_Reset>
  if(mode==SKIP_ROM)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <ds18b20_ReadStratcpad+0x20>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
 80021ba:	20cc      	movs	r0, #204	; 0xcc
 80021bc:	f7ff ff96 	bl	80020ec <ds18b20_WriteByte>
  }
  //READ SCRATCHPAD
  ds18b20_WriteByte(0xBE);
 80021c0:	20be      	movs	r0, #190	; 0xbe
 80021c2:	f7ff ff93 	bl	80020ec <ds18b20_WriteByte>
  for(i=0;i<8;i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e009      	b.n	80021e0 <ds18b20_ReadStratcpad+0x40>
  {
    Data[i] = ds18b20_ReadByte();
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	18d4      	adds	r4, r2, r3
 80021d2:	f7ff ff43 	bl	800205c <ds18b20_ReadByte>
 80021d6:	4603      	mov	r3, r0
 80021d8:	7023      	strb	r3, [r4, #0]
  for(i=0;i<8;i++)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	3301      	adds	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b07      	cmp	r3, #7
 80021e4:	d9f2      	bls.n	80021cc <ds18b20_ReadStratcpad+0x2c>
  }
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
	...

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4906      	ldr	r1, [pc, #24]	; (8002224 <__NVIC_EnableIRQ+0x34>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <main>:
static uint16_t valueADC[2];


//------------------------------------------------------------

int main (void){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af02      	add	r7, sp, #8

	 // настройка HSE PLL SYSCLK
	RCC->CR |= RCC_CR_HSEON;
 800222e:	4b9a      	ldr	r3, [pc, #616]	; (8002498 <main+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a99      	ldr	r2, [pc, #612]	; (8002498 <main+0x270>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
	while (!  (RCC->CR & RCC_CR_HSERDY)   );
 800223a:	bf00      	nop
 800223c:	4b96      	ldr	r3, [pc, #600]	; (8002498 <main+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f9      	beq.n	800223c <main+0x14>

	FLASH ->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002248:	4b94      	ldr	r3, [pc, #592]	; (800249c <main+0x274>)
 800224a:	2217      	movs	r2, #23
 800224c:	601a      	str	r2, [r3, #0]

	RCC->CFGR &= ~RCC_CFGR_HPRE;  // 0000   /1
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <main+0x270>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4a91      	ldr	r2, [pc, #580]	; (8002498 <main+0x270>)
 8002254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002258:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;//100 - /2
 800225a:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <main+0x270>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a8e      	ldr	r2, [pc, #568]	; (8002498 <main+0x270>)
 8002260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002264:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE2; //000  - /1
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <main+0x270>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a8b      	ldr	r2, [pc, #556]	; (8002498 <main+0x270>)
 800226c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002270:	6053      	str	r3, [r2, #4]

	RCC->CFGR |=  RCC_CFGR_ADCPRE_DIV4;
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <main+0x270>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a88      	ldr	r2, [pc, #544]	; (8002498 <main+0x270>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227c:	6053      	str	r3, [r2, #4]


	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800227e:	4b86      	ldr	r3, [pc, #536]	; (8002498 <main+0x270>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a85      	ldr	r2, [pc, #532]	; (8002498 <main+0x270>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 800228a:	4b83      	ldr	r3, [pc, #524]	; (8002498 <main+0x270>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4a82      	ldr	r2, [pc, #520]	; (8002498 <main+0x270>)
 8002290:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8002294:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;
 8002296:	4b80      	ldr	r3, [pc, #512]	; (8002498 <main+0x270>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a7f      	ldr	r2, [pc, #508]	; (8002498 <main+0x270>)
 800229c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80022a0:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <main+0x270>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <main+0x270>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <main+0x270>)
 80022b0:	4a79      	ldr	r2, [pc, #484]	; (8002498 <main+0x270>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL6;
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <main+0x270>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a77      	ldr	r2, [pc, #476]	; (8002498 <main+0x270>)
 80022bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c0:	6053      	str	r3, [r2, #4]



	RCC->CR |= RCC_CR_PLLON;
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <main+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a74      	ldr	r2, [pc, #464]	; (8002498 <main+0x270>)
 80022c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022cc:	6013      	str	r3, [r2, #0]
	while (!  (RCC->CR & RCC_CR_PLLRDY)   );
 80022ce:	bf00      	nop
 80022d0:	4b71      	ldr	r3, [pc, #452]	; (8002498 <main+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f9      	beq.n	80022d0 <main+0xa8>

	RCC->CFGR &= ~RCC_CFGR_SW;
 80022dc:	4b6e      	ldr	r3, [pc, #440]	; (8002498 <main+0x270>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a6d      	ldr	r2, [pc, #436]	; (8002498 <main+0x270>)
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=  RCC_CFGR_SW_PLL;
 80022e8:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <main+0x270>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <main+0x270>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= RCC_CFGR_MCOSEL_PLL_DIV2;
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <main+0x270>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a67      	ldr	r2, [pc, #412]	; (8002498 <main+0x270>)
 80022fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022fe:	6053      	str	r3, [r2, #4]


	while (  (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1   ) ;
 8002300:	bf00      	nop
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <main+0x270>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d1f9      	bne.n	8002302 <main+0xda>

	// тактирование
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800230e:	4b62      	ldr	r3, [pc, #392]	; (8002498 <main+0x270>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	4a61      	ldr	r2, [pc, #388]	; (8002498 <main+0x270>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <main+0x270>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <main+0x270>)
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <main+0x270>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <main+0x270>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <main+0x270>)
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	4a58      	ldr	r2, [pc, #352]	; (8002498 <main+0x270>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800233e:	4b56      	ldr	r3, [pc, #344]	; (8002498 <main+0x270>)
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	4a55      	ldr	r2, [pc, #340]	; (8002498 <main+0x270>)
 8002344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002348:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <main+0x270>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <main+0x270>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6193      	str	r3, [r2, #24]

	//RCC->APB1ENR |= RCC_APB1ENR_USART3EN;

	//GPIO
		// 1 Wire pins
	GPIOA->CRH |= GPIO_CRH_MODE13; // output
 8002356:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <main+0x278>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a51      	ldr	r2, [pc, #324]	; (80024a0 <main+0x278>)
 800235c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002360:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF13_0; // open drain
 8002362:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <main+0x278>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <main+0x278>)
 8002368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800236c:	6053      	str	r3, [r2, #4]


		// ADC ports
	GPIOA->CRL &= ~GPIO_CRL_MODE0; // PA0   - input
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <main+0x278>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <main+0x278>)
 8002374:	f023 0303 	bic.w	r3, r3, #3
 8002378:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF0;  //PA0    - analog mode
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <main+0x278>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <main+0x278>)
 8002380:	f023 030c 	bic.w	r3, r3, #12
 8002384:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE1; // PA1   - input
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <main+0x278>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <main+0x278>)
 800238c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002390:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF1;  //PA1    - analog mode
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <main+0x278>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <main+0x278>)
 8002398:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800239c:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE2; // PA2  - input
 800239e:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <main+0x278>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <main+0x278>)
 80023a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a8:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF2;  //PA2    - analog mode
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <main+0x278>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <main+0x278>)
 80023b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023b4:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE3; // PA3   - input
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <main+0x278>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a39      	ldr	r2, [pc, #228]	; (80024a0 <main+0x278>)
 80023bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c0:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF3;  //PA3    - analog mode
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <main+0x278>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <main+0x278>)
 80023c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023cc:	6013      	str	r3, [r2, #0]



		// UART ports
	GPIOA->CRH |= GPIO_CRH_MODE9; // PA9    - output      TX
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <main+0x278>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a33      	ldr	r2, [pc, #204]	; (80024a0 <main+0x278>)
 80023d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80023d8:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1;  //PA9   - GP out PP   TX
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <main+0x278>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <main+0x278>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~ GPIO_CRH_MODE10; // PA10  - input                     RX
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <main+0x278>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a2d      	ldr	r2, [pc, #180]	; (80024a0 <main+0x278>)
 80023ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f0:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;  //PA10  - Alternative input float   RX
 80023f2:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <main+0x278>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <main+0x278>)
 80023f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fc:	6053      	str	r3, [r2, #4]



	//UART INIT

	USART1->BRR =  0x1A1; // 417   -- 115200 48MHz
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <main+0x27c>)
 8002400:	f240 12a1 	movw	r2, #417	; 0x1a1
 8002404:	609a      	str	r2, [r3, #8]

	USART1->CR1 |= USART_CR1_UE;
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <main+0x27c>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <main+0x27c>)
 800240c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002410:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TE;
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <main+0x27c>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <main+0x27c>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RE;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <main+0x27c>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <main+0x27c>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RXNEIE;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <main+0x27c>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <main+0x27c>)
 8002430:	f043 0320 	orr.w	r3, r3, #32
 8002434:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 8002436:	2025      	movs	r0, #37	; 0x25
 8002438:	f7ff feda 	bl	80021f0 <__NVIC_EnableIRQ>


	//ADC


	ADC1->CR2 |= ADC_CR2_CONT;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <main+0x280>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <main+0x280>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	6093      	str	r3, [r2, #8]
	//ADC1->CR2 &= ~ADC_CR2_CONT;



	ADC1->CR2 |= ADC_CR2_EXTSEL;
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <main+0x280>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <main+0x280>)
 800244e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002452:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTTRIG;
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <main+0x280>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <main+0x280>)
 800245a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800245e:	6093      	str	r3, [r2, #8]

	ADC1->SQR1 &= ~ADC_SQR1_L;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <main+0x280>)
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <main+0x280>)
 8002466:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800246a:	62d3      	str	r3, [r2, #44]	; 0x2c

	ADC1->SQR1 |= ADC_SQR1_L_0;  /// 2
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <main+0x280>)
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <main+0x280>)
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002476:	62d3      	str	r3, [r2, #44]	; 0x2c



	ADC1->SMPR2 &= ~ADC_SMPR2_SMP0; //  0 канал  сэмплирование  циклов
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <main+0x280>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <main+0x280>)
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP1; //  1 канал  сэмплирование  циклов
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <main+0x280>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <main+0x280>)
 800248a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800248e:	6113      	str	r3, [r2, #16]


	ADC1->SMPR2 |= ADC_SMPR2_SMP0 ;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <main+0x280>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	e00a      	b.n	80024ac <main+0x284>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40012400 	.word	0x40012400
 80024ac:	4a6c      	ldr	r2, [pc, #432]	; (8002660 <main+0x438>)
 80024ae:	f043 0307 	orr.w	r3, r3, #7
 80024b2:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP1 ;
 80024b4:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <main+0x438>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a69      	ldr	r2, [pc, #420]	; (8002660 <main+0x438>)
 80024ba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80024be:	6113      	str	r3, [r2, #16]

	ADC1->SQR3 &= ~ADC_SQR3_SQ1;  //PA0
 80024c0:	4b67      	ldr	r3, [pc, #412]	; (8002660 <main+0x438>)
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	4a66      	ldr	r2, [pc, #408]	; (8002660 <main+0x438>)
 80024c6:	f023 031f 	bic.w	r3, r3, #31
 80024ca:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 80024cc:	4b64      	ldr	r3, [pc, #400]	; (8002660 <main+0x438>)
 80024ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <main+0x438>)
 80024d2:	f043 0320 	orr.w	r3, r3, #32
 80024d6:	6353      	str	r3, [r2, #52]	; 0x34


	ADC1->CR1 |= ADC_CR1_SCAN;
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <main+0x438>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a60      	ldr	r2, [pc, #384]	; (8002660 <main+0x438>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6053      	str	r3, [r2, #4]

	ADC1->CR2 |= ADC_CR2_ADON;
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <main+0x438>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	; (8002660 <main+0x438>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= ADC_CR2_RSTCAL;
 80024f0:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <main+0x438>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <main+0x438>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_RSTCAL);
 80024fc:	bf00      	nop
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <main+0x438>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b08      	cmp	r3, #8
 8002508:	d0f9      	beq.n	80024fe <main+0x2d6>
	ADC1->CR2 |= ADC_CR2_CAL;
 800250a:	4b55      	ldr	r3, [pc, #340]	; (8002660 <main+0x438>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a54      	ldr	r2, [pc, #336]	; (8002660 <main+0x438>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_CAL); // пока там 1 идет калибровка по окончанию идет сброс бита
 8002516:	bf00      	nop
 8002518:	4b51      	ldr	r3, [pc, #324]	; (8002660 <main+0x438>)
 800251a:	689b      	ldr	r3, [r3, #8]


	//--------------------------------------------------------------------------------
	//     DMA   ADC1

	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800251c:	4b51      	ldr	r3, [pc, #324]	; (8002664 <main+0x43c>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4a50      	ldr	r2, [pc, #320]	; (8002664 <main+0x43c>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR;
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <main+0x440>)
 800252a:	4a50      	ldr	r2, [pc, #320]	; (800266c <main+0x444>)
 800252c:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t) &valueADC[0];
 800252e:	4b4e      	ldr	r3, [pc, #312]	; (8002668 <main+0x440>)
 8002530:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <main+0x448>)
 8002532:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 2;
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <main+0x440>)
 8002536:	2202      	movs	r2, #2
 8002538:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <main+0x440>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <main+0x440>)
 8002540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002544:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
 8002546:	4b48      	ldr	r3, [pc, #288]	; (8002668 <main+0x440>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a47      	ldr	r2, [pc, #284]	; (8002668 <main+0x440>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <main+0x440>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a44      	ldr	r2, [pc, #272]	; (8002668 <main+0x440>)
 8002558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255c:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 800255e:	4b42      	ldr	r3, [pc, #264]	; (8002668 <main+0x440>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a41      	ldr	r2, [pc, #260]	; (8002668 <main+0x440>)
 8002564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002568:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <main+0x440>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <main+0x440>)
 8002570:	f043 0320 	orr.w	r3, r3, #32
 8002574:	6013      	str	r3, [r2, #0]
	//DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 8002576:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <main+0x440>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <main+0x440>)
 800257c:	f023 0310 	bic.w	r3, r3, #16
 8002580:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <main+0x440>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a38      	ldr	r2, [pc, #224]	; (8002668 <main+0x440>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <main+0x438>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <main+0x438>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6093      	str	r3, [r2, #8]

	//--------------------------------------------------------------------------------
	TransmitDataTemp1 = xQueueCreate(3,sizeof(uint16_t));
 800259a:	2200      	movs	r2, #0
 800259c:	2102      	movs	r1, #2
 800259e:	2003      	movs	r0, #3
 80025a0:	f7fd ff00 	bl	80003a4 <xQueueGenericCreate>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b33      	ldr	r3, [pc, #204]	; (8002674 <main+0x44c>)
 80025a8:	601a      	str	r2, [r3, #0]
	TransmitDataTemp2 = xQueueCreate(3,sizeof(uint16_t));
 80025aa:	2200      	movs	r2, #0
 80025ac:	2102      	movs	r1, #2
 80025ae:	2003      	movs	r0, #3
 80025b0:	f7fd fef8 	bl	80003a4 <xQueueGenericCreate>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <main+0x450>)
 80025b8:	601a      	str	r2, [r3, #0]
	TransmitDataADC3 = xQueueCreate(3,sizeof(uint16_t));
 80025ba:	2200      	movs	r2, #0
 80025bc:	2102      	movs	r1, #2
 80025be:	2003      	movs	r0, #3
 80025c0:	f7fd fef0 	bl	80003a4 <xQueueGenericCreate>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <main+0x454>)
 80025c8:	601a      	str	r2, [r3, #0]
	TransmitDataADC4 = xQueueCreate(3,sizeof(uint16_t));
 80025ca:	2200      	movs	r2, #0
 80025cc:	2102      	movs	r1, #2
 80025ce:	2003      	movs	r0, #3
 80025d0:	f7fd fee8 	bl	80003a4 <xQueueGenericCreate>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <main+0x458>)
 80025d8:	601a      	str	r2, [r3, #0]

	ReceiveCommand = xQueueCreate(1, sizeof(uint8_t));
 80025da:	2200      	movs	r2, #0
 80025dc:	2101      	movs	r1, #1
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fd fee0 	bl	80003a4 <xQueueGenericCreate>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <main+0x45c>)
 80025e8:	601a      	str	r2, [r3, #0]

	TIM2->CR1 |= TIM_CR1_UDIS;
 80025ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6013      	str	r3, [r2, #0]
	GPIOC->CRH |= GPIO_CRH_MODE13; // PC13   - output
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <main+0x460>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a22      	ldr	r2, [pc, #136]	; (8002688 <main+0x460>)
 8002600:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002604:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF13;  //PC13   - GP out PP
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <main+0x460>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <main+0x460>)
 800260c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002610:	6053      	str	r3, [r2, #4]


	xTaskCreate(vTaskMainConvert, "ADC ", 128, NULL, 2, NULL);
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2302      	movs	r3, #2
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2300      	movs	r3, #0
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <main+0x464>)
 8002620:	481b      	ldr	r0, [pc, #108]	; (8002690 <main+0x468>)
 8002622:	f7fe faae 	bl	8000b82 <xTaskCreate>
	xTaskCreate(vTaskTemp, "Temp", 128, NULL, 1, NULL);
 8002626:	2300      	movs	r3, #0
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2301      	movs	r3, #1
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	4918      	ldr	r1, [pc, #96]	; (8002694 <main+0x46c>)
 8002634:	4818      	ldr	r0, [pc, #96]	; (8002698 <main+0x470>)
 8002636:	f7fe faa4 	bl	8000b82 <xTaskCreate>
	xTaskCreate(vTaskUSART, "UART ", 128, NULL, 1, NULL);
 800263a:	2300      	movs	r3, #0
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2301      	movs	r3, #1
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	4915      	ldr	r1, [pc, #84]	; (800269c <main+0x474>)
 8002648:	4815      	ldr	r0, [pc, #84]	; (80026a0 <main+0x478>)
 800264a:	f7fe fa9a 	bl	8000b82 <xTaskCreate>

	vTaskStartScheduler();
 800264e:	f7fe fbf5 	bl	8000e3c <vTaskStartScheduler>

	while (1){
		USART1SendStr("Hello ");
 8002652:	4814      	ldr	r0, [pc, #80]	; (80026a4 <main+0x47c>)
 8002654:	f000 f99a 	bl	800298c <USART1SendStr>
		USART1SendStr("\r\n");
 8002658:	4813      	ldr	r0, [pc, #76]	; (80026a8 <main+0x480>)
 800265a:	f000 f997 	bl	800298c <USART1SendStr>
		USART1SendStr("Hello ");
 800265e:	e7f8      	b.n	8002652 <main+0x42a>
 8002660:	40012400 	.word	0x40012400
 8002664:	40021000 	.word	0x40021000
 8002668:	40020008 	.word	0x40020008
 800266c:	4001244c 	.word	0x4001244c
 8002670:	20000dec 	.word	0x20000dec
 8002674:	20000dd8 	.word	0x20000dd8
 8002678:	20000ddc 	.word	0x20000ddc
 800267c:	20000de0 	.word	0x20000de0
 8002680:	20000de4 	.word	0x20000de4
 8002684:	20000de8 	.word	0x20000de8
 8002688:	40011000 	.word	0x40011000
 800268c:	080033b4 	.word	0x080033b4
 8002690:	08002895 	.word	0x08002895
 8002694:	080033bc 	.word	0x080033bc
 8002698:	080026ad 	.word	0x080026ad
 800269c:	080033c4 	.word	0x080033c4
 80026a0:	08002741 	.word	0x08002741
 80026a4:	080033cc 	.word	0x080033cc
 80026a8:	080033d4 	.word	0x080033d4

080026ac <vTaskTemp>:


//================================================================================


void vTaskTemp (void *argument){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b096      	sub	sp, #88	; 0x58
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	uint16_t raw_temper;

	char c;
	char str1[60];

	port_init();
 80026b4:	f7ff fc60 	bl	8001f78 <port_init>
	status = ds18b20_init(SKIP_ROM);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7ff fd37 	bl	800212c <ds18b20_init>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(str1,"Init Status: %d\r\n",status);
 80026c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4919      	ldr	r1, [pc, #100]	; (8002734 <vTaskTemp+0x88>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fa58 	bl	8002b84 <siprintf>
	USART1SendStr(str1);USART1SendStr("\r\n");
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f957 	bl	800298c <USART1SendStr>
 80026de:	4816      	ldr	r0, [pc, #88]	; (8002738 <vTaskTemp+0x8c>)
 80026e0:	f000 f954 	bl	800298c <USART1SendStr>

while (1){
	ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 80026e4:	2100      	movs	r1, #0
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff fd43 	bl	8002172 <ds18b20_MeasureTemperCmd>
	vTaskDelay(1000);
 80026ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026f0:	f7fe fb70 	bl	8000dd4 <vTaskDelay>
	ds18b20_ReadStratcpad(SKIP_ROM, dt, 0);
 80026f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f8:	2200      	movs	r2, #0
 80026fa:	4619      	mov	r1, r3
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff fd4f 	bl	80021a0 <ds18b20_ReadStratcpad>
	raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 8002702:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	b21a      	sxth	r2, r3
 800270a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800270e:	b21b      	sxth	r3, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	b21b      	sxth	r3, r3
 8002714:	b29b      	uxth	r3, r3
 8002716:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	xQueueSend(TransmitDataTemp1,&raw_temper,0);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <vTaskTemp+0x90>)
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8002722:	2300      	movs	r3, #0
 8002724:	2200      	movs	r2, #0
 8002726:	f7fd fe95 	bl	8000454 <xQueueGenericSend>
	vTaskDelay(1000);
 800272a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272e:	f7fe fb51 	bl	8000dd4 <vTaskDelay>
	ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 8002732:	e7d7      	b.n	80026e4 <vTaskTemp+0x38>
 8002734:	080033d8 	.word	0x080033d8
 8002738:	080033d4 	.word	0x080033d4
 800273c:	20000dd8 	.word	0x20000dd8

08002740 <vTaskUSART>:
}

}


void vTaskUSART(void *argument){
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	uint16_t uBuffer;
	char strbuffer[6];


	while (1){
		if (uxQueueMessagesWaiting(TransmitDataTemp1)!= 0){
 8002748:	4b48      	ldr	r3, [pc, #288]	; (800286c <vTaskUSART+0x12c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe f8eb 	bl	8000928 <uxQueueMessagesWaiting>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01a      	beq.n	800278e <vTaskUSART+0x4e>
			xQueueReceive(TransmitDataTemp1, &uBuffer, 0);
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <vTaskUSART+0x12c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f107 010e 	add.w	r1, r7, #14
 8002760:	2200      	movs	r2, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f804 	bl	8000770 <xQueueReceive>
			sprintf(strbuffer, "%u",uBuffer);
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	461a      	mov	r2, r3
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	493f      	ldr	r1, [pc, #252]	; (8002870 <vTaskUSART+0x130>)
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa06 	bl	8002b84 <siprintf>
			USART1SendStr("Temp1=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8002778:	483e      	ldr	r0, [pc, #248]	; (8002874 <vTaskUSART+0x134>)
 800277a:	f000 f907 	bl	800298c <USART1SendStr>
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f902 	bl	800298c <USART1SendStr>
 8002788:	483b      	ldr	r0, [pc, #236]	; (8002878 <vTaskUSART+0x138>)
 800278a:	f000 f8ff 	bl	800298c <USART1SendStr>
		}
		if (uxQueueMessagesWaiting(TransmitDataTemp2)!= 0){
 800278e:	4b3b      	ldr	r3, [pc, #236]	; (800287c <vTaskUSART+0x13c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe f8c8 	bl	8000928 <uxQueueMessagesWaiting>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01a      	beq.n	80027d4 <vTaskUSART+0x94>
			xQueueReceive(TransmitDataTemp2, &uBuffer, 0);
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <vTaskUSART+0x13c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f107 010e 	add.w	r1, r7, #14
 80027a6:	2200      	movs	r2, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd ffe1 	bl	8000770 <xQueueReceive>
			sprintf(strbuffer, "%u",uBuffer);
 80027ae:	89fb      	ldrh	r3, [r7, #14]
 80027b0:	461a      	mov	r2, r3
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	492e      	ldr	r1, [pc, #184]	; (8002870 <vTaskUSART+0x130>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f9e3 	bl	8002b84 <siprintf>
			USART1SendStr("Temp2=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 80027be:	4830      	ldr	r0, [pc, #192]	; (8002880 <vTaskUSART+0x140>)
 80027c0:	f000 f8e4 	bl	800298c <USART1SendStr>
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f8df 	bl	800298c <USART1SendStr>
 80027ce:	482a      	ldr	r0, [pc, #168]	; (8002878 <vTaskUSART+0x138>)
 80027d0:	f000 f8dc 	bl	800298c <USART1SendStr>
		}
		if (uxQueueMessagesWaiting(TransmitDataADC3)!= 0){
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <vTaskUSART+0x144>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe f8a5 	bl	8000928 <uxQueueMessagesWaiting>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01a      	beq.n	800281a <vTaskUSART+0xda>
			xQueueReceive(TransmitDataADC3, &uBuffer, 0);
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <vTaskUSART+0x144>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f107 010e 	add.w	r1, r7, #14
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd ffbe 	bl	8000770 <xQueueReceive>

			sprintf(strbuffer, "%u",uBuffer);
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f107 0308 	add.w	r3, r7, #8
 80027fc:	491c      	ldr	r1, [pc, #112]	; (8002870 <vTaskUSART+0x130>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f9c0 	bl	8002b84 <siprintf>
			USART1SendStr("BatLevel=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8002804:	4820      	ldr	r0, [pc, #128]	; (8002888 <vTaskUSART+0x148>)
 8002806:	f000 f8c1 	bl	800298c <USART1SendStr>
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f8bc 	bl	800298c <USART1SendStr>
 8002814:	4818      	ldr	r0, [pc, #96]	; (8002878 <vTaskUSART+0x138>)
 8002816:	f000 f8b9 	bl	800298c <USART1SendStr>
		}
		if (uxQueueMessagesWaiting(TransmitDataADC4)!= 0){
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <vTaskUSART+0x14c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe f882 	bl	8000928 <uxQueueMessagesWaiting>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <vTaskUSART+0x120>
			xQueueReceive(TransmitDataADC4, &uBuffer, 0);
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <vTaskUSART+0x14c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f107 010e 	add.w	r1, r7, #14
 8002832:	2200      	movs	r2, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd ff9b 	bl	8000770 <xQueueReceive>
			sprintf(strbuffer, "%u",uBuffer);
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	461a      	mov	r2, r3
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	490b      	ldr	r1, [pc, #44]	; (8002870 <vTaskUSART+0x130>)
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f99d 	bl	8002b84 <siprintf>
			USART1SendStr("NoiseLevel=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 800284a:	4811      	ldr	r0, [pc, #68]	; (8002890 <vTaskUSART+0x150>)
 800284c:	f000 f89e 	bl	800298c <USART1SendStr>
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f899 	bl	800298c <USART1SendStr>
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <vTaskUSART+0x138>)
 800285c:	f000 f896 	bl	800298c <USART1SendStr>
		}
		vTaskDelay(1000);
 8002860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002864:	f7fe fab6 	bl	8000dd4 <vTaskDelay>
		if (uxQueueMessagesWaiting(TransmitDataTemp1)!= 0){
 8002868:	e76e      	b.n	8002748 <vTaskUSART+0x8>
 800286a:	bf00      	nop
 800286c:	20000dd8 	.word	0x20000dd8
 8002870:	080033ec 	.word	0x080033ec
 8002874:	080033f0 	.word	0x080033f0
 8002878:	080033d4 	.word	0x080033d4
 800287c:	20000ddc 	.word	0x20000ddc
 8002880:	080033f8 	.word	0x080033f8
 8002884:	20000de0 	.word	0x20000de0
 8002888:	08003400 	.word	0x08003400
 800288c:	20000de4 	.word	0x20000de4
 8002890:	0800340c 	.word	0x0800340c

08002894 <vTaskMainConvert>:

	}
}

void vTaskMainConvert (void *argument){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	while (1){
		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <vTaskMainConvert+0x48>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <vTaskMainConvert+0x48>)
 80028a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a6:	6093      	str	r3, [r2, #8]
		while (  (DMA1->ISR & DMA_ISR_TCIF1) == 0  );
 80028a8:	bf00      	nop
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <vTaskMainConvert+0x4c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f9      	beq.n	80028aa <vTaskMainConvert+0x16>
		xQueueSend(TransmitDataADC3,&valueADC[0],0);
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <vTaskMainConvert+0x50>)
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	2200      	movs	r2, #0
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <vTaskMainConvert+0x54>)
 80028c0:	f7fd fdc8 	bl	8000454 <xQueueGenericSend>
		xQueueSend(TransmitDataADC4,&valueADC[1],0);
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <vTaskMainConvert+0x58>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	2300      	movs	r3, #0
 80028ca:	2200      	movs	r2, #0
 80028cc:	4908      	ldr	r1, [pc, #32]	; (80028f0 <vTaskMainConvert+0x5c>)
 80028ce:	f7fd fdc1 	bl	8000454 <xQueueGenericSend>
		vTaskDelay(1000);
 80028d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d6:	f7fe fa7d 	bl	8000dd4 <vTaskDelay>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 80028da:	e7df      	b.n	800289c <vTaskMainConvert+0x8>
 80028dc:	40012400 	.word	0x40012400
 80028e0:	40020000 	.word	0x40020000
 80028e4:	20000de0 	.word	0x20000de0
 80028e8:	20000dec 	.word	0x20000dec
 80028ec:	20000de4 	.word	0x20000de4
 80028f0:	20000dee 	.word	0x20000dee

080028f4 <USART1_IRQHandler>:
	}
}


//=================================================================================
void USART1_IRQHandler (void ){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
	uint8_t commandBuffer;
	char data;
	char str[] = "";
 80028fa:	2300      	movs	r3, #0
 80028fc:	713b      	strb	r3, [r7, #4]
	uint8_t i=0;
 80028fe:	2300      	movs	r3, #0
 8002900:	71fb      	strb	r3, [r7, #7]
	if (USART1->SR & USART_SR_RXNE){
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <USART1_IRQHandler+0x64>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d020      	beq.n	8002950 <USART1_IRQHandler+0x5c>
		USART1->SR &= ~USART_SR_RXNE;
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <USART1_IRQHandler+0x64>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a11      	ldr	r2, [pc, #68]	; (8002958 <USART1_IRQHandler+0x64>)
 8002914:	f023 0320 	bic.w	r3, r3, #32
 8002918:	6013      	str	r3, [r2, #0]

		data=USART1->DR;
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <USART1_IRQHandler+0x64>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	71bb      	strb	r3, [r7, #6]

		if (data==0){
 8002920:	79bb      	ldrb	r3, [r7, #6]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <USART1_IRQHandler+0x4a>
			i=0;
 8002926:	2300      	movs	r3, #0
 8002928:	71fb      	strb	r3, [r7, #7]
			commandBuffer = 0xFF;
 800292a:	23ff      	movs	r3, #255	; 0xff
 800292c:	717b      	strb	r3, [r7, #5]
			xQueueSendToBackFromISR(ReceiveCommand,&commandBuffer,0);
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <USART1_IRQHandler+0x68>)
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	1d79      	adds	r1, r7, #5
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	f7fd fe86 	bl	8000648 <xQueueGenericSendFromISR>
		else {
			str[i++]=data;
		}
	}

}
 800293c:	e008      	b.n	8002950 <USART1_IRQHandler+0x5c>
			str[i++]=data;
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	71fa      	strb	r2, [r7, #7]
 8002944:	f107 0208 	add.w	r2, r7, #8
 8002948:	4413      	add	r3, r2
 800294a:	79ba      	ldrb	r2, [r7, #6]
 800294c:	f803 2c04 	strb.w	r2, [r3, #-4]
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40013800 	.word	0x40013800
 800295c:	20000de8 	.word	0x20000de8

08002960 <USART1SendChar>:
void USART1SendByte(uint8_t b){
	while (! (USART1->SR & USART_SR_TC));
	USART1->DR = b;

}
void USART1SendChar(char symb){
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	while (! (USART1->SR & USART_SR_TC));
 800296a:	bf00      	nop
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <USART1SendChar+0x28>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f9      	beq.n	800296c <USART1SendChar+0xc>
	USART1->DR = symb;
 8002978:	4a03      	ldr	r2, [pc, #12]	; (8002988 <USART1SendChar+0x28>)
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	6053      	str	r3, [r2, #4]

}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40013800 	.word	0x40013800

0800298c <USART1SendStr>:
void USART1SendStr(char* str){
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
	while (str[i]){
 8002998:	e009      	b.n	80029ae <USART1SendStr+0x22>
		USART1SendChar(str[i++]);
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	73fa      	strb	r2, [r7, #15]
 80029a0:	461a      	mov	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ffd9 	bl	8002960 <USART1SendChar>
	while (str[i]){
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ef      	bne.n	800299a <USART1SendStr+0xe>
	}

}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <HardFault_Handler+0x4>

080029d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <MemManage_Handler+0x4>

080029da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029de:	e7fe      	b.n	80029de <BusFault_Handler+0x4>

080029e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <UsageFault_Handler+0x4>

080029e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f6:	f7fd fbab 	bl	8000150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80029fa:	f7fe fde5 	bl	80015c8 <xTaskGetSchedulerState>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a04:	f7ff f848 	bl	8001a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <_sbrk+0x50>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <_sbrk+0x16>
		heap_end = &end;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <_sbrk+0x50>)
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <_sbrk+0x54>)
 8002a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <_sbrk+0x50>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <_sbrk+0x50>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	466a      	mov	r2, sp
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d907      	bls.n	8002a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a36:	f000 f86f 	bl	8002b18 <__errno>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a44:	e006      	b.n	8002a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <_sbrk+0x50>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <_sbrk+0x50>)
 8002a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000df0 	.word	0x20000df0
 8002a60:	20000e08 	.word	0x20000e08

08002a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <SystemInit+0x5c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <SystemInit+0x5c>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <SystemInit+0x5c>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4911      	ldr	r1, [pc, #68]	; (8002ac0 <SystemInit+0x5c>)
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <SystemInit+0x60>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <SystemInit+0x5c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <SystemInit+0x5c>)
 8002a86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <SystemInit+0x5c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <SystemInit+0x5c>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <SystemInit+0x5c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <SystemInit+0x5c>)
 8002aa2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002aa6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SystemInit+0x5c>)
 8002aaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002aae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SystemInit+0x64>)
 8002ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ab6:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	f8ff0000 	.word	0xf8ff0000
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002acc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ace:	e003      	b.n	8002ad8 <LoopCopyDataInit>

08002ad0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ad2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ad4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ad6:	3104      	adds	r1, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ad8:	480a      	ldr	r0, [pc, #40]	; (8002b04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002adc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ade:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ae0:	d3f6      	bcc.n	8002ad0 <CopyDataInit>
  ldr r2, =_sbss
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ae4:	e002      	b.n	8002aec <LoopFillZerobss>

08002ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ae8:	f842 3b04 	str.w	r3, [r2], #4

08002aec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002aee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002af0:	d3f9      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002af2:	f7ff ffb7 	bl	8002a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af6:	f000 f815 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002afa:	f7ff fb95 	bl	8002228 <main>
  bx lr
 8002afe:	4770      	bx	lr
  ldr r3, =_sidata
 8002b00:	08003454 	.word	0x08003454
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b08:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002b0c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002b10:	20000e04 	.word	0x20000e04

08002b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <ADC1_2_IRQHandler>
	...

08002b18 <__errno>:
 8002b18:	4b01      	ldr	r3, [pc, #4]	; (8002b20 <__errno+0x8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2000000c 	.word	0x2000000c

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	2500      	movs	r5, #0
 8002b28:	4e0c      	ldr	r6, [pc, #48]	; (8002b5c <__libc_init_array+0x38>)
 8002b2a:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2c:	1ba4      	subs	r4, r4, r6
 8002b2e:	10a4      	asrs	r4, r4, #2
 8002b30:	42a5      	cmp	r5, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	f000 fc2e 	bl	8003394 <_init>
 8002b38:	2500      	movs	r5, #0
 8002b3a:	4e0a      	ldr	r6, [pc, #40]	; (8002b64 <__libc_init_array+0x40>)
 8002b3c:	4c0a      	ldr	r4, [pc, #40]	; (8002b68 <__libc_init_array+0x44>)
 8002b3e:	1ba4      	subs	r4, r4, r6
 8002b40:	10a4      	asrs	r4, r4, #2
 8002b42:	42a5      	cmp	r5, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b4c:	4798      	blx	r3
 8002b4e:	3501      	adds	r5, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b56:	4798      	blx	r3
 8002b58:	3501      	adds	r5, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	0800344c 	.word	0x0800344c
 8002b60:	0800344c 	.word	0x0800344c
 8002b64:	0800344c 	.word	0x0800344c
 8002b68:	08003450 	.word	0x08003450

08002b6c <memcpy>:
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	1e43      	subs	r3, r0, #1
 8002b70:	440a      	add	r2, r1
 8002b72:	4291      	cmp	r1, r2
 8002b74:	d100      	bne.n	8002b78 <memcpy+0xc>
 8002b76:	bd10      	pop	{r4, pc}
 8002b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b80:	e7f7      	b.n	8002b72 <memcpy+0x6>
	...

08002b84 <siprintf>:
 8002b84:	b40e      	push	{r1, r2, r3}
 8002b86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b8a:	b500      	push	{lr}
 8002b8c:	b09c      	sub	sp, #112	; 0x70
 8002b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8002b90:	9002      	str	r0, [sp, #8]
 8002b92:	9006      	str	r0, [sp, #24]
 8002b94:	9107      	str	r1, [sp, #28]
 8002b96:	9104      	str	r1, [sp, #16]
 8002b98:	4808      	ldr	r0, [pc, #32]	; (8002bbc <siprintf+0x38>)
 8002b9a:	4909      	ldr	r1, [pc, #36]	; (8002bc0 <siprintf+0x3c>)
 8002b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba0:	9105      	str	r1, [sp, #20]
 8002ba2:	6800      	ldr	r0, [r0, #0]
 8002ba4:	a902      	add	r1, sp, #8
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	f000 f866 	bl	8002c78 <_svfiprintf_r>
 8002bac:	2200      	movs	r2, #0
 8002bae:	9b02      	ldr	r3, [sp, #8]
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	b01c      	add	sp, #112	; 0x70
 8002bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bb8:	b003      	add	sp, #12
 8002bba:	4770      	bx	lr
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	ffff0208 	.word	0xffff0208

08002bc4 <__ssputs_r>:
 8002bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	688e      	ldr	r6, [r1, #8]
 8002bca:	4682      	mov	sl, r0
 8002bcc:	429e      	cmp	r6, r3
 8002bce:	460c      	mov	r4, r1
 8002bd0:	4690      	mov	r8, r2
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	d837      	bhi.n	8002c46 <__ssputs_r+0x82>
 8002bd6:	898a      	ldrh	r2, [r1, #12]
 8002bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bdc:	d031      	beq.n	8002c42 <__ssputs_r+0x7e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	6825      	ldr	r5, [r4, #0]
 8002be2:	6909      	ldr	r1, [r1, #16]
 8002be4:	1a6f      	subs	r7, r5, r1
 8002be6:	6965      	ldr	r5, [r4, #20]
 8002be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bec:	fb95 f5f3 	sdiv	r5, r5, r3
 8002bf0:	f109 0301 	add.w	r3, r9, #1
 8002bf4:	443b      	add	r3, r7
 8002bf6:	429d      	cmp	r5, r3
 8002bf8:	bf38      	it	cc
 8002bfa:	461d      	movcc	r5, r3
 8002bfc:	0553      	lsls	r3, r2, #21
 8002bfe:	d530      	bpl.n	8002c62 <__ssputs_r+0x9e>
 8002c00:	4629      	mov	r1, r5
 8002c02:	f000 fb2d 	bl	8003260 <_malloc_r>
 8002c06:	4606      	mov	r6, r0
 8002c08:	b950      	cbnz	r0, 8002c20 <__ssputs_r+0x5c>
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c10:	f8ca 3000 	str.w	r3, [sl]
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1a:	81a3      	strh	r3, [r4, #12]
 8002c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c20:	463a      	mov	r2, r7
 8002c22:	6921      	ldr	r1, [r4, #16]
 8002c24:	f7ff ffa2 	bl	8002b6c <memcpy>
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	6126      	str	r6, [r4, #16]
 8002c36:	443e      	add	r6, r7
 8002c38:	6026      	str	r6, [r4, #0]
 8002c3a:	464e      	mov	r6, r9
 8002c3c:	6165      	str	r5, [r4, #20]
 8002c3e:	1bed      	subs	r5, r5, r7
 8002c40:	60a5      	str	r5, [r4, #8]
 8002c42:	454e      	cmp	r6, r9
 8002c44:	d900      	bls.n	8002c48 <__ssputs_r+0x84>
 8002c46:	464e      	mov	r6, r9
 8002c48:	4632      	mov	r2, r6
 8002c4a:	4641      	mov	r1, r8
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	f000 faa1 	bl	8003194 <memmove>
 8002c52:	68a3      	ldr	r3, [r4, #8]
 8002c54:	2000      	movs	r0, #0
 8002c56:	1b9b      	subs	r3, r3, r6
 8002c58:	60a3      	str	r3, [r4, #8]
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	441e      	add	r6, r3
 8002c5e:	6026      	str	r6, [r4, #0]
 8002c60:	e7dc      	b.n	8002c1c <__ssputs_r+0x58>
 8002c62:	462a      	mov	r2, r5
 8002c64:	f000 fb56 	bl	8003314 <_realloc_r>
 8002c68:	4606      	mov	r6, r0
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d1e2      	bne.n	8002c34 <__ssputs_r+0x70>
 8002c6e:	6921      	ldr	r1, [r4, #16]
 8002c70:	4650      	mov	r0, sl
 8002c72:	f000 faa9 	bl	80031c8 <_free_r>
 8002c76:	e7c8      	b.n	8002c0a <__ssputs_r+0x46>

08002c78 <_svfiprintf_r>:
 8002c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7c:	461d      	mov	r5, r3
 8002c7e:	898b      	ldrh	r3, [r1, #12]
 8002c80:	b09d      	sub	sp, #116	; 0x74
 8002c82:	061f      	lsls	r7, r3, #24
 8002c84:	4680      	mov	r8, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	4616      	mov	r6, r2
 8002c8a:	d50f      	bpl.n	8002cac <_svfiprintf_r+0x34>
 8002c8c:	690b      	ldr	r3, [r1, #16]
 8002c8e:	b96b      	cbnz	r3, 8002cac <_svfiprintf_r+0x34>
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	f000 fae5 	bl	8003260 <_malloc_r>
 8002c96:	6020      	str	r0, [r4, #0]
 8002c98:	6120      	str	r0, [r4, #16]
 8002c9a:	b928      	cbnz	r0, 8002ca8 <_svfiprintf_r+0x30>
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	f8c8 3000 	str.w	r3, [r8]
 8002ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca6:	e0c8      	b.n	8002e3a <_svfiprintf_r+0x1c2>
 8002ca8:	2340      	movs	r3, #64	; 0x40
 8002caa:	6163      	str	r3, [r4, #20]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cb6:	2330      	movs	r3, #48	; 0x30
 8002cb8:	f04f 0b01 	mov.w	fp, #1
 8002cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc0:	9503      	str	r5, [sp, #12]
 8002cc2:	4637      	mov	r7, r6
 8002cc4:	463d      	mov	r5, r7
 8002cc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002cca:	b10b      	cbz	r3, 8002cd0 <_svfiprintf_r+0x58>
 8002ccc:	2b25      	cmp	r3, #37	; 0x25
 8002cce:	d13e      	bne.n	8002d4e <_svfiprintf_r+0xd6>
 8002cd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002cd4:	d00b      	beq.n	8002cee <_svfiprintf_r+0x76>
 8002cd6:	4653      	mov	r3, sl
 8002cd8:	4632      	mov	r2, r6
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4640      	mov	r0, r8
 8002cde:	f7ff ff71 	bl	8002bc4 <__ssputs_r>
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	f000 80a4 	beq.w	8002e30 <_svfiprintf_r+0x1b8>
 8002ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cea:	4453      	add	r3, sl
 8002cec:	9309      	str	r3, [sp, #36]	; 0x24
 8002cee:	783b      	ldrb	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 809d 	beq.w	8002e30 <_svfiprintf_r+0x1b8>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d00:	9304      	str	r3, [sp, #16]
 8002d02:	9307      	str	r3, [sp, #28]
 8002d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d08:	931a      	str	r3, [sp, #104]	; 0x68
 8002d0a:	462f      	mov	r7, r5
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d12:	4850      	ldr	r0, [pc, #320]	; (8002e54 <_svfiprintf_r+0x1dc>)
 8002d14:	f000 fa30 	bl	8003178 <memchr>
 8002d18:	9b04      	ldr	r3, [sp, #16]
 8002d1a:	b9d0      	cbnz	r0, 8002d52 <_svfiprintf_r+0xda>
 8002d1c:	06d9      	lsls	r1, r3, #27
 8002d1e:	bf44      	itt	mi
 8002d20:	2220      	movmi	r2, #32
 8002d22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d26:	071a      	lsls	r2, r3, #28
 8002d28:	bf44      	itt	mi
 8002d2a:	222b      	movmi	r2, #43	; 0x2b
 8002d2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d30:	782a      	ldrb	r2, [r5, #0]
 8002d32:	2a2a      	cmp	r2, #42	; 0x2a
 8002d34:	d015      	beq.n	8002d62 <_svfiprintf_r+0xea>
 8002d36:	462f      	mov	r7, r5
 8002d38:	2000      	movs	r0, #0
 8002d3a:	250a      	movs	r5, #10
 8002d3c:	9a07      	ldr	r2, [sp, #28]
 8002d3e:	4639      	mov	r1, r7
 8002d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d44:	3b30      	subs	r3, #48	; 0x30
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d94d      	bls.n	8002de6 <_svfiprintf_r+0x16e>
 8002d4a:	b1b8      	cbz	r0, 8002d7c <_svfiprintf_r+0x104>
 8002d4c:	e00f      	b.n	8002d6e <_svfiprintf_r+0xf6>
 8002d4e:	462f      	mov	r7, r5
 8002d50:	e7b8      	b.n	8002cc4 <_svfiprintf_r+0x4c>
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <_svfiprintf_r+0x1dc>)
 8002d54:	463d      	mov	r5, r7
 8002d56:	1a80      	subs	r0, r0, r2
 8002d58:	fa0b f000 	lsl.w	r0, fp, r0
 8002d5c:	4318      	orrs	r0, r3
 8002d5e:	9004      	str	r0, [sp, #16]
 8002d60:	e7d3      	b.n	8002d0a <_svfiprintf_r+0x92>
 8002d62:	9a03      	ldr	r2, [sp, #12]
 8002d64:	1d11      	adds	r1, r2, #4
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	9103      	str	r1, [sp, #12]
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	db01      	blt.n	8002d72 <_svfiprintf_r+0xfa>
 8002d6e:	9207      	str	r2, [sp, #28]
 8002d70:	e004      	b.n	8002d7c <_svfiprintf_r+0x104>
 8002d72:	4252      	negs	r2, r2
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	9207      	str	r2, [sp, #28]
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	783b      	ldrb	r3, [r7, #0]
 8002d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d80:	d10c      	bne.n	8002d9c <_svfiprintf_r+0x124>
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	2b2a      	cmp	r3, #42	; 0x2a
 8002d86:	d133      	bne.n	8002df0 <_svfiprintf_r+0x178>
 8002d88:	9b03      	ldr	r3, [sp, #12]
 8002d8a:	3702      	adds	r7, #2
 8002d8c:	1d1a      	adds	r2, r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	9203      	str	r2, [sp, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bfb8      	it	lt
 8002d96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d9a:	9305      	str	r3, [sp, #20]
 8002d9c:	4d2e      	ldr	r5, [pc, #184]	; (8002e58 <_svfiprintf_r+0x1e0>)
 8002d9e:	2203      	movs	r2, #3
 8002da0:	7839      	ldrb	r1, [r7, #0]
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f9e8 	bl	8003178 <memchr>
 8002da8:	b138      	cbz	r0, 8002dba <_svfiprintf_r+0x142>
 8002daa:	2340      	movs	r3, #64	; 0x40
 8002dac:	1b40      	subs	r0, r0, r5
 8002dae:	fa03 f000 	lsl.w	r0, r3, r0
 8002db2:	9b04      	ldr	r3, [sp, #16]
 8002db4:	3701      	adds	r7, #1
 8002db6:	4303      	orrs	r3, r0
 8002db8:	9304      	str	r3, [sp, #16]
 8002dba:	7839      	ldrb	r1, [r7, #0]
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	4827      	ldr	r0, [pc, #156]	; (8002e5c <_svfiprintf_r+0x1e4>)
 8002dc0:	1c7e      	adds	r6, r7, #1
 8002dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dc6:	f000 f9d7 	bl	8003178 <memchr>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d038      	beq.n	8002e40 <_svfiprintf_r+0x1c8>
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <_svfiprintf_r+0x1e8>)
 8002dd0:	bb13      	cbnz	r3, 8002e18 <_svfiprintf_r+0x1a0>
 8002dd2:	9b03      	ldr	r3, [sp, #12]
 8002dd4:	3307      	adds	r3, #7
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	3308      	adds	r3, #8
 8002ddc:	9303      	str	r3, [sp, #12]
 8002dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002de0:	444b      	add	r3, r9
 8002de2:	9309      	str	r3, [sp, #36]	; 0x24
 8002de4:	e76d      	b.n	8002cc2 <_svfiprintf_r+0x4a>
 8002de6:	fb05 3202 	mla	r2, r5, r2, r3
 8002dea:	2001      	movs	r0, #1
 8002dec:	460f      	mov	r7, r1
 8002dee:	e7a6      	b.n	8002d3e <_svfiprintf_r+0xc6>
 8002df0:	2300      	movs	r3, #0
 8002df2:	250a      	movs	r5, #10
 8002df4:	4619      	mov	r1, r3
 8002df6:	3701      	adds	r7, #1
 8002df8:	9305      	str	r3, [sp, #20]
 8002dfa:	4638      	mov	r0, r7
 8002dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e00:	3a30      	subs	r2, #48	; 0x30
 8002e02:	2a09      	cmp	r2, #9
 8002e04:	d903      	bls.n	8002e0e <_svfiprintf_r+0x196>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0c8      	beq.n	8002d9c <_svfiprintf_r+0x124>
 8002e0a:	9105      	str	r1, [sp, #20]
 8002e0c:	e7c6      	b.n	8002d9c <_svfiprintf_r+0x124>
 8002e0e:	fb05 2101 	mla	r1, r5, r1, r2
 8002e12:	2301      	movs	r3, #1
 8002e14:	4607      	mov	r7, r0
 8002e16:	e7f0      	b.n	8002dfa <_svfiprintf_r+0x182>
 8002e18:	ab03      	add	r3, sp, #12
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_svfiprintf_r+0x1ec>)
 8002e20:	a904      	add	r1, sp, #16
 8002e22:	4640      	mov	r0, r8
 8002e24:	f3af 8000 	nop.w
 8002e28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002e2c:	4681      	mov	r9, r0
 8002e2e:	d1d6      	bne.n	8002dde <_svfiprintf_r+0x166>
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	065b      	lsls	r3, r3, #25
 8002e34:	f53f af35 	bmi.w	8002ca2 <_svfiprintf_r+0x2a>
 8002e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e3a:	b01d      	add	sp, #116	; 0x74
 8002e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e40:	ab03      	add	r3, sp, #12
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4622      	mov	r2, r4
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_svfiprintf_r+0x1ec>)
 8002e48:	a904      	add	r1, sp, #16
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	f000 f882 	bl	8002f54 <_printf_i>
 8002e50:	e7ea      	b.n	8002e28 <_svfiprintf_r+0x1b0>
 8002e52:	bf00      	nop
 8002e54:	08003418 	.word	0x08003418
 8002e58:	0800341e 	.word	0x0800341e
 8002e5c:	08003422 	.word	0x08003422
 8002e60:	00000000 	.word	0x00000000
 8002e64:	08002bc5 	.word	0x08002bc5

08002e68 <_printf_common>:
 8002e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	4691      	mov	r9, r2
 8002e6e:	461f      	mov	r7, r3
 8002e70:	688a      	ldr	r2, [r1, #8]
 8002e72:	690b      	ldr	r3, [r1, #16]
 8002e74:	4606      	mov	r6, r0
 8002e76:	4293      	cmp	r3, r2
 8002e78:	bfb8      	it	lt
 8002e7a:	4613      	movlt	r3, r2
 8002e7c:	f8c9 3000 	str.w	r3, [r9]
 8002e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e84:	460c      	mov	r4, r1
 8002e86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e8a:	b112      	cbz	r2, 8002e92 <_printf_common+0x2a>
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f8c9 3000 	str.w	r3, [r9]
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	0699      	lsls	r1, r3, #26
 8002e96:	bf42      	ittt	mi
 8002e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e9c:	3302      	addmi	r3, #2
 8002e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	f015 0506 	ands.w	r5, r5, #6
 8002ea8:	d107      	bne.n	8002eba <_printf_common+0x52>
 8002eaa:	f104 0a19 	add.w	sl, r4, #25
 8002eae:	68e3      	ldr	r3, [r4, #12]
 8002eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	42ab      	cmp	r3, r5
 8002eb8:	dc29      	bgt.n	8002f0e <_printf_common+0xa6>
 8002eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	3300      	adds	r3, #0
 8002ec2:	bf18      	it	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	0692      	lsls	r2, r2, #26
 8002ec8:	d42e      	bmi.n	8002f28 <_printf_common+0xc0>
 8002eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ece:	4639      	mov	r1, r7
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	47c0      	blx	r8
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d021      	beq.n	8002f1c <_printf_common+0xb4>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	68e5      	ldr	r5, [r4, #12]
 8002edc:	f003 0306 	and.w	r3, r3, #6
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	bf18      	it	ne
 8002ee4:	2500      	movne	r5, #0
 8002ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8002eea:	f04f 0900 	mov.w	r9, #0
 8002eee:	bf08      	it	eq
 8002ef0:	1aad      	subeq	r5, r5, r2
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	6922      	ldr	r2, [r4, #16]
 8002ef6:	bf08      	it	eq
 8002ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bfc4      	itt	gt
 8002f00:	1a9b      	subgt	r3, r3, r2
 8002f02:	18ed      	addgt	r5, r5, r3
 8002f04:	341a      	adds	r4, #26
 8002f06:	454d      	cmp	r5, r9
 8002f08:	d11a      	bne.n	8002f40 <_printf_common+0xd8>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e008      	b.n	8002f20 <_printf_common+0xb8>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	4652      	mov	r2, sl
 8002f12:	4639      	mov	r1, r7
 8002f14:	4630      	mov	r0, r6
 8002f16:	47c0      	blx	r8
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d103      	bne.n	8002f24 <_printf_common+0xbc>
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f24:	3501      	adds	r5, #1
 8002f26:	e7c2      	b.n	8002eae <_printf_common+0x46>
 8002f28:	2030      	movs	r0, #48	; 0x30
 8002f2a:	18e1      	adds	r1, r4, r3
 8002f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f36:	4422      	add	r2, r4
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f3e:	e7c4      	b.n	8002eca <_printf_common+0x62>
 8002f40:	2301      	movs	r3, #1
 8002f42:	4622      	mov	r2, r4
 8002f44:	4639      	mov	r1, r7
 8002f46:	4630      	mov	r0, r6
 8002f48:	47c0      	blx	r8
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d0e6      	beq.n	8002f1c <_printf_common+0xb4>
 8002f4e:	f109 0901 	add.w	r9, r9, #1
 8002f52:	e7d8      	b.n	8002f06 <_printf_common+0x9e>

08002f54 <_printf_i>:
 8002f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	7e09      	ldrb	r1, [r1, #24]
 8002f60:	b085      	sub	sp, #20
 8002f62:	296e      	cmp	r1, #110	; 0x6e
 8002f64:	4617      	mov	r7, r2
 8002f66:	4606      	mov	r6, r0
 8002f68:	4698      	mov	r8, r3
 8002f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f6c:	f000 80b3 	beq.w	80030d6 <_printf_i+0x182>
 8002f70:	d822      	bhi.n	8002fb8 <_printf_i+0x64>
 8002f72:	2963      	cmp	r1, #99	; 0x63
 8002f74:	d036      	beq.n	8002fe4 <_printf_i+0x90>
 8002f76:	d80a      	bhi.n	8002f8e <_printf_i+0x3a>
 8002f78:	2900      	cmp	r1, #0
 8002f7a:	f000 80b9 	beq.w	80030f0 <_printf_i+0x19c>
 8002f7e:	2958      	cmp	r1, #88	; 0x58
 8002f80:	f000 8083 	beq.w	800308a <_printf_i+0x136>
 8002f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f8c:	e032      	b.n	8002ff4 <_printf_i+0xa0>
 8002f8e:	2964      	cmp	r1, #100	; 0x64
 8002f90:	d001      	beq.n	8002f96 <_printf_i+0x42>
 8002f92:	2969      	cmp	r1, #105	; 0x69
 8002f94:	d1f6      	bne.n	8002f84 <_printf_i+0x30>
 8002f96:	6820      	ldr	r0, [r4, #0]
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	0605      	lsls	r5, r0, #24
 8002f9c:	f103 0104 	add.w	r1, r3, #4
 8002fa0:	d52a      	bpl.n	8002ff8 <_printf_i+0xa4>
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da03      	bge.n	8002fb2 <_printf_i+0x5e>
 8002faa:	222d      	movs	r2, #45	; 0x2d
 8002fac:	425b      	negs	r3, r3
 8002fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002fb2:	486f      	ldr	r0, [pc, #444]	; (8003170 <_printf_i+0x21c>)
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	e039      	b.n	800302c <_printf_i+0xd8>
 8002fb8:	2973      	cmp	r1, #115	; 0x73
 8002fba:	f000 809d 	beq.w	80030f8 <_printf_i+0x1a4>
 8002fbe:	d808      	bhi.n	8002fd2 <_printf_i+0x7e>
 8002fc0:	296f      	cmp	r1, #111	; 0x6f
 8002fc2:	d020      	beq.n	8003006 <_printf_i+0xb2>
 8002fc4:	2970      	cmp	r1, #112	; 0x70
 8002fc6:	d1dd      	bne.n	8002f84 <_printf_i+0x30>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	f043 0320 	orr.w	r3, r3, #32
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	e003      	b.n	8002fda <_printf_i+0x86>
 8002fd2:	2975      	cmp	r1, #117	; 0x75
 8002fd4:	d017      	beq.n	8003006 <_printf_i+0xb2>
 8002fd6:	2978      	cmp	r1, #120	; 0x78
 8002fd8:	d1d4      	bne.n	8002f84 <_printf_i+0x30>
 8002fda:	2378      	movs	r3, #120	; 0x78
 8002fdc:	4865      	ldr	r0, [pc, #404]	; (8003174 <_printf_i+0x220>)
 8002fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fe2:	e055      	b.n	8003090 <_printf_i+0x13c>
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fea:	1d19      	adds	r1, r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6011      	str	r1, [r2, #0]
 8002ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e08c      	b.n	8003112 <_printf_i+0x1be>
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ffe:	6011      	str	r1, [r2, #0]
 8003000:	bf18      	it	ne
 8003002:	b21b      	sxthne	r3, r3
 8003004:	e7cf      	b.n	8002fa6 <_printf_i+0x52>
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	6825      	ldr	r5, [r4, #0]
 800300a:	1d18      	adds	r0, r3, #4
 800300c:	6010      	str	r0, [r2, #0]
 800300e:	0628      	lsls	r0, r5, #24
 8003010:	d501      	bpl.n	8003016 <_printf_i+0xc2>
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e002      	b.n	800301c <_printf_i+0xc8>
 8003016:	0668      	lsls	r0, r5, #25
 8003018:	d5fb      	bpl.n	8003012 <_printf_i+0xbe>
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	296f      	cmp	r1, #111	; 0x6f
 800301e:	bf14      	ite	ne
 8003020:	220a      	movne	r2, #10
 8003022:	2208      	moveq	r2, #8
 8003024:	4852      	ldr	r0, [pc, #328]	; (8003170 <_printf_i+0x21c>)
 8003026:	2100      	movs	r1, #0
 8003028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800302c:	6865      	ldr	r5, [r4, #4]
 800302e:	2d00      	cmp	r5, #0
 8003030:	60a5      	str	r5, [r4, #8]
 8003032:	f2c0 8095 	blt.w	8003160 <_printf_i+0x20c>
 8003036:	6821      	ldr	r1, [r4, #0]
 8003038:	f021 0104 	bic.w	r1, r1, #4
 800303c:	6021      	str	r1, [r4, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13d      	bne.n	80030be <_printf_i+0x16a>
 8003042:	2d00      	cmp	r5, #0
 8003044:	f040 808e 	bne.w	8003164 <_printf_i+0x210>
 8003048:	4665      	mov	r5, ip
 800304a:	2a08      	cmp	r2, #8
 800304c:	d10b      	bne.n	8003066 <_printf_i+0x112>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	07db      	lsls	r3, r3, #31
 8003052:	d508      	bpl.n	8003066 <_printf_i+0x112>
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	bfde      	ittt	le
 800305c:	2330      	movle	r3, #48	; 0x30
 800305e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003062:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003066:	ebac 0305 	sub.w	r3, ip, r5
 800306a:	6123      	str	r3, [r4, #16]
 800306c:	f8cd 8000 	str.w	r8, [sp]
 8003070:	463b      	mov	r3, r7
 8003072:	aa03      	add	r2, sp, #12
 8003074:	4621      	mov	r1, r4
 8003076:	4630      	mov	r0, r6
 8003078:	f7ff fef6 	bl	8002e68 <_printf_common>
 800307c:	3001      	adds	r0, #1
 800307e:	d14d      	bne.n	800311c <_printf_i+0x1c8>
 8003080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003084:	b005      	add	sp, #20
 8003086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800308a:	4839      	ldr	r0, [pc, #228]	; (8003170 <_printf_i+0x21c>)
 800308c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	6821      	ldr	r1, [r4, #0]
 8003094:	1d1d      	adds	r5, r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6015      	str	r5, [r2, #0]
 800309a:	060a      	lsls	r2, r1, #24
 800309c:	d50b      	bpl.n	80030b6 <_printf_i+0x162>
 800309e:	07ca      	lsls	r2, r1, #31
 80030a0:	bf44      	itt	mi
 80030a2:	f041 0120 	orrmi.w	r1, r1, #32
 80030a6:	6021      	strmi	r1, [r4, #0]
 80030a8:	b91b      	cbnz	r3, 80030b2 <_printf_i+0x15e>
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	f022 0220 	bic.w	r2, r2, #32
 80030b0:	6022      	str	r2, [r4, #0]
 80030b2:	2210      	movs	r2, #16
 80030b4:	e7b7      	b.n	8003026 <_printf_i+0xd2>
 80030b6:	064d      	lsls	r5, r1, #25
 80030b8:	bf48      	it	mi
 80030ba:	b29b      	uxthmi	r3, r3
 80030bc:	e7ef      	b.n	800309e <_printf_i+0x14a>
 80030be:	4665      	mov	r5, ip
 80030c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80030c4:	fb02 3311 	mls	r3, r2, r1, r3
 80030c8:	5cc3      	ldrb	r3, [r0, r3]
 80030ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030ce:	460b      	mov	r3, r1
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d1f5      	bne.n	80030c0 <_printf_i+0x16c>
 80030d4:	e7b9      	b.n	800304a <_printf_i+0xf6>
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	6825      	ldr	r5, [r4, #0]
 80030da:	1d18      	adds	r0, r3, #4
 80030dc:	6961      	ldr	r1, [r4, #20]
 80030de:	6010      	str	r0, [r2, #0]
 80030e0:	0628      	lsls	r0, r5, #24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	d501      	bpl.n	80030ea <_printf_i+0x196>
 80030e6:	6019      	str	r1, [r3, #0]
 80030e8:	e002      	b.n	80030f0 <_printf_i+0x19c>
 80030ea:	066a      	lsls	r2, r5, #25
 80030ec:	d5fb      	bpl.n	80030e6 <_printf_i+0x192>
 80030ee:	8019      	strh	r1, [r3, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	4665      	mov	r5, ip
 80030f4:	6123      	str	r3, [r4, #16]
 80030f6:	e7b9      	b.n	800306c <_printf_i+0x118>
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	1d19      	adds	r1, r3, #4
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	681d      	ldr	r5, [r3, #0]
 8003100:	6862      	ldr	r2, [r4, #4]
 8003102:	2100      	movs	r1, #0
 8003104:	4628      	mov	r0, r5
 8003106:	f000 f837 	bl	8003178 <memchr>
 800310a:	b108      	cbz	r0, 8003110 <_printf_i+0x1bc>
 800310c:	1b40      	subs	r0, r0, r5
 800310e:	6060      	str	r0, [r4, #4]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	6123      	str	r3, [r4, #16]
 8003114:	2300      	movs	r3, #0
 8003116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800311a:	e7a7      	b.n	800306c <_printf_i+0x118>
 800311c:	6923      	ldr	r3, [r4, #16]
 800311e:	462a      	mov	r2, r5
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	47c0      	blx	r8
 8003126:	3001      	adds	r0, #1
 8003128:	d0aa      	beq.n	8003080 <_printf_i+0x12c>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	079b      	lsls	r3, r3, #30
 800312e:	d413      	bmi.n	8003158 <_printf_i+0x204>
 8003130:	68e0      	ldr	r0, [r4, #12]
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	4298      	cmp	r0, r3
 8003136:	bfb8      	it	lt
 8003138:	4618      	movlt	r0, r3
 800313a:	e7a3      	b.n	8003084 <_printf_i+0x130>
 800313c:	2301      	movs	r3, #1
 800313e:	464a      	mov	r2, r9
 8003140:	4639      	mov	r1, r7
 8003142:	4630      	mov	r0, r6
 8003144:	47c0      	blx	r8
 8003146:	3001      	adds	r0, #1
 8003148:	d09a      	beq.n	8003080 <_printf_i+0x12c>
 800314a:	3501      	adds	r5, #1
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	9a03      	ldr	r2, [sp, #12]
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	42ab      	cmp	r3, r5
 8003154:	dcf2      	bgt.n	800313c <_printf_i+0x1e8>
 8003156:	e7eb      	b.n	8003130 <_printf_i+0x1dc>
 8003158:	2500      	movs	r5, #0
 800315a:	f104 0919 	add.w	r9, r4, #25
 800315e:	e7f5      	b.n	800314c <_printf_i+0x1f8>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ac      	bne.n	80030be <_printf_i+0x16a>
 8003164:	7803      	ldrb	r3, [r0, #0]
 8003166:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800316e:	e76c      	b.n	800304a <_printf_i+0xf6>
 8003170:	08003429 	.word	0x08003429
 8003174:	0800343a 	.word	0x0800343a

08003178 <memchr>:
 8003178:	b510      	push	{r4, lr}
 800317a:	b2c9      	uxtb	r1, r1
 800317c:	4402      	add	r2, r0
 800317e:	4290      	cmp	r0, r2
 8003180:	4603      	mov	r3, r0
 8003182:	d101      	bne.n	8003188 <memchr+0x10>
 8003184:	2300      	movs	r3, #0
 8003186:	e003      	b.n	8003190 <memchr+0x18>
 8003188:	781c      	ldrb	r4, [r3, #0]
 800318a:	3001      	adds	r0, #1
 800318c:	428c      	cmp	r4, r1
 800318e:	d1f6      	bne.n	800317e <memchr+0x6>
 8003190:	4618      	mov	r0, r3
 8003192:	bd10      	pop	{r4, pc}

08003194 <memmove>:
 8003194:	4288      	cmp	r0, r1
 8003196:	b510      	push	{r4, lr}
 8003198:	eb01 0302 	add.w	r3, r1, r2
 800319c:	d807      	bhi.n	80031ae <memmove+0x1a>
 800319e:	1e42      	subs	r2, r0, #1
 80031a0:	4299      	cmp	r1, r3
 80031a2:	d00a      	beq.n	80031ba <memmove+0x26>
 80031a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80031ac:	e7f8      	b.n	80031a0 <memmove+0xc>
 80031ae:	4283      	cmp	r3, r0
 80031b0:	d9f5      	bls.n	800319e <memmove+0xa>
 80031b2:	1881      	adds	r1, r0, r2
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	42d3      	cmn	r3, r2
 80031b8:	d100      	bne.n	80031bc <memmove+0x28>
 80031ba:	bd10      	pop	{r4, pc}
 80031bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80031c4:	e7f7      	b.n	80031b6 <memmove+0x22>
	...

080031c8 <_free_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4605      	mov	r5, r0
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d043      	beq.n	8003258 <_free_r+0x90>
 80031d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d4:	1f0c      	subs	r4, r1, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bfb8      	it	lt
 80031da:	18e4      	addlt	r4, r4, r3
 80031dc:	f000 f8d0 	bl	8003380 <__malloc_lock>
 80031e0:	4a1e      	ldr	r2, [pc, #120]	; (800325c <_free_r+0x94>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	4610      	mov	r0, r2
 80031e6:	b933      	cbnz	r3, 80031f6 <_free_r+0x2e>
 80031e8:	6063      	str	r3, [r4, #4]
 80031ea:	6014      	str	r4, [r2, #0]
 80031ec:	4628      	mov	r0, r5
 80031ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f2:	f000 b8c6 	b.w	8003382 <__malloc_unlock>
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	d90b      	bls.n	8003212 <_free_r+0x4a>
 80031fa:	6821      	ldr	r1, [r4, #0]
 80031fc:	1862      	adds	r2, r4, r1
 80031fe:	4293      	cmp	r3, r2
 8003200:	bf01      	itttt	eq
 8003202:	681a      	ldreq	r2, [r3, #0]
 8003204:	685b      	ldreq	r3, [r3, #4]
 8003206:	1852      	addeq	r2, r2, r1
 8003208:	6022      	streq	r2, [r4, #0]
 800320a:	6063      	str	r3, [r4, #4]
 800320c:	6004      	str	r4, [r0, #0]
 800320e:	e7ed      	b.n	80031ec <_free_r+0x24>
 8003210:	4613      	mov	r3, r2
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	b10a      	cbz	r2, 800321a <_free_r+0x52>
 8003216:	42a2      	cmp	r2, r4
 8003218:	d9fa      	bls.n	8003210 <_free_r+0x48>
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	1858      	adds	r0, r3, r1
 800321e:	42a0      	cmp	r0, r4
 8003220:	d10b      	bne.n	800323a <_free_r+0x72>
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	4401      	add	r1, r0
 8003226:	1858      	adds	r0, r3, r1
 8003228:	4282      	cmp	r2, r0
 800322a:	6019      	str	r1, [r3, #0]
 800322c:	d1de      	bne.n	80031ec <_free_r+0x24>
 800322e:	6810      	ldr	r0, [r2, #0]
 8003230:	6852      	ldr	r2, [r2, #4]
 8003232:	4401      	add	r1, r0
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	e7d8      	b.n	80031ec <_free_r+0x24>
 800323a:	d902      	bls.n	8003242 <_free_r+0x7a>
 800323c:	230c      	movs	r3, #12
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	e7d4      	b.n	80031ec <_free_r+0x24>
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	1821      	adds	r1, r4, r0
 8003246:	428a      	cmp	r2, r1
 8003248:	bf01      	itttt	eq
 800324a:	6811      	ldreq	r1, [r2, #0]
 800324c:	6852      	ldreq	r2, [r2, #4]
 800324e:	1809      	addeq	r1, r1, r0
 8003250:	6021      	streq	r1, [r4, #0]
 8003252:	6062      	str	r2, [r4, #4]
 8003254:	605c      	str	r4, [r3, #4]
 8003256:	e7c9      	b.n	80031ec <_free_r+0x24>
 8003258:	bd38      	pop	{r3, r4, r5, pc}
 800325a:	bf00      	nop
 800325c:	20000df4 	.word	0x20000df4

08003260 <_malloc_r>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	1ccd      	adds	r5, r1, #3
 8003264:	f025 0503 	bic.w	r5, r5, #3
 8003268:	3508      	adds	r5, #8
 800326a:	2d0c      	cmp	r5, #12
 800326c:	bf38      	it	cc
 800326e:	250c      	movcc	r5, #12
 8003270:	2d00      	cmp	r5, #0
 8003272:	4606      	mov	r6, r0
 8003274:	db01      	blt.n	800327a <_malloc_r+0x1a>
 8003276:	42a9      	cmp	r1, r5
 8003278:	d903      	bls.n	8003282 <_malloc_r+0x22>
 800327a:	230c      	movs	r3, #12
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	2000      	movs	r0, #0
 8003280:	bd70      	pop	{r4, r5, r6, pc}
 8003282:	f000 f87d 	bl	8003380 <__malloc_lock>
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <_malloc_r+0xac>)
 8003288:	6814      	ldr	r4, [r2, #0]
 800328a:	4621      	mov	r1, r4
 800328c:	b991      	cbnz	r1, 80032b4 <_malloc_r+0x54>
 800328e:	4c20      	ldr	r4, [pc, #128]	; (8003310 <_malloc_r+0xb0>)
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	b91b      	cbnz	r3, 800329c <_malloc_r+0x3c>
 8003294:	4630      	mov	r0, r6
 8003296:	f000 f863 	bl	8003360 <_sbrk_r>
 800329a:	6020      	str	r0, [r4, #0]
 800329c:	4629      	mov	r1, r5
 800329e:	4630      	mov	r0, r6
 80032a0:	f000 f85e 	bl	8003360 <_sbrk_r>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d124      	bne.n	80032f2 <_malloc_r+0x92>
 80032a8:	230c      	movs	r3, #12
 80032aa:	4630      	mov	r0, r6
 80032ac:	6033      	str	r3, [r6, #0]
 80032ae:	f000 f868 	bl	8003382 <__malloc_unlock>
 80032b2:	e7e4      	b.n	800327e <_malloc_r+0x1e>
 80032b4:	680b      	ldr	r3, [r1, #0]
 80032b6:	1b5b      	subs	r3, r3, r5
 80032b8:	d418      	bmi.n	80032ec <_malloc_r+0x8c>
 80032ba:	2b0b      	cmp	r3, #11
 80032bc:	d90f      	bls.n	80032de <_malloc_r+0x7e>
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	18cc      	adds	r4, r1, r3
 80032c2:	50cd      	str	r5, [r1, r3]
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f85c 	bl	8003382 <__malloc_unlock>
 80032ca:	f104 000b 	add.w	r0, r4, #11
 80032ce:	1d23      	adds	r3, r4, #4
 80032d0:	f020 0007 	bic.w	r0, r0, #7
 80032d4:	1ac3      	subs	r3, r0, r3
 80032d6:	d0d3      	beq.n	8003280 <_malloc_r+0x20>
 80032d8:	425a      	negs	r2, r3
 80032da:	50e2      	str	r2, [r4, r3]
 80032dc:	e7d0      	b.n	8003280 <_malloc_r+0x20>
 80032de:	684b      	ldr	r3, [r1, #4]
 80032e0:	428c      	cmp	r4, r1
 80032e2:	bf16      	itet	ne
 80032e4:	6063      	strne	r3, [r4, #4]
 80032e6:	6013      	streq	r3, [r2, #0]
 80032e8:	460c      	movne	r4, r1
 80032ea:	e7eb      	b.n	80032c4 <_malloc_r+0x64>
 80032ec:	460c      	mov	r4, r1
 80032ee:	6849      	ldr	r1, [r1, #4]
 80032f0:	e7cc      	b.n	800328c <_malloc_r+0x2c>
 80032f2:	1cc4      	adds	r4, r0, #3
 80032f4:	f024 0403 	bic.w	r4, r4, #3
 80032f8:	42a0      	cmp	r0, r4
 80032fa:	d005      	beq.n	8003308 <_malloc_r+0xa8>
 80032fc:	1a21      	subs	r1, r4, r0
 80032fe:	4630      	mov	r0, r6
 8003300:	f000 f82e 	bl	8003360 <_sbrk_r>
 8003304:	3001      	adds	r0, #1
 8003306:	d0cf      	beq.n	80032a8 <_malloc_r+0x48>
 8003308:	6025      	str	r5, [r4, #0]
 800330a:	e7db      	b.n	80032c4 <_malloc_r+0x64>
 800330c:	20000df4 	.word	0x20000df4
 8003310:	20000df8 	.word	0x20000df8

08003314 <_realloc_r>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	4607      	mov	r7, r0
 8003318:	4614      	mov	r4, r2
 800331a:	460e      	mov	r6, r1
 800331c:	b921      	cbnz	r1, 8003328 <_realloc_r+0x14>
 800331e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003322:	4611      	mov	r1, r2
 8003324:	f7ff bf9c 	b.w	8003260 <_malloc_r>
 8003328:	b922      	cbnz	r2, 8003334 <_realloc_r+0x20>
 800332a:	f7ff ff4d 	bl	80031c8 <_free_r>
 800332e:	4625      	mov	r5, r4
 8003330:	4628      	mov	r0, r5
 8003332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003334:	f000 f826 	bl	8003384 <_malloc_usable_size_r>
 8003338:	42a0      	cmp	r0, r4
 800333a:	d20f      	bcs.n	800335c <_realloc_r+0x48>
 800333c:	4621      	mov	r1, r4
 800333e:	4638      	mov	r0, r7
 8003340:	f7ff ff8e 	bl	8003260 <_malloc_r>
 8003344:	4605      	mov	r5, r0
 8003346:	2800      	cmp	r0, #0
 8003348:	d0f2      	beq.n	8003330 <_realloc_r+0x1c>
 800334a:	4631      	mov	r1, r6
 800334c:	4622      	mov	r2, r4
 800334e:	f7ff fc0d 	bl	8002b6c <memcpy>
 8003352:	4631      	mov	r1, r6
 8003354:	4638      	mov	r0, r7
 8003356:	f7ff ff37 	bl	80031c8 <_free_r>
 800335a:	e7e9      	b.n	8003330 <_realloc_r+0x1c>
 800335c:	4635      	mov	r5, r6
 800335e:	e7e7      	b.n	8003330 <_realloc_r+0x1c>

08003360 <_sbrk_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	2300      	movs	r3, #0
 8003364:	4c05      	ldr	r4, [pc, #20]	; (800337c <_sbrk_r+0x1c>)
 8003366:	4605      	mov	r5, r0
 8003368:	4608      	mov	r0, r1
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	f7ff fb4e 	bl	8002a0c <_sbrk>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_sbrk_r+0x1a>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	b103      	cbz	r3, 800337a <_sbrk_r+0x1a>
 8003378:	602b      	str	r3, [r5, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	20000e00 	.word	0x20000e00

08003380 <__malloc_lock>:
 8003380:	4770      	bx	lr

08003382 <__malloc_unlock>:
 8003382:	4770      	bx	lr

08003384 <_malloc_usable_size_r>:
 8003384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003388:	1f18      	subs	r0, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfbc      	itt	lt
 800338e:	580b      	ldrlt	r3, [r1, r0]
 8003390:	18c0      	addlt	r0, r0, r3
 8003392:	4770      	bx	lr

08003394 <_init>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr

080033a0 <_fini>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr
