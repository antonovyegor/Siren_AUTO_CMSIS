
Siren_AUTO_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001864  08001864  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001864  08001864  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001864  08001864  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000006c  080018d8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080018d8  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d37  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001291  00000000  00000000  00026dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  00028060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000428  00000000  00000000  00028520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013216  00000000  00000000  00028948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004a35  00000000  00000000  0003bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d6cd  00000000  00000000  00040593  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000adc60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000147c  00000000  00000000  000adcdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080017dc 	.word	0x080017dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080017dc 	.word	0x080017dc

08000150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000154:	4b05      	ldr	r3, [pc, #20]	; (800016c <HAL_IncTick+0x1c>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	461a      	mov	r2, r3
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <HAL_IncTick+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4413      	add	r3, r2
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <HAL_IncTick+0x20>)
 8000162:	6013      	str	r3, [r2, #0]
}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000000 	.word	0x20000000
 8000170:	20000150 	.word	0x20000150

08000174 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	689a      	ldr	r2, [r3, #8]
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	683a      	ldr	r2, [r7, #0]
 800019e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	6892      	ldr	r2, [r2, #8]
 80001d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	6852      	ldr	r2, [r2, #4]
 80001da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d103      	bne.n	80001ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000216:	4b50      	ldr	r3, [pc, #320]	; (8000358 <xTaskIncrementTick+0x14c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 808c 	bne.w	8000338 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000220:	4b4e      	ldr	r3, [pc, #312]	; (800035c <xTaskIncrementTick+0x150>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000228:	4a4c      	ldr	r2, [pc, #304]	; (800035c <xTaskIncrementTick+0x150>)
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d11f      	bne.n	8000274 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000234:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <xTaskIncrementTick+0x154>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d009      	beq.n	8000252 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	f3bf 8f6f 	isb	sy
 800024a:	f3bf 8f4f 	dsb	sy
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	e7fe      	b.n	8000250 <xTaskIncrementTick+0x44>
 8000252:	4b43      	ldr	r3, [pc, #268]	; (8000360 <xTaskIncrementTick+0x154>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	4b42      	ldr	r3, [pc, #264]	; (8000364 <xTaskIncrementTick+0x158>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a40      	ldr	r2, [pc, #256]	; (8000360 <xTaskIncrementTick+0x154>)
 800025e:	6013      	str	r3, [r2, #0]
 8000260:	4a40      	ldr	r2, [pc, #256]	; (8000364 <xTaskIncrementTick+0x158>)
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	6013      	str	r3, [r2, #0]
 8000266:	4b40      	ldr	r3, [pc, #256]	; (8000368 <xTaskIncrementTick+0x15c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3301      	adds	r3, #1
 800026c:	4a3e      	ldr	r2, [pc, #248]	; (8000368 <xTaskIncrementTick+0x15c>)
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	f000 f8e2 	bl	8000438 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000274:	4b3d      	ldr	r3, [pc, #244]	; (800036c <xTaskIncrementTick+0x160>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	693a      	ldr	r2, [r7, #16]
 800027a:	429a      	cmp	r2, r3
 800027c:	d34d      	bcc.n	800031a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800027e:	4b38      	ldr	r3, [pc, #224]	; (8000360 <xTaskIncrementTick+0x154>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d101      	bne.n	800028c <xTaskIncrementTick+0x80>
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <xTaskIncrementTick+0x82>
 800028c:	2300      	movs	r3, #0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d004      	beq.n	800029c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000292:	4b36      	ldr	r3, [pc, #216]	; (800036c <xTaskIncrementTick+0x160>)
 8000294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000298:	601a      	str	r2, [r3, #0]
					break;
 800029a:	e03e      	b.n	800031a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800029c:	4b30      	ldr	r3, [pc, #192]	; (8000360 <xTaskIncrementTick+0x154>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80002ac:	693a      	ldr	r2, [r7, #16]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d203      	bcs.n	80002bc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80002b4:	4a2d      	ldr	r2, [pc, #180]	; (800036c <xTaskIncrementTick+0x160>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6013      	str	r3, [r2, #0]
						break;
 80002ba:	e02e      	b.n	800031a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	3304      	adds	r3, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff7a 	bl	80001ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d004      	beq.n	80002d8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	3318      	adds	r3, #24
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff71 	bl	80001ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002dc:	2201      	movs	r2, #1
 80002de:	409a      	lsls	r2, r3
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <xTaskIncrementTick+0x164>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	4a22      	ldr	r2, [pc, #136]	; (8000370 <xTaskIncrementTick+0x164>)
 80002e8:	6013      	str	r3, [r2, #0]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <xTaskIncrementTick+0x168>)
 80002f8:	441a      	add	r2, r3
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	3304      	adds	r3, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	4610      	mov	r0, r2
 8000302:	f7ff ff37 	bl	8000174 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <xTaskIncrementTick+0x16c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000310:	429a      	cmp	r2, r3
 8000312:	d3b4      	bcc.n	800027e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000318:	e7b1      	b.n	800027e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <xTaskIncrementTick+0x16c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000320:	4914      	ldr	r1, [pc, #80]	; (8000374 <xTaskIncrementTick+0x168>)
 8000322:	4613      	mov	r3, r2
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	440b      	add	r3, r1
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d907      	bls.n	8000342 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	e004      	b.n	8000342 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <xTaskIncrementTick+0x170>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <xTaskIncrementTick+0x170>)
 8000340:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <xTaskIncrementTick+0x174>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800034a:	2301      	movs	r3, #1
 800034c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800034e:	697b      	ldr	r3, [r7, #20]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000013c 	.word	0x2000013c
 800035c:	20000120 	.word	0x20000120
 8000360:	20000118 	.word	0x20000118
 8000364:	2000011c 	.word	0x2000011c
 8000368:	20000134 	.word	0x20000134
 800036c:	20000138 	.word	0x20000138
 8000370:	20000124 	.word	0x20000124
 8000374:	2000008c 	.word	0x2000008c
 8000378:	20000088 	.word	0x20000088
 800037c:	2000012c 	.word	0x2000012c
 8000380:	20000130 	.word	0x20000130

08000384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000384:	b480      	push	{r7}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800038a:	4b26      	ldr	r3, [pc, #152]	; (8000424 <vTaskSwitchContext+0xa0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d003      	beq.n	800039a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000392:	4b25      	ldr	r3, [pc, #148]	; (8000428 <vTaskSwitchContext+0xa4>)
 8000394:	2201      	movs	r2, #1
 8000396:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000398:	e03e      	b.n	8000418 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800039a:	4b23      	ldr	r3, [pc, #140]	; (8000428 <vTaskSwitchContext+0xa4>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <vTaskSwitchContext+0xa8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	fab3 f383 	clz	r3, r3
 80003ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80003ae:	7afb      	ldrb	r3, [r7, #11]
 80003b0:	f1c3 031f 	rsb	r3, r3, #31
 80003b4:	617b      	str	r3, [r7, #20]
 80003b6:	491e      	ldr	r1, [pc, #120]	; (8000430 <vTaskSwitchContext+0xac>)
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	440b      	add	r3, r1
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d109      	bne.n	80003de <vTaskSwitchContext+0x5a>
	__asm volatile
 80003ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ce:	f383 8811 	msr	BASEPRI, r3
 80003d2:	f3bf 8f6f 	isb	sy
 80003d6:	f3bf 8f4f 	dsb	sy
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	e7fe      	b.n	80003dc <vTaskSwitchContext+0x58>
 80003de:	697a      	ldr	r2, [r7, #20]
 80003e0:	4613      	mov	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4413      	add	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	4a11      	ldr	r2, [pc, #68]	; (8000430 <vTaskSwitchContext+0xac>)
 80003ea:	4413      	add	r3, r2
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	685a      	ldr	r2, [r3, #4]
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	3308      	adds	r3, #8
 8000400:	429a      	cmp	r2, r3
 8000402:	d104      	bne.n	800040e <vTaskSwitchContext+0x8a>
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	685a      	ldr	r2, [r3, #4]
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <vTaskSwitchContext+0xb0>)
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	371c      	adds	r7, #28
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	2000013c 	.word	0x2000013c
 8000428:	20000130 	.word	0x20000130
 800042c:	20000124 	.word	0x20000124
 8000430:	2000008c 	.word	0x2000008c
 8000434:	20000088 	.word	0x20000088

08000438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <prvResetNextTaskUnblockTime+0x40>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d101      	bne.n	800044c <prvResetNextTaskUnblockTime+0x14>
 8000448:	2301      	movs	r3, #1
 800044a:	e000      	b.n	800044e <prvResetNextTaskUnblockTime+0x16>
 800044c:	2300      	movs	r3, #0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d004      	beq.n	800045c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <prvResetNextTaskUnblockTime+0x44>)
 8000454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000458:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800045a:	e008      	b.n	800046e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <prvResetNextTaskUnblockTime+0x40>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4a04      	ldr	r2, [pc, #16]	; (800047c <prvResetNextTaskUnblockTime+0x44>)
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000118 	.word	0x20000118
 800047c:	20000138 	.word	0x20000138

08000480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <xTaskGetSchedulerState+0x34>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d102      	bne.n	8000494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800048e:	2301      	movs	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	e008      	b.n	80004a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <xTaskGetSchedulerState+0x38>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800049c:	2302      	movs	r3, #2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e001      	b.n	80004a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80004a6:	687b      	ldr	r3, [r7, #4]
	}
 80004a8:	4618      	mov	r0, r3
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000128 	.word	0x20000128
 80004b8:	2000013c 	.word	0x2000013c
 80004bc:	00000000 	.word	0x00000000

080004c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <pxCurrentTCBConst2>)
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	6808      	ldr	r0, [r1, #0]
 80004c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004ca:	f380 8809 	msr	PSP, r0
 80004ce:	f3bf 8f6f 	isb	sy
 80004d2:	f04f 0000 	mov.w	r0, #0
 80004d6:	f380 8811 	msr	BASEPRI, r0
 80004da:	f04e 0e0d 	orr.w	lr, lr, #13
 80004de:	4770      	bx	lr

080004e0 <pxCurrentTCBConst2>:
 80004e0:	20000088 	.word	0x20000088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
	...

080004f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80004f0:	f3ef 8009 	mrs	r0, PSP
 80004f4:	f3bf 8f6f 	isb	sy
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <pxCurrentTCBConst>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000500:	6010      	str	r0, [r2, #0]
 8000502:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000506:	f04f 0050 	mov.w	r0, #80	; 0x50
 800050a:	f380 8811 	msr	BASEPRI, r0
 800050e:	f7ff ff39 	bl	8000384 <vTaskSwitchContext>
 8000512:	f04f 0000 	mov.w	r0, #0
 8000516:	f380 8811 	msr	BASEPRI, r0
 800051a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	6808      	ldr	r0, [r1, #0]
 8000522:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000526:	f380 8809 	msr	PSP, r0
 800052a:	f3bf 8f6f 	isb	sy
 800052e:	4770      	bx	lr

08000530 <pxCurrentTCBConst>:
 8000530:	20000088 	.word	0x20000088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop

08000538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000542:	f383 8811 	msr	BASEPRI, r3
 8000546:	f3bf 8f6f 	isb	sy
 800054a:	f3bf 8f4f 	dsb	sy
 800054e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000550:	f7ff fe5c 	bl	800020c <xTaskIncrementTick>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d003      	beq.n	8000562 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <xPortSysTickHandler+0x3c>)
 800055c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	e000ed04 	.word	0xe000ed04

08000578 <DelayMicro>:
#include "ds18b20.h"
//--------------------------------------------------
void DelayMicro( uint32_t micros)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <DelayMicro+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <DelayMicro+0x38>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	0dda      	lsrs	r2, r3, #23
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000594:	bf00      	nop
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1fa      	bne.n	8000596 <DelayMicro+0x1e>
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	ee9bfab5 	.word	0xee9bfab5

080005b4 <port_init>:
//--------------------------------------------------
void port_init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  GPIOB->CRH |= GPIO_CRH_MODE11;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <port_init+0x30>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <port_init+0x30>)
 80005be:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80005c2:	6053      	str	r3, [r2, #4]
  GPIOB->CRH |= GPIO_CRH_CNF11_0;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <port_init+0x30>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <port_init+0x30>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~GPIO_CRH_CNF11_1;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <port_init+0x30>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <port_init+0x30>)
 80005d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005da:	6053      	str	r3, [r2, #4]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <ds18b20_Reset>:
//--------------------------------------------------
uint8_t ds18b20_Reset(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  uint16_t status;
  GPIOB->ODR &= ~GPIO_ODR_ODR11;//������ �������
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <ds18b20_Reset+0x54>)
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <ds18b20_Reset+0x54>)
 80005f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005f8:	60d3      	str	r3, [r2, #12]
  DelayMicro(485);//�������� ��� ������� �� 480 �����������
 80005fa:	f240 10e5 	movw	r0, #485	; 0x1e5
 80005fe:	f7ff ffbb 	bl	8000578 <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;//������� �������
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <ds18b20_Reset+0x54>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	4a0d      	ldr	r2, [pc, #52]	; (800063c <ds18b20_Reset+0x54>)
 8000608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800060c:	60d3      	str	r3, [r2, #12]
  DelayMicro(65);//�������� ��� ������� �� 60 �����������
 800060e:	2041      	movs	r0, #65	; 0x41
 8000610:	f7ff ffb2 	bl	8000578 <DelayMicro>
  status = GPIOB->IDR & GPIO_IDR_IDR11;//��������� �������
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <ds18b20_Reset+0x54>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	b29b      	uxth	r3, r3
 800061a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800061e:	80fb      	strh	r3, [r7, #6]
  DelayMicro(500);//�������� ��� ������� �� 480 �����������
 8000620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000624:	f7ff ffa8 	bl	8000578 <DelayMicro>
  //(�� ������ ������ ������� ��������, ��� ��� ����� ���� ���������� � ��������)
  return (status ? 1 : 0);//����� ���������
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf14      	ite	ne
 800062e:	2301      	movne	r3, #1
 8000630:	2300      	moveq	r3, #0
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40010c00 	.word	0x40010c00

08000640 <ds18b20_ReadBit>:
//----------------------------------------------------------
uint8_t ds18b20_ReadBit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;//������ �������
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <ds18b20_ReadBit+0x54>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <ds18b20_ReadBit+0x54>)
 8000650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000654:	60d3      	str	r3, [r2, #12]
  DelayMicro(2);
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff ff8e 	bl	8000578 <DelayMicro>
	GPIOB->ODR |= GPIO_ODR_ODR11;//������� �������
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <ds18b20_ReadBit+0x54>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <ds18b20_ReadBit+0x54>)
 8000662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000666:	60d3      	str	r3, [r2, #12]
	DelayMicro(13);
 8000668:	200d      	movs	r0, #13
 800066a:	f7ff ff85 	bl	8000578 <DelayMicro>
	bit = (GPIOB->IDR & GPIO_IDR_IDR11 ? 1 : 0);//��������� �������	
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <ds18b20_ReadBit+0x54>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2301      	movne	r3, #1
 800067c:	2300      	moveq	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	71fb      	strb	r3, [r7, #7]
	DelayMicro(45);
 8000682:	202d      	movs	r0, #45	; 0x2d
 8000684:	f7ff ff78 	bl	8000578 <DelayMicro>
  return bit;
 8000688:	79fb      	ldrb	r3, [r7, #7]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010c00 	.word	0x40010c00

08000698 <ds18b20_ReadByte>:
//-----------------------------------------------
uint8_t ds18b20_ReadByte(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	e00d      	b.n	80006c4 <ds18b20_ReadByte+0x2c>
  data += ds18b20_ReadBit() << i;
 80006a8:	f7ff ffca 	bl	8000640 <ds18b20_ReadBit>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4413      	add	r3, r2
 80006bc:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	3301      	adds	r3, #1
 80006c2:	71bb      	strb	r3, [r7, #6]
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	2b07      	cmp	r3, #7
 80006c8:	d9ee      	bls.n	80006a8 <ds18b20_ReadByte+0x10>
  return data;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <ds18b20_WriteBit>:
//-----------------------------------------------
void ds18b20_WriteBit(uint8_t bit)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <ds18b20_WriteBit+0x50>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ds18b20_WriteBit+0x50>)
 80006e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e8:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 3 : 65);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <ds18b20_WriteBit+0x20>
 80006f0:	2303      	movs	r3, #3
 80006f2:	e000      	b.n	80006f6 <ds18b20_WriteBit+0x22>
 80006f4:	2341      	movs	r3, #65	; 0x41
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff3e 	bl	8000578 <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <ds18b20_WriteBit+0x50>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <ds18b20_WriteBit+0x50>)
 8000702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000706:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 65 : 3);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <ds18b20_WriteBit+0x3e>
 800070e:	2341      	movs	r3, #65	; 0x41
 8000710:	e000      	b.n	8000714 <ds18b20_WriteBit+0x40>
 8000712:	2303      	movs	r3, #3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff2f 	bl	8000578 <DelayMicro>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40010c00 	.word	0x40010c00

08000728 <ds18b20_WriteByte>:
//-----------------------------------------------
void ds18b20_WriteByte(uint8_t dt)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	73fb      	strb	r3, [r7, #15]
 8000736:	e010      	b.n	800075a <ds18b20_WriteByte+0x32>
  {
    ds18b20_WriteBit(dt >> i & 1);
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	fa42 f303 	asr.w	r3, r2, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffc3 	bl	80006d4 <ds18b20_WriteBit>
    //Delay Protection
    DelayMicro(5);
 800074e:	2005      	movs	r0, #5
 8000750:	f7ff ff12 	bl	8000578 <DelayMicro>
  for (uint8_t i = 0; i < 8; i++)
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	3301      	adds	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	2b07      	cmp	r3, #7
 800075e:	d9eb      	bls.n	8000738 <ds18b20_WriteByte+0x10>
  }
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if(ds18b20_Reset()) return 1;
 8000772:	f7ff ff39 	bl	80005e8 <ds18b20_Reset>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <ds18b20_init+0x18>
 800077c:	2301      	movs	r3, #1
 800077e:	e012      	b.n	80007a6 <ds18b20_init+0x3e>
  if(mode==SKIP_ROM)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10e      	bne.n	80007a4 <ds18b20_init+0x3c>
  {
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
 8000786:	20cc      	movs	r0, #204	; 0xcc
 8000788:	f7ff ffce 	bl	8000728 <ds18b20_WriteByte>
		//WRITE SCRATCHPAD
		ds18b20_WriteByte(0x4E);
 800078c:	204e      	movs	r0, #78	; 0x4e
 800078e:	f7ff ffcb 	bl	8000728 <ds18b20_WriteByte>
		//TH REGISTER 100 ��������
		ds18b20_WriteByte(0x64);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f7ff ffc8 	bl	8000728 <ds18b20_WriteByte>
		//TL REGISTER - 30 ��������
		ds18b20_WriteByte(0x1E);
 8000798:	201e      	movs	r0, #30
 800079a:	f7ff ffc5 	bl	8000728 <ds18b20_WriteByte>
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
 800079e:	207f      	movs	r0, #127	; 0x7f
 80007a0:	f7ff ffc2 	bl	8000728 <ds18b20_WriteByte>
  }
  return 0;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	460a      	mov	r2, r1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71bb      	strb	r3, [r7, #6]
  ds18b20_Reset();
 80007be:	f7ff ff13 	bl	80005e8 <ds18b20_Reset>
  if(mode==SKIP_ROM)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <ds18b20_MeasureTemperCmd+0x20>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
 80007c8:	20cc      	movs	r0, #204	; 0xcc
 80007ca:	f7ff ffad 	bl	8000728 <ds18b20_WriteByte>
  }
  //CONVERT T
  ds18b20_WriteByte(0x44);
 80007ce:	2044      	movs	r0, #68	; 0x44
 80007d0:	f7ff ffaa 	bl	8000728 <ds18b20_WriteByte>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  ds18b20_Reset();
 80007ec:	f7ff fefc 	bl	80005e8 <ds18b20_Reset>
  if(mode==SKIP_ROM)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d102      	bne.n	80007fc <ds18b20_ReadStratcpad+0x20>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
 80007f6:	20cc      	movs	r0, #204	; 0xcc
 80007f8:	f7ff ff96 	bl	8000728 <ds18b20_WriteByte>
  }
  //READ SCRATCHPAD
  ds18b20_WriteByte(0xBE);
 80007fc:	20be      	movs	r0, #190	; 0xbe
 80007fe:	f7ff ff93 	bl	8000728 <ds18b20_WriteByte>
  for(i=0;i<8;i++)
 8000802:	2300      	movs	r3, #0
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	e009      	b.n	800081c <ds18b20_ReadStratcpad+0x40>
  {
    Data[i] = ds18b20_ReadByte();
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	18d4      	adds	r4, r2, r3
 800080e:	f7ff ff43 	bl	8000698 <ds18b20_ReadByte>
 8000812:	4603      	mov	r3, r0
 8000814:	7023      	strb	r3, [r4, #0]
  for(i=0;i<8;i++)
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3301      	adds	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b07      	cmp	r3, #7
 8000820:	d9f2      	bls.n	8000808 <ds18b20_ReadStratcpad+0x2c>
  }
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}
	...

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <__NVIC_EnableIRQ+0x34>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100

08000864 <main>:
static uint16_t valueADC[2];


//------------------------------------------------------------

int main (void){
 8000864:	b580      	push	{r7, lr}
 8000866:	b090      	sub	sp, #64	; 0x40
 8000868:	af00      	add	r7, sp, #0

	 // настройка HSE PLL SYSCLK
	RCC->CR |= RCC_CR_HSEON;
 800086a:	4b9a      	ldr	r3, [pc, #616]	; (8000ad4 <main+0x270>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a99      	ldr	r2, [pc, #612]	; (8000ad4 <main+0x270>)
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	6013      	str	r3, [r2, #0]
	while (!  (RCC->CR & RCC_CR_HSERDY)   );
 8000876:	bf00      	nop
 8000878:	4b96      	ldr	r3, [pc, #600]	; (8000ad4 <main+0x270>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f9      	beq.n	8000878 <main+0x14>

	FLASH ->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000884:	4b94      	ldr	r3, [pc, #592]	; (8000ad8 <main+0x274>)
 8000886:	2217      	movs	r2, #23
 8000888:	601a      	str	r2, [r3, #0]

	RCC->CFGR &= ~RCC_CFGR_HPRE;  // 0000   /1
 800088a:	4b92      	ldr	r3, [pc, #584]	; (8000ad4 <main+0x270>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a91      	ldr	r2, [pc, #580]	; (8000ad4 <main+0x270>)
 8000890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000894:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;//100 - /2
 8000896:	4b8f      	ldr	r3, [pc, #572]	; (8000ad4 <main+0x270>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	4a8e      	ldr	r2, [pc, #568]	; (8000ad4 <main+0x270>)
 800089c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a0:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE2; //000  - /1
 80008a2:	4b8c      	ldr	r3, [pc, #560]	; (8000ad4 <main+0x270>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a8b      	ldr	r2, [pc, #556]	; (8000ad4 <main+0x270>)
 80008a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008ac:	6053      	str	r3, [r2, #4]

	RCC->CFGR |=  RCC_CFGR_ADCPRE_DIV4;
 80008ae:	4b89      	ldr	r3, [pc, #548]	; (8000ad4 <main+0x270>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a88      	ldr	r2, [pc, #544]	; (8000ad4 <main+0x270>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6053      	str	r3, [r2, #4]


	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 80008ba:	4b86      	ldr	r3, [pc, #536]	; (8000ad4 <main+0x270>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a85      	ldr	r2, [pc, #532]	; (8000ad4 <main+0x270>)
 80008c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c4:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 80008c6:	4b83      	ldr	r3, [pc, #524]	; (8000ad4 <main+0x270>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4a82      	ldr	r2, [pc, #520]	; (8000ad4 <main+0x270>)
 80008cc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80008d0:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;
 80008d2:	4b80      	ldr	r3, [pc, #512]	; (8000ad4 <main+0x270>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	4a7f      	ldr	r2, [pc, #508]	; (8000ad4 <main+0x270>)
 80008d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008dc:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80008de:	4b7d      	ldr	r3, [pc, #500]	; (8000ad4 <main+0x270>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	4a7c      	ldr	r2, [pc, #496]	; (8000ad4 <main+0x270>)
 80008e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80008ea:	4b7a      	ldr	r3, [pc, #488]	; (8000ad4 <main+0x270>)
 80008ec:	4a79      	ldr	r2, [pc, #484]	; (8000ad4 <main+0x270>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL6;
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <main+0x270>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4a77      	ldr	r2, [pc, #476]	; (8000ad4 <main+0x270>)
 80008f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008fc:	6053      	str	r3, [r2, #4]



	RCC->CR |= RCC_CR_PLLON;
 80008fe:	4b75      	ldr	r3, [pc, #468]	; (8000ad4 <main+0x270>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a74      	ldr	r2, [pc, #464]	; (8000ad4 <main+0x270>)
 8000904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000908:	6013      	str	r3, [r2, #0]
	while (!  (RCC->CR & RCC_CR_PLLRDY)   );
 800090a:	bf00      	nop
 800090c:	4b71      	ldr	r3, [pc, #452]	; (8000ad4 <main+0x270>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <main+0xa8>

	RCC->CFGR &= ~RCC_CFGR_SW;
 8000918:	4b6e      	ldr	r3, [pc, #440]	; (8000ad4 <main+0x270>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a6d      	ldr	r2, [pc, #436]	; (8000ad4 <main+0x270>)
 800091e:	f023 0303 	bic.w	r3, r3, #3
 8000922:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=  RCC_CFGR_SW_PLL;
 8000924:	4b6b      	ldr	r3, [pc, #428]	; (8000ad4 <main+0x270>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	4a6a      	ldr	r2, [pc, #424]	; (8000ad4 <main+0x270>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= RCC_CFGR_MCOSEL_PLL_DIV2;
 8000930:	4b68      	ldr	r3, [pc, #416]	; (8000ad4 <main+0x270>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	4a67      	ldr	r2, [pc, #412]	; (8000ad4 <main+0x270>)
 8000936:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800093a:	6053      	str	r3, [r2, #4]


	while (  (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1   ) ;
 800093c:	bf00      	nop
 800093e:	4b65      	ldr	r3, [pc, #404]	; (8000ad4 <main+0x270>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 030c 	and.w	r3, r3, #12
 8000946:	2b08      	cmp	r3, #8
 8000948:	d1f9      	bne.n	800093e <main+0xda>

	// тактирование
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800094a:	4b62      	ldr	r3, [pc, #392]	; (8000ad4 <main+0x270>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a61      	ldr	r2, [pc, #388]	; (8000ad4 <main+0x270>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000956:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <main+0x270>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a5e      	ldr	r2, [pc, #376]	; (8000ad4 <main+0x270>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000962:	4b5c      	ldr	r3, [pc, #368]	; (8000ad4 <main+0x270>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a5b      	ldr	r2, [pc, #364]	; (8000ad4 <main+0x270>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800096e:	4b59      	ldr	r3, [pc, #356]	; (8000ad4 <main+0x270>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a58      	ldr	r2, [pc, #352]	; (8000ad4 <main+0x270>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800097a:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <main+0x270>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a55      	ldr	r2, [pc, #340]	; (8000ad4 <main+0x270>)
 8000980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000984:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <main+0x270>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a52      	ldr	r2, [pc, #328]	; (8000ad4 <main+0x270>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6193      	str	r3, [r2, #24]
	//RCC->APB1ENR |= RCC_APB1ENR_USART3EN;


	//GPIO
		// 1 Wire pins
	GPIOA->CRH |= GPIO_CRH_MODE13; // output
 8000992:	4b52      	ldr	r3, [pc, #328]	; (8000adc <main+0x278>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a51      	ldr	r2, [pc, #324]	; (8000adc <main+0x278>)
 8000998:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800099c:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF13_0; // open drain
 800099e:	4b4f      	ldr	r3, [pc, #316]	; (8000adc <main+0x278>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a4e      	ldr	r2, [pc, #312]	; (8000adc <main+0x278>)
 80009a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a8:	6053      	str	r3, [r2, #4]


		// ADC ports
	GPIOA->CRL &= ~GPIO_CRL_MODE0; // PA0   - input
 80009aa:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <main+0x278>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a4b      	ldr	r2, [pc, #300]	; (8000adc <main+0x278>)
 80009b0:	f023 0303 	bic.w	r3, r3, #3
 80009b4:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF0;  //PA0    - analog mode
 80009b6:	4b49      	ldr	r3, [pc, #292]	; (8000adc <main+0x278>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a48      	ldr	r2, [pc, #288]	; (8000adc <main+0x278>)
 80009bc:	f023 030c 	bic.w	r3, r3, #12
 80009c0:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE1; // PA1   - input
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <main+0x278>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a45      	ldr	r2, [pc, #276]	; (8000adc <main+0x278>)
 80009c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009cc:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF1;  //PA1    - analog mode
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <main+0x278>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a42      	ldr	r2, [pc, #264]	; (8000adc <main+0x278>)
 80009d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80009d8:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE2; // PA2  - input
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <main+0x278>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a3f      	ldr	r2, [pc, #252]	; (8000adc <main+0x278>)
 80009e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e4:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF2;  //PA2    - analog mode
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <main+0x278>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <main+0x278>)
 80009ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80009f0:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE3; // PA3   - input
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <main+0x278>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a39      	ldr	r2, [pc, #228]	; (8000adc <main+0x278>)
 80009f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009fc:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF3;  //PA3    - analog mode
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <main+0x278>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <main+0x278>)
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	6013      	str	r3, [r2, #0]



		// UART ports
	GPIOA->CRH |= GPIO_CRH_MODE9; // PA9    - output      TX
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <main+0x278>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4a33      	ldr	r2, [pc, #204]	; (8000adc <main+0x278>)
 8000a10:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a14:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1;  //PA9   - GP out PP   TX
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x278>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a30      	ldr	r2, [pc, #192]	; (8000adc <main+0x278>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~ GPIO_CRH_MODE10; // PA10  - input                     RX
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <main+0x278>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <main+0x278>)
 8000a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a2c:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;  //PA10  - Alternative input float   RX
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <main+0x278>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <main+0x278>)
 8000a34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a38:	6053      	str	r3, [r2, #4]



	//UART INIT

	USART1->BRR =  0x1A1; // 417   -- 115200 48MHz
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <main+0x27c>)
 8000a3c:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000a40:	609a      	str	r2, [r3, #8]

	USART1->CR1 |= USART_CR1_UE;
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <main+0x27c>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <main+0x27c>)
 8000a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a4c:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TE;
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <main+0x27c>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <main+0x27c>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RE;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <main+0x27c>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <main+0x27c>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RXNEIE;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <main+0x27c>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <main+0x27c>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 8000a72:	2025      	movs	r0, #37	; 0x25
 8000a74:	f7ff feda 	bl	800082c <__NVIC_EnableIRQ>


	//ADC


	ADC1->CR2 |= ADC_CR2_CONT;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <main+0x280>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <main+0x280>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	6093      	str	r3, [r2, #8]
	//ADC1->CR2 &= ~ADC_CR2_CONT;



	ADC1->CR2 |= ADC_CR2_EXTSEL;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0x280>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <main+0x280>)
 8000a8a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000a8e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTTRIG;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <main+0x280>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <main+0x280>)
 8000a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a9a:	6093      	str	r3, [r2, #8]

	ADC1->SQR1 &= ~ADC_SQR1_L;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <main+0x280>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <main+0x280>)
 8000aa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

	ADC1->SQR1 |= ADC_SQR1_L_0;  /// 2
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <main+0x280>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <main+0x280>)
 8000aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ab2:	62d3      	str	r3, [r2, #44]	; 0x2c



	ADC1->SMPR2 &= ~ADC_SMPR2_SMP0; //  0 канал  сэмплирование  циклов
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <main+0x280>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <main+0x280>)
 8000aba:	f023 0307 	bic.w	r3, r3, #7
 8000abe:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP1; //  1 канал  сэмплирование  циклов
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <main+0x280>)
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <main+0x280>)
 8000ac6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000aca:	6113      	str	r3, [r2, #16]



	ADC1->SMPR2 |= ADC_SMPR2_SMP0 ;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <main+0x280>)
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	e00a      	b.n	8000ae8 <main+0x284>
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	40012400 	.word	0x40012400
 8000ae8:	4a7c      	ldr	r2, [pc, #496]	; (8000cdc <main+0x478>)
 8000aea:	f043 0307 	orr.w	r3, r3, #7
 8000aee:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP1 ;
 8000af0:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <main+0x478>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	4a79      	ldr	r2, [pc, #484]	; (8000cdc <main+0x478>)
 8000af6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000afa:	6113      	str	r3, [r2, #16]




	ADC1->SQR3 &= ~ADC_SQR3_SQ1;  //PA0
 8000afc:	4b77      	ldr	r3, [pc, #476]	; (8000cdc <main+0x478>)
 8000afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b00:	4a76      	ldr	r2, [pc, #472]	; (8000cdc <main+0x478>)
 8000b02:	f023 031f 	bic.w	r3, r3, #31
 8000b06:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 8000b08:	4b74      	ldr	r3, [pc, #464]	; (8000cdc <main+0x478>)
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0c:	4a73      	ldr	r2, [pc, #460]	; (8000cdc <main+0x478>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	6353      	str	r3, [r2, #52]	; 0x34





	ADC1->CR1 |= ADC_CR1_SCAN;
 8000b14:	4b71      	ldr	r3, [pc, #452]	; (8000cdc <main+0x478>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a70      	ldr	r2, [pc, #448]	; (8000cdc <main+0x478>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6053      	str	r3, [r2, #4]

	ADC1->CR2 |= ADC_CR2_ADON;
 8000b20:	4b6e      	ldr	r3, [pc, #440]	; (8000cdc <main+0x478>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a6d      	ldr	r2, [pc, #436]	; (8000cdc <main+0x478>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= ADC_CR2_RSTCAL;
 8000b2c:	4b6b      	ldr	r3, [pc, #428]	; (8000cdc <main+0x478>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a6a      	ldr	r2, [pc, #424]	; (8000cdc <main+0x478>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_RSTCAL);
 8000b38:	bf00      	nop
 8000b3a:	4b68      	ldr	r3, [pc, #416]	; (8000cdc <main+0x478>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d0f9      	beq.n	8000b3a <main+0x2d6>
	ADC1->CR2 |= ADC_CR2_CAL;
 8000b46:	4b65      	ldr	r3, [pc, #404]	; (8000cdc <main+0x478>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	4a64      	ldr	r2, [pc, #400]	; (8000cdc <main+0x478>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_CAL); // пока там 1 идет калибровка по окончанию идет сброс бита
 8000b52:	bf00      	nop
 8000b54:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <main+0x478>)
 8000b56:	689b      	ldr	r3, [r3, #8]


	//--------------------------------------------------------------------------------
	//     DMA   ADC1

	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000b58:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <main+0x47c>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	4a60      	ldr	r2, [pc, #384]	; (8000ce0 <main+0x47c>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR;
 8000b64:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <main+0x480>)
 8000b66:	4a60      	ldr	r2, [pc, #384]	; (8000ce8 <main+0x484>)
 8000b68:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t) &valueADC[0];
 8000b6a:	4b5e      	ldr	r3, [pc, #376]	; (8000ce4 <main+0x480>)
 8000b6c:	4a5f      	ldr	r2, [pc, #380]	; (8000cec <main+0x488>)
 8000b6e:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 2;
 8000b70:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <main+0x480>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;
 8000b76:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <main+0x480>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a5a      	ldr	r2, [pc, #360]	; (8000ce4 <main+0x480>)
 8000b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b80:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
 8000b82:	4b58      	ldr	r3, [pc, #352]	; (8000ce4 <main+0x480>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <main+0x480>)
 8000b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8c:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8000b8e:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <main+0x480>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a54      	ldr	r2, [pc, #336]	; (8000ce4 <main+0x480>)
 8000b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b98:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <main+0x480>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a51      	ldr	r2, [pc, #324]	; (8000ce4 <main+0x480>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000ba6:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <main+0x480>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <main+0x480>)
 8000bac:	f043 0320 	orr.w	r3, r3, #32
 8000bb0:	6013      	str	r3, [r2, #0]
	//DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <main+0x480>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a4b      	ldr	r2, [pc, #300]	; (8000ce4 <main+0x480>)
 8000bb8:	f023 0310 	bic.w	r3, r3, #16
 8000bbc:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <main+0x480>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a48      	ldr	r2, [pc, #288]	; (8000ce4 <main+0x480>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <main+0x478>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <main+0x478>)
 8000bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd4:	6093      	str	r3, [r2, #8]



	GPIOC->CRH |= GPIO_CRH_MODE13; // PC13   - output
 8000bd6:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <main+0x48c>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a45      	ldr	r2, [pc, #276]	; (8000cf0 <main+0x48c>)
 8000bdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000be0:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF13;  //PC13   - GP out PP
 8000be2:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <main+0x48c>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <main+0x48c>)
 8000be8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000bec:	6053      	str	r3, [r2, #4]
	uint16_t raw_temper;
	//float temper;
	char c;
	char strbuffer[50];

	port_init();
 8000bee:	f7ff fce1 	bl	80005b4 <port_init>
	status = ds18b20_init(SKIP_ROM);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fdb8 	bl	8000768 <ds18b20_init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	sprintf(strbuffer,"Init Status: %d\r\n",status);
 8000bfe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000c02:	463b      	mov	r3, r7
 8000c04:	493b      	ldr	r1, [pc, #236]	; (8000cf4 <main+0x490>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f9e0 	bl	8000fcc <siprintf>
	USART1SendStr(strbuffer);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f8e0 	bl	8000dd4 <USART1SendStr>

	while (1){

		ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdc9 	bl	80007ae <ds18b20_MeasureTemperCmd>
		delay(1000);
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f000 f876 	bl	8000d10 <delay>
		ds18b20_ReadStratcpad(SKIP_ROM, dt, 0);
 8000c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdd5 	bl	80007dc <ds18b20_ReadStratcpad>
		raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 8000c32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	87bb      	strh	r3, [r7, #60]	; 0x3c
		sprintf(strbuffer, "%u",raw_temper);
 8000c46:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000c48:	463b      	mov	r3, r7
 8000c4a:	492b      	ldr	r1, [pc, #172]	; (8000cf8 <main+0x494>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f9bd 	bl	8000fcc <siprintf>
		USART1SendStr("Temp1=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8000c52:	482a      	ldr	r0, [pc, #168]	; (8000cfc <main+0x498>)
 8000c54:	f000 f8be 	bl	8000dd4 <USART1SendStr>
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f8ba 	bl	8000dd4 <USART1SendStr>
 8000c60:	4827      	ldr	r0, [pc, #156]	; (8000d00 <main+0x49c>)
 8000c62:	f000 f8b7 	bl	8000dd4 <USART1SendStr>
		delay(1000);
 8000c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6a:	f000 f851 	bl	8000d10 <delay>



		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <main+0x478>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <main+0x478>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6093      	str	r3, [r2, #8]
		while (  (DMA1->ISR & DMA_ISR_TCIF1) == 0  );
 8000c7a:	bf00      	nop
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <main+0x4a0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f9      	beq.n	8000c7c <main+0x418>
		sprintf(strbuffer, "%u",valueADC[0]);
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <main+0x488>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4919      	ldr	r1, [pc, #100]	; (8000cf8 <main+0x494>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f99a 	bl	8000fcc <siprintf>
		USART1SendStr("BatLevel=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8000c98:	481b      	ldr	r0, [pc, #108]	; (8000d08 <main+0x4a4>)
 8000c9a:	f000 f89b 	bl	8000dd4 <USART1SendStr>
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f897 	bl	8000dd4 <USART1SendStr>
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <main+0x49c>)
 8000ca8:	f000 f894 	bl	8000dd4 <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[1]);
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <main+0x488>)
 8000cae:	885b      	ldrh	r3, [r3, #2]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4910      	ldr	r1, [pc, #64]	; (8000cf8 <main+0x494>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f988 	bl	8000fcc <siprintf>
		USART1SendStr("NoiseLevel=");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <main+0x4a8>)
 8000cbe:	f000 f889 	bl	8000dd4 <USART1SendStr>
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f885 	bl	8000dd4 <USART1SendStr>
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <main+0x49c>)
 8000ccc:	f000 f882 	bl	8000dd4 <USART1SendStr>
		delay(1000);
 8000cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd4:	f000 f81c 	bl	8000d10 <delay>
		ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 8000cd8:	e79c      	b.n	8000c14 <main+0x3b0>
 8000cda:	bf00      	nop
 8000cdc:	40012400 	.word	0x40012400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020008 	.word	0x40020008
 8000ce8:	4001244c 	.word	0x4001244c
 8000cec:	20000140 	.word	0x20000140
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	080017f4 	.word	0x080017f4
 8000cf8:	08001808 	.word	0x08001808
 8000cfc:	0800180c 	.word	0x0800180c
 8000d00:	08001814 	.word	0x08001814
 8000d04:	40020000 	.word	0x40020000
 8000d08:	08001818 	.word	0x08001818
 8000d0c:	08001824 	.word	0x08001824

08000d10 <delay>:
	}


}

void delay(int milisec){
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	milisec*= (SystemCoreClock/1000);
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <delay+0x34>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <delay+0x38>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	607b      	str	r3, [r7, #4]
	while(milisec--) __asm__("nop");
 8000d2c:	e000      	b.n	8000d30 <delay+0x20>
 8000d2e:	bf00      	nop
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f9      	bne.n	8000d2e <delay+0x1e>
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	20000004 	.word	0x20000004
 8000d48:	10624dd3 	.word	0x10624dd3

08000d4c <USART1_IRQHandler>:

//=================================================================================
void USART1_IRQHandler (void ){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
	uint8_t commandBuffer;
	char data;
	char str[] = "";
 8000d52:	2300      	movs	r3, #0
 8000d54:	713b      	strb	r3, [r7, #4]
	uint8_t i=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71fb      	strb	r3, [r7, #7]
	if (USART1->SR & USART_SR_RXNE){
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <USART1_IRQHandler+0x58>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d019      	beq.n	8000d9a <USART1_IRQHandler+0x4e>
		USART1->SR &= ~USART_SR_RXNE;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <USART1_IRQHandler+0x58>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <USART1_IRQHandler+0x58>)
 8000d6c:	f023 0320 	bic.w	r3, r3, #32
 8000d70:	6013      	str	r3, [r2, #0]

		data=USART1->DR;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <USART1_IRQHandler+0x58>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	71bb      	strb	r3, [r7, #6]

		if (data==0){
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d104      	bne.n	8000d88 <USART1_IRQHandler+0x3c>
			i=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
			commandBuffer = 0xFF;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	717b      	strb	r3, [r7, #5]
		else {
			str[i++]=data;
		}
	}

}
 8000d86:	e008      	b.n	8000d9a <USART1_IRQHandler+0x4e>
			str[i++]=data;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	71fa      	strb	r2, [r7, #7]
 8000d8e:	f107 0208 	add.w	r2, r7, #8
 8000d92:	4413      	add	r3, r2
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	f803 2c04 	strb.w	r2, [r3, #-4]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40013800 	.word	0x40013800

08000da8 <USART1SendChar>:
void USART1SendByte(uint8_t b){
	while (! (USART1->SR & USART_SR_TC));
	USART1->DR = b;

}
void USART1SendChar(char symb){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	while (! (USART1->SR & USART_SR_TC));
 8000db2:	bf00      	nop
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <USART1SendChar+0x28>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f9      	beq.n	8000db4 <USART1SendChar+0xc>
	USART1->DR = symb;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <USART1SendChar+0x28>)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	6053      	str	r3, [r2, #4]

}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40013800 	.word	0x40013800

08000dd4 <USART1SendStr>:
void USART1SendStr(char* str){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
	while (str[i]){
 8000de0:	e009      	b.n	8000df6 <USART1SendStr+0x22>
		USART1SendChar(str[i++]);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	73fa      	strb	r2, [r7, #15]
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ffd9 	bl	8000da8 <USART1SendChar>
	while (str[i]){
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1ef      	bne.n	8000de2 <USART1SendStr+0xe>
	}

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f7ff f987 	bl	8000150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e42:	f7ff fb1d 	bl	8000480 <xTaskGetSchedulerState>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d001      	beq.n	8000e50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e4c:	f7ff fb74 	bl	8000538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x50>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x16>
		heap_end = &end;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_sbrk+0x50>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <_sbrk+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <_sbrk+0x50>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <_sbrk+0x50>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	466a      	mov	r2, sp
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d907      	bls.n	8000e8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e7e:	f000 f86f 	bl	8000f60 <__errno>
 8000e82:	4602      	mov	r2, r0
 8000e84:	230c      	movs	r3, #12
 8000e86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8c:	e006      	b.n	8000e9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_sbrk+0x50>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <_sbrk+0x50>)
 8000e98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000144 	.word	0x20000144
 8000ea8:	20000158 	.word	0x20000158

08000eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <SystemInit+0x5c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <SystemInit+0x5c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <SystemInit+0x5c>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4911      	ldr	r1, [pc, #68]	; (8000f08 <SystemInit+0x5c>)
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <SystemInit+0x60>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <SystemInit+0x5c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <SystemInit+0x5c>)
 8000ece:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <SystemInit+0x5c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SystemInit+0x5c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <SystemInit+0x5c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <SystemInit+0x5c>)
 8000eea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000eee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SystemInit+0x5c>)
 8000ef2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ef6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SystemInit+0x64>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efe:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	f8ff0000 	.word	0xf8ff0000
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f16:	e003      	b.n	8000f20 <LoopCopyDataInit>

08000f18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f1e:	3104      	adds	r1, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f28:	d3f6      	bcc.n	8000f18 <CopyDataInit>
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f2c:	e002      	b.n	8000f34 <LoopFillZerobss>

08000f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f30:	f842 3b04 	str.w	r3, [r2], #4

08000f34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f38:	d3f9      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3a:	f7ff ffb7 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f000 f815 	bl	8000f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f42:	f7ff fc8f 	bl	8000864 <main>
  bx lr
 8000f46:	4770      	bx	lr
  ldr r3, =_sidata
 8000f48:	0800186c 	.word	0x0800186c
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f50:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8000f54:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8000f58:	20000158 	.word	0x20000158

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <__errno>:
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <__errno+0x8>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__libc_init_array>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	2500      	movs	r5, #0
 8000f70:	4e0c      	ldr	r6, [pc, #48]	; (8000fa4 <__libc_init_array+0x38>)
 8000f72:	4c0d      	ldr	r4, [pc, #52]	; (8000fa8 <__libc_init_array+0x3c>)
 8000f74:	1ba4      	subs	r4, r4, r6
 8000f76:	10a4      	asrs	r4, r4, #2
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	d109      	bne.n	8000f90 <__libc_init_array+0x24>
 8000f7c:	f000 fc2e 	bl	80017dc <_init>
 8000f80:	2500      	movs	r5, #0
 8000f82:	4e0a      	ldr	r6, [pc, #40]	; (8000fac <__libc_init_array+0x40>)
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <__libc_init_array+0x44>)
 8000f86:	1ba4      	subs	r4, r4, r6
 8000f88:	10a4      	asrs	r4, r4, #2
 8000f8a:	42a5      	cmp	r5, r4
 8000f8c:	d105      	bne.n	8000f9a <__libc_init_array+0x2e>
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f94:	4798      	blx	r3
 8000f96:	3501      	adds	r5, #1
 8000f98:	e7ee      	b.n	8000f78 <__libc_init_array+0xc>
 8000f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f9e:	4798      	blx	r3
 8000fa0:	3501      	adds	r5, #1
 8000fa2:	e7f2      	b.n	8000f8a <__libc_init_array+0x1e>
 8000fa4:	08001864 	.word	0x08001864
 8000fa8:	08001864 	.word	0x08001864
 8000fac:	08001864 	.word	0x08001864
 8000fb0:	08001868 	.word	0x08001868

08000fb4 <memcpy>:
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	1e43      	subs	r3, r0, #1
 8000fb8:	440a      	add	r2, r1
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d100      	bne.n	8000fc0 <memcpy+0xc>
 8000fbe:	bd10      	pop	{r4, pc}
 8000fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000fc8:	e7f7      	b.n	8000fba <memcpy+0x6>
	...

08000fcc <siprintf>:
 8000fcc:	b40e      	push	{r1, r2, r3}
 8000fce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000fd2:	b500      	push	{lr}
 8000fd4:	b09c      	sub	sp, #112	; 0x70
 8000fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8000fd8:	9002      	str	r0, [sp, #8]
 8000fda:	9006      	str	r0, [sp, #24]
 8000fdc:	9107      	str	r1, [sp, #28]
 8000fde:	9104      	str	r1, [sp, #16]
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <siprintf+0x38>)
 8000fe2:	4909      	ldr	r1, [pc, #36]	; (8001008 <siprintf+0x3c>)
 8000fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000fe8:	9105      	str	r1, [sp, #20]
 8000fea:	6800      	ldr	r0, [r0, #0]
 8000fec:	a902      	add	r1, sp, #8
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f000 f866 	bl	80010c0 <_svfiprintf_r>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	9b02      	ldr	r3, [sp, #8]
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	b01c      	add	sp, #112	; 0x70
 8000ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001000:	b003      	add	sp, #12
 8001002:	4770      	bx	lr
 8001004:	20000008 	.word	0x20000008
 8001008:	ffff0208 	.word	0xffff0208

0800100c <__ssputs_r>:
 800100c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001010:	688e      	ldr	r6, [r1, #8]
 8001012:	4682      	mov	sl, r0
 8001014:	429e      	cmp	r6, r3
 8001016:	460c      	mov	r4, r1
 8001018:	4690      	mov	r8, r2
 800101a:	4699      	mov	r9, r3
 800101c:	d837      	bhi.n	800108e <__ssputs_r+0x82>
 800101e:	898a      	ldrh	r2, [r1, #12]
 8001020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001024:	d031      	beq.n	800108a <__ssputs_r+0x7e>
 8001026:	2302      	movs	r3, #2
 8001028:	6825      	ldr	r5, [r4, #0]
 800102a:	6909      	ldr	r1, [r1, #16]
 800102c:	1a6f      	subs	r7, r5, r1
 800102e:	6965      	ldr	r5, [r4, #20]
 8001030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001034:	fb95 f5f3 	sdiv	r5, r5, r3
 8001038:	f109 0301 	add.w	r3, r9, #1
 800103c:	443b      	add	r3, r7
 800103e:	429d      	cmp	r5, r3
 8001040:	bf38      	it	cc
 8001042:	461d      	movcc	r5, r3
 8001044:	0553      	lsls	r3, r2, #21
 8001046:	d530      	bpl.n	80010aa <__ssputs_r+0x9e>
 8001048:	4629      	mov	r1, r5
 800104a:	f000 fb2d 	bl	80016a8 <_malloc_r>
 800104e:	4606      	mov	r6, r0
 8001050:	b950      	cbnz	r0, 8001068 <__ssputs_r+0x5c>
 8001052:	230c      	movs	r3, #12
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f8ca 3000 	str.w	r3, [sl]
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001062:	81a3      	strh	r3, [r4, #12]
 8001064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001068:	463a      	mov	r2, r7
 800106a:	6921      	ldr	r1, [r4, #16]
 800106c:	f7ff ffa2 	bl	8000fb4 <memcpy>
 8001070:	89a3      	ldrh	r3, [r4, #12]
 8001072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107a:	81a3      	strh	r3, [r4, #12]
 800107c:	6126      	str	r6, [r4, #16]
 800107e:	443e      	add	r6, r7
 8001080:	6026      	str	r6, [r4, #0]
 8001082:	464e      	mov	r6, r9
 8001084:	6165      	str	r5, [r4, #20]
 8001086:	1bed      	subs	r5, r5, r7
 8001088:	60a5      	str	r5, [r4, #8]
 800108a:	454e      	cmp	r6, r9
 800108c:	d900      	bls.n	8001090 <__ssputs_r+0x84>
 800108e:	464e      	mov	r6, r9
 8001090:	4632      	mov	r2, r6
 8001092:	4641      	mov	r1, r8
 8001094:	6820      	ldr	r0, [r4, #0]
 8001096:	f000 faa1 	bl	80015dc <memmove>
 800109a:	68a3      	ldr	r3, [r4, #8]
 800109c:	2000      	movs	r0, #0
 800109e:	1b9b      	subs	r3, r3, r6
 80010a0:	60a3      	str	r3, [r4, #8]
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	441e      	add	r6, r3
 80010a6:	6026      	str	r6, [r4, #0]
 80010a8:	e7dc      	b.n	8001064 <__ssputs_r+0x58>
 80010aa:	462a      	mov	r2, r5
 80010ac:	f000 fb56 	bl	800175c <_realloc_r>
 80010b0:	4606      	mov	r6, r0
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d1e2      	bne.n	800107c <__ssputs_r+0x70>
 80010b6:	6921      	ldr	r1, [r4, #16]
 80010b8:	4650      	mov	r0, sl
 80010ba:	f000 faa9 	bl	8001610 <_free_r>
 80010be:	e7c8      	b.n	8001052 <__ssputs_r+0x46>

080010c0 <_svfiprintf_r>:
 80010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c4:	461d      	mov	r5, r3
 80010c6:	898b      	ldrh	r3, [r1, #12]
 80010c8:	b09d      	sub	sp, #116	; 0x74
 80010ca:	061f      	lsls	r7, r3, #24
 80010cc:	4680      	mov	r8, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4616      	mov	r6, r2
 80010d2:	d50f      	bpl.n	80010f4 <_svfiprintf_r+0x34>
 80010d4:	690b      	ldr	r3, [r1, #16]
 80010d6:	b96b      	cbnz	r3, 80010f4 <_svfiprintf_r+0x34>
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	f000 fae5 	bl	80016a8 <_malloc_r>
 80010de:	6020      	str	r0, [r4, #0]
 80010e0:	6120      	str	r0, [r4, #16]
 80010e2:	b928      	cbnz	r0, 80010f0 <_svfiprintf_r+0x30>
 80010e4:	230c      	movs	r3, #12
 80010e6:	f8c8 3000 	str.w	r3, [r8]
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ee:	e0c8      	b.n	8001282 <_svfiprintf_r+0x1c2>
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	6163      	str	r3, [r4, #20]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9309      	str	r3, [sp, #36]	; 0x24
 80010f8:	2320      	movs	r3, #32
 80010fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010fe:	2330      	movs	r3, #48	; 0x30
 8001100:	f04f 0b01 	mov.w	fp, #1
 8001104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001108:	9503      	str	r5, [sp, #12]
 800110a:	4637      	mov	r7, r6
 800110c:	463d      	mov	r5, r7
 800110e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001112:	b10b      	cbz	r3, 8001118 <_svfiprintf_r+0x58>
 8001114:	2b25      	cmp	r3, #37	; 0x25
 8001116:	d13e      	bne.n	8001196 <_svfiprintf_r+0xd6>
 8001118:	ebb7 0a06 	subs.w	sl, r7, r6
 800111c:	d00b      	beq.n	8001136 <_svfiprintf_r+0x76>
 800111e:	4653      	mov	r3, sl
 8001120:	4632      	mov	r2, r6
 8001122:	4621      	mov	r1, r4
 8001124:	4640      	mov	r0, r8
 8001126:	f7ff ff71 	bl	800100c <__ssputs_r>
 800112a:	3001      	adds	r0, #1
 800112c:	f000 80a4 	beq.w	8001278 <_svfiprintf_r+0x1b8>
 8001130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001132:	4453      	add	r3, sl
 8001134:	9309      	str	r3, [sp, #36]	; 0x24
 8001136:	783b      	ldrb	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 809d 	beq.w	8001278 <_svfiprintf_r+0x1b8>
 800113e:	2300      	movs	r3, #0
 8001140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001148:	9304      	str	r3, [sp, #16]
 800114a:	9307      	str	r3, [sp, #28]
 800114c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001150:	931a      	str	r3, [sp, #104]	; 0x68
 8001152:	462f      	mov	r7, r5
 8001154:	2205      	movs	r2, #5
 8001156:	f817 1b01 	ldrb.w	r1, [r7], #1
 800115a:	4850      	ldr	r0, [pc, #320]	; (800129c <_svfiprintf_r+0x1dc>)
 800115c:	f000 fa30 	bl	80015c0 <memchr>
 8001160:	9b04      	ldr	r3, [sp, #16]
 8001162:	b9d0      	cbnz	r0, 800119a <_svfiprintf_r+0xda>
 8001164:	06d9      	lsls	r1, r3, #27
 8001166:	bf44      	itt	mi
 8001168:	2220      	movmi	r2, #32
 800116a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800116e:	071a      	lsls	r2, r3, #28
 8001170:	bf44      	itt	mi
 8001172:	222b      	movmi	r2, #43	; 0x2b
 8001174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001178:	782a      	ldrb	r2, [r5, #0]
 800117a:	2a2a      	cmp	r2, #42	; 0x2a
 800117c:	d015      	beq.n	80011aa <_svfiprintf_r+0xea>
 800117e:	462f      	mov	r7, r5
 8001180:	2000      	movs	r0, #0
 8001182:	250a      	movs	r5, #10
 8001184:	9a07      	ldr	r2, [sp, #28]
 8001186:	4639      	mov	r1, r7
 8001188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800118c:	3b30      	subs	r3, #48	; 0x30
 800118e:	2b09      	cmp	r3, #9
 8001190:	d94d      	bls.n	800122e <_svfiprintf_r+0x16e>
 8001192:	b1b8      	cbz	r0, 80011c4 <_svfiprintf_r+0x104>
 8001194:	e00f      	b.n	80011b6 <_svfiprintf_r+0xf6>
 8001196:	462f      	mov	r7, r5
 8001198:	e7b8      	b.n	800110c <_svfiprintf_r+0x4c>
 800119a:	4a40      	ldr	r2, [pc, #256]	; (800129c <_svfiprintf_r+0x1dc>)
 800119c:	463d      	mov	r5, r7
 800119e:	1a80      	subs	r0, r0, r2
 80011a0:	fa0b f000 	lsl.w	r0, fp, r0
 80011a4:	4318      	orrs	r0, r3
 80011a6:	9004      	str	r0, [sp, #16]
 80011a8:	e7d3      	b.n	8001152 <_svfiprintf_r+0x92>
 80011aa:	9a03      	ldr	r2, [sp, #12]
 80011ac:	1d11      	adds	r1, r2, #4
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	9103      	str	r1, [sp, #12]
 80011b2:	2a00      	cmp	r2, #0
 80011b4:	db01      	blt.n	80011ba <_svfiprintf_r+0xfa>
 80011b6:	9207      	str	r2, [sp, #28]
 80011b8:	e004      	b.n	80011c4 <_svfiprintf_r+0x104>
 80011ba:	4252      	negs	r2, r2
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	9207      	str	r2, [sp, #28]
 80011c2:	9304      	str	r3, [sp, #16]
 80011c4:	783b      	ldrb	r3, [r7, #0]
 80011c6:	2b2e      	cmp	r3, #46	; 0x2e
 80011c8:	d10c      	bne.n	80011e4 <_svfiprintf_r+0x124>
 80011ca:	787b      	ldrb	r3, [r7, #1]
 80011cc:	2b2a      	cmp	r3, #42	; 0x2a
 80011ce:	d133      	bne.n	8001238 <_svfiprintf_r+0x178>
 80011d0:	9b03      	ldr	r3, [sp, #12]
 80011d2:	3702      	adds	r7, #2
 80011d4:	1d1a      	adds	r2, r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	9203      	str	r2, [sp, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bfb8      	it	lt
 80011de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80011e2:	9305      	str	r3, [sp, #20]
 80011e4:	4d2e      	ldr	r5, [pc, #184]	; (80012a0 <_svfiprintf_r+0x1e0>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	7839      	ldrb	r1, [r7, #0]
 80011ea:	4628      	mov	r0, r5
 80011ec:	f000 f9e8 	bl	80015c0 <memchr>
 80011f0:	b138      	cbz	r0, 8001202 <_svfiprintf_r+0x142>
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	1b40      	subs	r0, r0, r5
 80011f6:	fa03 f000 	lsl.w	r0, r3, r0
 80011fa:	9b04      	ldr	r3, [sp, #16]
 80011fc:	3701      	adds	r7, #1
 80011fe:	4303      	orrs	r3, r0
 8001200:	9304      	str	r3, [sp, #16]
 8001202:	7839      	ldrb	r1, [r7, #0]
 8001204:	2206      	movs	r2, #6
 8001206:	4827      	ldr	r0, [pc, #156]	; (80012a4 <_svfiprintf_r+0x1e4>)
 8001208:	1c7e      	adds	r6, r7, #1
 800120a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800120e:	f000 f9d7 	bl	80015c0 <memchr>
 8001212:	2800      	cmp	r0, #0
 8001214:	d038      	beq.n	8001288 <_svfiprintf_r+0x1c8>
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <_svfiprintf_r+0x1e8>)
 8001218:	bb13      	cbnz	r3, 8001260 <_svfiprintf_r+0x1a0>
 800121a:	9b03      	ldr	r3, [sp, #12]
 800121c:	3307      	adds	r3, #7
 800121e:	f023 0307 	bic.w	r3, r3, #7
 8001222:	3308      	adds	r3, #8
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001228:	444b      	add	r3, r9
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	e76d      	b.n	800110a <_svfiprintf_r+0x4a>
 800122e:	fb05 3202 	mla	r2, r5, r2, r3
 8001232:	2001      	movs	r0, #1
 8001234:	460f      	mov	r7, r1
 8001236:	e7a6      	b.n	8001186 <_svfiprintf_r+0xc6>
 8001238:	2300      	movs	r3, #0
 800123a:	250a      	movs	r5, #10
 800123c:	4619      	mov	r1, r3
 800123e:	3701      	adds	r7, #1
 8001240:	9305      	str	r3, [sp, #20]
 8001242:	4638      	mov	r0, r7
 8001244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001248:	3a30      	subs	r2, #48	; 0x30
 800124a:	2a09      	cmp	r2, #9
 800124c:	d903      	bls.n	8001256 <_svfiprintf_r+0x196>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0c8      	beq.n	80011e4 <_svfiprintf_r+0x124>
 8001252:	9105      	str	r1, [sp, #20]
 8001254:	e7c6      	b.n	80011e4 <_svfiprintf_r+0x124>
 8001256:	fb05 2101 	mla	r1, r5, r1, r2
 800125a:	2301      	movs	r3, #1
 800125c:	4607      	mov	r7, r0
 800125e:	e7f0      	b.n	8001242 <_svfiprintf_r+0x182>
 8001260:	ab03      	add	r3, sp, #12
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4622      	mov	r2, r4
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_svfiprintf_r+0x1ec>)
 8001268:	a904      	add	r1, sp, #16
 800126a:	4640      	mov	r0, r8
 800126c:	f3af 8000 	nop.w
 8001270:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001274:	4681      	mov	r9, r0
 8001276:	d1d6      	bne.n	8001226 <_svfiprintf_r+0x166>
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	065b      	lsls	r3, r3, #25
 800127c:	f53f af35 	bmi.w	80010ea <_svfiprintf_r+0x2a>
 8001280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001282:	b01d      	add	sp, #116	; 0x74
 8001284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001288:	ab03      	add	r3, sp, #12
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4622      	mov	r2, r4
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_svfiprintf_r+0x1ec>)
 8001290:	a904      	add	r1, sp, #16
 8001292:	4640      	mov	r0, r8
 8001294:	f000 f882 	bl	800139c <_printf_i>
 8001298:	e7ea      	b.n	8001270 <_svfiprintf_r+0x1b0>
 800129a:	bf00      	nop
 800129c:	08001830 	.word	0x08001830
 80012a0:	08001836 	.word	0x08001836
 80012a4:	0800183a 	.word	0x0800183a
 80012a8:	00000000 	.word	0x00000000
 80012ac:	0800100d 	.word	0x0800100d

080012b0 <_printf_common>:
 80012b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012b4:	4691      	mov	r9, r2
 80012b6:	461f      	mov	r7, r3
 80012b8:	688a      	ldr	r2, [r1, #8]
 80012ba:	690b      	ldr	r3, [r1, #16]
 80012bc:	4606      	mov	r6, r0
 80012be:	4293      	cmp	r3, r2
 80012c0:	bfb8      	it	lt
 80012c2:	4613      	movlt	r3, r2
 80012c4:	f8c9 3000 	str.w	r3, [r9]
 80012c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012cc:	460c      	mov	r4, r1
 80012ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012d2:	b112      	cbz	r2, 80012da <_printf_common+0x2a>
 80012d4:	3301      	adds	r3, #1
 80012d6:	f8c9 3000 	str.w	r3, [r9]
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	0699      	lsls	r1, r3, #26
 80012de:	bf42      	ittt	mi
 80012e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80012e4:	3302      	addmi	r3, #2
 80012e6:	f8c9 3000 	strmi.w	r3, [r9]
 80012ea:	6825      	ldr	r5, [r4, #0]
 80012ec:	f015 0506 	ands.w	r5, r5, #6
 80012f0:	d107      	bne.n	8001302 <_printf_common+0x52>
 80012f2:	f104 0a19 	add.w	sl, r4, #25
 80012f6:	68e3      	ldr	r3, [r4, #12]
 80012f8:	f8d9 2000 	ldr.w	r2, [r9]
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	42ab      	cmp	r3, r5
 8001300:	dc29      	bgt.n	8001356 <_printf_common+0xa6>
 8001302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	3300      	adds	r3, #0
 800130a:	bf18      	it	ne
 800130c:	2301      	movne	r3, #1
 800130e:	0692      	lsls	r2, r2, #26
 8001310:	d42e      	bmi.n	8001370 <_printf_common+0xc0>
 8001312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001316:	4639      	mov	r1, r7
 8001318:	4630      	mov	r0, r6
 800131a:	47c0      	blx	r8
 800131c:	3001      	adds	r0, #1
 800131e:	d021      	beq.n	8001364 <_printf_common+0xb4>
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	68e5      	ldr	r5, [r4, #12]
 8001324:	f003 0306 	and.w	r3, r3, #6
 8001328:	2b04      	cmp	r3, #4
 800132a:	bf18      	it	ne
 800132c:	2500      	movne	r5, #0
 800132e:	f8d9 2000 	ldr.w	r2, [r9]
 8001332:	f04f 0900 	mov.w	r9, #0
 8001336:	bf08      	it	eq
 8001338:	1aad      	subeq	r5, r5, r2
 800133a:	68a3      	ldr	r3, [r4, #8]
 800133c:	6922      	ldr	r2, [r4, #16]
 800133e:	bf08      	it	eq
 8001340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001344:	4293      	cmp	r3, r2
 8001346:	bfc4      	itt	gt
 8001348:	1a9b      	subgt	r3, r3, r2
 800134a:	18ed      	addgt	r5, r5, r3
 800134c:	341a      	adds	r4, #26
 800134e:	454d      	cmp	r5, r9
 8001350:	d11a      	bne.n	8001388 <_printf_common+0xd8>
 8001352:	2000      	movs	r0, #0
 8001354:	e008      	b.n	8001368 <_printf_common+0xb8>
 8001356:	2301      	movs	r3, #1
 8001358:	4652      	mov	r2, sl
 800135a:	4639      	mov	r1, r7
 800135c:	4630      	mov	r0, r6
 800135e:	47c0      	blx	r8
 8001360:	3001      	adds	r0, #1
 8001362:	d103      	bne.n	800136c <_printf_common+0xbc>
 8001364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800136c:	3501      	adds	r5, #1
 800136e:	e7c2      	b.n	80012f6 <_printf_common+0x46>
 8001370:	2030      	movs	r0, #48	; 0x30
 8001372:	18e1      	adds	r1, r4, r3
 8001374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800137e:	4422      	add	r2, r4
 8001380:	3302      	adds	r3, #2
 8001382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001386:	e7c4      	b.n	8001312 <_printf_common+0x62>
 8001388:	2301      	movs	r3, #1
 800138a:	4622      	mov	r2, r4
 800138c:	4639      	mov	r1, r7
 800138e:	4630      	mov	r0, r6
 8001390:	47c0      	blx	r8
 8001392:	3001      	adds	r0, #1
 8001394:	d0e6      	beq.n	8001364 <_printf_common+0xb4>
 8001396:	f109 0901 	add.w	r9, r9, #1
 800139a:	e7d8      	b.n	800134e <_printf_common+0x9e>

0800139c <_printf_i>:
 800139c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80013a4:	460c      	mov	r4, r1
 80013a6:	7e09      	ldrb	r1, [r1, #24]
 80013a8:	b085      	sub	sp, #20
 80013aa:	296e      	cmp	r1, #110	; 0x6e
 80013ac:	4617      	mov	r7, r2
 80013ae:	4606      	mov	r6, r0
 80013b0:	4698      	mov	r8, r3
 80013b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80013b4:	f000 80b3 	beq.w	800151e <_printf_i+0x182>
 80013b8:	d822      	bhi.n	8001400 <_printf_i+0x64>
 80013ba:	2963      	cmp	r1, #99	; 0x63
 80013bc:	d036      	beq.n	800142c <_printf_i+0x90>
 80013be:	d80a      	bhi.n	80013d6 <_printf_i+0x3a>
 80013c0:	2900      	cmp	r1, #0
 80013c2:	f000 80b9 	beq.w	8001538 <_printf_i+0x19c>
 80013c6:	2958      	cmp	r1, #88	; 0x58
 80013c8:	f000 8083 	beq.w	80014d2 <_printf_i+0x136>
 80013cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80013d4:	e032      	b.n	800143c <_printf_i+0xa0>
 80013d6:	2964      	cmp	r1, #100	; 0x64
 80013d8:	d001      	beq.n	80013de <_printf_i+0x42>
 80013da:	2969      	cmp	r1, #105	; 0x69
 80013dc:	d1f6      	bne.n	80013cc <_printf_i+0x30>
 80013de:	6820      	ldr	r0, [r4, #0]
 80013e0:	6813      	ldr	r3, [r2, #0]
 80013e2:	0605      	lsls	r5, r0, #24
 80013e4:	f103 0104 	add.w	r1, r3, #4
 80013e8:	d52a      	bpl.n	8001440 <_printf_i+0xa4>
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6011      	str	r1, [r2, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da03      	bge.n	80013fa <_printf_i+0x5e>
 80013f2:	222d      	movs	r2, #45	; 0x2d
 80013f4:	425b      	negs	r3, r3
 80013f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80013fa:	486f      	ldr	r0, [pc, #444]	; (80015b8 <_printf_i+0x21c>)
 80013fc:	220a      	movs	r2, #10
 80013fe:	e039      	b.n	8001474 <_printf_i+0xd8>
 8001400:	2973      	cmp	r1, #115	; 0x73
 8001402:	f000 809d 	beq.w	8001540 <_printf_i+0x1a4>
 8001406:	d808      	bhi.n	800141a <_printf_i+0x7e>
 8001408:	296f      	cmp	r1, #111	; 0x6f
 800140a:	d020      	beq.n	800144e <_printf_i+0xb2>
 800140c:	2970      	cmp	r1, #112	; 0x70
 800140e:	d1dd      	bne.n	80013cc <_printf_i+0x30>
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	6023      	str	r3, [r4, #0]
 8001418:	e003      	b.n	8001422 <_printf_i+0x86>
 800141a:	2975      	cmp	r1, #117	; 0x75
 800141c:	d017      	beq.n	800144e <_printf_i+0xb2>
 800141e:	2978      	cmp	r1, #120	; 0x78
 8001420:	d1d4      	bne.n	80013cc <_printf_i+0x30>
 8001422:	2378      	movs	r3, #120	; 0x78
 8001424:	4865      	ldr	r0, [pc, #404]	; (80015bc <_printf_i+0x220>)
 8001426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800142a:	e055      	b.n	80014d8 <_printf_i+0x13c>
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001432:	1d19      	adds	r1, r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6011      	str	r1, [r2, #0]
 8001438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800143c:	2301      	movs	r3, #1
 800143e:	e08c      	b.n	800155a <_printf_i+0x1be>
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001446:	6011      	str	r1, [r2, #0]
 8001448:	bf18      	it	ne
 800144a:	b21b      	sxthne	r3, r3
 800144c:	e7cf      	b.n	80013ee <_printf_i+0x52>
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	6825      	ldr	r5, [r4, #0]
 8001452:	1d18      	adds	r0, r3, #4
 8001454:	6010      	str	r0, [r2, #0]
 8001456:	0628      	lsls	r0, r5, #24
 8001458:	d501      	bpl.n	800145e <_printf_i+0xc2>
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	e002      	b.n	8001464 <_printf_i+0xc8>
 800145e:	0668      	lsls	r0, r5, #25
 8001460:	d5fb      	bpl.n	800145a <_printf_i+0xbe>
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	296f      	cmp	r1, #111	; 0x6f
 8001466:	bf14      	ite	ne
 8001468:	220a      	movne	r2, #10
 800146a:	2208      	moveq	r2, #8
 800146c:	4852      	ldr	r0, [pc, #328]	; (80015b8 <_printf_i+0x21c>)
 800146e:	2100      	movs	r1, #0
 8001470:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001474:	6865      	ldr	r5, [r4, #4]
 8001476:	2d00      	cmp	r5, #0
 8001478:	60a5      	str	r5, [r4, #8]
 800147a:	f2c0 8095 	blt.w	80015a8 <_printf_i+0x20c>
 800147e:	6821      	ldr	r1, [r4, #0]
 8001480:	f021 0104 	bic.w	r1, r1, #4
 8001484:	6021      	str	r1, [r4, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d13d      	bne.n	8001506 <_printf_i+0x16a>
 800148a:	2d00      	cmp	r5, #0
 800148c:	f040 808e 	bne.w	80015ac <_printf_i+0x210>
 8001490:	4665      	mov	r5, ip
 8001492:	2a08      	cmp	r2, #8
 8001494:	d10b      	bne.n	80014ae <_printf_i+0x112>
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	07db      	lsls	r3, r3, #31
 800149a:	d508      	bpl.n	80014ae <_printf_i+0x112>
 800149c:	6923      	ldr	r3, [r4, #16]
 800149e:	6862      	ldr	r2, [r4, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	bfde      	ittt	le
 80014a4:	2330      	movle	r3, #48	; 0x30
 80014a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80014ae:	ebac 0305 	sub.w	r3, ip, r5
 80014b2:	6123      	str	r3, [r4, #16]
 80014b4:	f8cd 8000 	str.w	r8, [sp]
 80014b8:	463b      	mov	r3, r7
 80014ba:	aa03      	add	r2, sp, #12
 80014bc:	4621      	mov	r1, r4
 80014be:	4630      	mov	r0, r6
 80014c0:	f7ff fef6 	bl	80012b0 <_printf_common>
 80014c4:	3001      	adds	r0, #1
 80014c6:	d14d      	bne.n	8001564 <_printf_i+0x1c8>
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014cc:	b005      	add	sp, #20
 80014ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014d2:	4839      	ldr	r0, [pc, #228]	; (80015b8 <_printf_i+0x21c>)
 80014d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80014d8:	6813      	ldr	r3, [r2, #0]
 80014da:	6821      	ldr	r1, [r4, #0]
 80014dc:	1d1d      	adds	r5, r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6015      	str	r5, [r2, #0]
 80014e2:	060a      	lsls	r2, r1, #24
 80014e4:	d50b      	bpl.n	80014fe <_printf_i+0x162>
 80014e6:	07ca      	lsls	r2, r1, #31
 80014e8:	bf44      	itt	mi
 80014ea:	f041 0120 	orrmi.w	r1, r1, #32
 80014ee:	6021      	strmi	r1, [r4, #0]
 80014f0:	b91b      	cbnz	r3, 80014fa <_printf_i+0x15e>
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	f022 0220 	bic.w	r2, r2, #32
 80014f8:	6022      	str	r2, [r4, #0]
 80014fa:	2210      	movs	r2, #16
 80014fc:	e7b7      	b.n	800146e <_printf_i+0xd2>
 80014fe:	064d      	lsls	r5, r1, #25
 8001500:	bf48      	it	mi
 8001502:	b29b      	uxthmi	r3, r3
 8001504:	e7ef      	b.n	80014e6 <_printf_i+0x14a>
 8001506:	4665      	mov	r5, ip
 8001508:	fbb3 f1f2 	udiv	r1, r3, r2
 800150c:	fb02 3311 	mls	r3, r2, r1, r3
 8001510:	5cc3      	ldrb	r3, [r0, r3]
 8001512:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001516:	460b      	mov	r3, r1
 8001518:	2900      	cmp	r1, #0
 800151a:	d1f5      	bne.n	8001508 <_printf_i+0x16c>
 800151c:	e7b9      	b.n	8001492 <_printf_i+0xf6>
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	6825      	ldr	r5, [r4, #0]
 8001522:	1d18      	adds	r0, r3, #4
 8001524:	6961      	ldr	r1, [r4, #20]
 8001526:	6010      	str	r0, [r2, #0]
 8001528:	0628      	lsls	r0, r5, #24
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	d501      	bpl.n	8001532 <_printf_i+0x196>
 800152e:	6019      	str	r1, [r3, #0]
 8001530:	e002      	b.n	8001538 <_printf_i+0x19c>
 8001532:	066a      	lsls	r2, r5, #25
 8001534:	d5fb      	bpl.n	800152e <_printf_i+0x192>
 8001536:	8019      	strh	r1, [r3, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	4665      	mov	r5, ip
 800153c:	6123      	str	r3, [r4, #16]
 800153e:	e7b9      	b.n	80014b4 <_printf_i+0x118>
 8001540:	6813      	ldr	r3, [r2, #0]
 8001542:	1d19      	adds	r1, r3, #4
 8001544:	6011      	str	r1, [r2, #0]
 8001546:	681d      	ldr	r5, [r3, #0]
 8001548:	6862      	ldr	r2, [r4, #4]
 800154a:	2100      	movs	r1, #0
 800154c:	4628      	mov	r0, r5
 800154e:	f000 f837 	bl	80015c0 <memchr>
 8001552:	b108      	cbz	r0, 8001558 <_printf_i+0x1bc>
 8001554:	1b40      	subs	r0, r0, r5
 8001556:	6060      	str	r0, [r4, #4]
 8001558:	6863      	ldr	r3, [r4, #4]
 800155a:	6123      	str	r3, [r4, #16]
 800155c:	2300      	movs	r3, #0
 800155e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001562:	e7a7      	b.n	80014b4 <_printf_i+0x118>
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	462a      	mov	r2, r5
 8001568:	4639      	mov	r1, r7
 800156a:	4630      	mov	r0, r6
 800156c:	47c0      	blx	r8
 800156e:	3001      	adds	r0, #1
 8001570:	d0aa      	beq.n	80014c8 <_printf_i+0x12c>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	079b      	lsls	r3, r3, #30
 8001576:	d413      	bmi.n	80015a0 <_printf_i+0x204>
 8001578:	68e0      	ldr	r0, [r4, #12]
 800157a:	9b03      	ldr	r3, [sp, #12]
 800157c:	4298      	cmp	r0, r3
 800157e:	bfb8      	it	lt
 8001580:	4618      	movlt	r0, r3
 8001582:	e7a3      	b.n	80014cc <_printf_i+0x130>
 8001584:	2301      	movs	r3, #1
 8001586:	464a      	mov	r2, r9
 8001588:	4639      	mov	r1, r7
 800158a:	4630      	mov	r0, r6
 800158c:	47c0      	blx	r8
 800158e:	3001      	adds	r0, #1
 8001590:	d09a      	beq.n	80014c8 <_printf_i+0x12c>
 8001592:	3501      	adds	r5, #1
 8001594:	68e3      	ldr	r3, [r4, #12]
 8001596:	9a03      	ldr	r2, [sp, #12]
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	42ab      	cmp	r3, r5
 800159c:	dcf2      	bgt.n	8001584 <_printf_i+0x1e8>
 800159e:	e7eb      	b.n	8001578 <_printf_i+0x1dc>
 80015a0:	2500      	movs	r5, #0
 80015a2:	f104 0919 	add.w	r9, r4, #25
 80015a6:	e7f5      	b.n	8001594 <_printf_i+0x1f8>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ac      	bne.n	8001506 <_printf_i+0x16a>
 80015ac:	7803      	ldrb	r3, [r0, #0]
 80015ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015b6:	e76c      	b.n	8001492 <_printf_i+0xf6>
 80015b8:	08001841 	.word	0x08001841
 80015bc:	08001852 	.word	0x08001852

080015c0 <memchr>:
 80015c0:	b510      	push	{r4, lr}
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	4402      	add	r2, r0
 80015c6:	4290      	cmp	r0, r2
 80015c8:	4603      	mov	r3, r0
 80015ca:	d101      	bne.n	80015d0 <memchr+0x10>
 80015cc:	2300      	movs	r3, #0
 80015ce:	e003      	b.n	80015d8 <memchr+0x18>
 80015d0:	781c      	ldrb	r4, [r3, #0]
 80015d2:	3001      	adds	r0, #1
 80015d4:	428c      	cmp	r4, r1
 80015d6:	d1f6      	bne.n	80015c6 <memchr+0x6>
 80015d8:	4618      	mov	r0, r3
 80015da:	bd10      	pop	{r4, pc}

080015dc <memmove>:
 80015dc:	4288      	cmp	r0, r1
 80015de:	b510      	push	{r4, lr}
 80015e0:	eb01 0302 	add.w	r3, r1, r2
 80015e4:	d807      	bhi.n	80015f6 <memmove+0x1a>
 80015e6:	1e42      	subs	r2, r0, #1
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d00a      	beq.n	8001602 <memmove+0x26>
 80015ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80015f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80015f4:	e7f8      	b.n	80015e8 <memmove+0xc>
 80015f6:	4283      	cmp	r3, r0
 80015f8:	d9f5      	bls.n	80015e6 <memmove+0xa>
 80015fa:	1881      	adds	r1, r0, r2
 80015fc:	1ad2      	subs	r2, r2, r3
 80015fe:	42d3      	cmn	r3, r2
 8001600:	d100      	bne.n	8001604 <memmove+0x28>
 8001602:	bd10      	pop	{r4, pc}
 8001604:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001608:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800160c:	e7f7      	b.n	80015fe <memmove+0x22>
	...

08001610 <_free_r>:
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	4605      	mov	r5, r0
 8001614:	2900      	cmp	r1, #0
 8001616:	d043      	beq.n	80016a0 <_free_r+0x90>
 8001618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800161c:	1f0c      	subs	r4, r1, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfb8      	it	lt
 8001622:	18e4      	addlt	r4, r4, r3
 8001624:	f000 f8d0 	bl	80017c8 <__malloc_lock>
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <_free_r+0x94>)
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	4610      	mov	r0, r2
 800162e:	b933      	cbnz	r3, 800163e <_free_r+0x2e>
 8001630:	6063      	str	r3, [r4, #4]
 8001632:	6014      	str	r4, [r2, #0]
 8001634:	4628      	mov	r0, r5
 8001636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800163a:	f000 b8c6 	b.w	80017ca <__malloc_unlock>
 800163e:	42a3      	cmp	r3, r4
 8001640:	d90b      	bls.n	800165a <_free_r+0x4a>
 8001642:	6821      	ldr	r1, [r4, #0]
 8001644:	1862      	adds	r2, r4, r1
 8001646:	4293      	cmp	r3, r2
 8001648:	bf01      	itttt	eq
 800164a:	681a      	ldreq	r2, [r3, #0]
 800164c:	685b      	ldreq	r3, [r3, #4]
 800164e:	1852      	addeq	r2, r2, r1
 8001650:	6022      	streq	r2, [r4, #0]
 8001652:	6063      	str	r3, [r4, #4]
 8001654:	6004      	str	r4, [r0, #0]
 8001656:	e7ed      	b.n	8001634 <_free_r+0x24>
 8001658:	4613      	mov	r3, r2
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	b10a      	cbz	r2, 8001662 <_free_r+0x52>
 800165e:	42a2      	cmp	r2, r4
 8001660:	d9fa      	bls.n	8001658 <_free_r+0x48>
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	1858      	adds	r0, r3, r1
 8001666:	42a0      	cmp	r0, r4
 8001668:	d10b      	bne.n	8001682 <_free_r+0x72>
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	4401      	add	r1, r0
 800166e:	1858      	adds	r0, r3, r1
 8001670:	4282      	cmp	r2, r0
 8001672:	6019      	str	r1, [r3, #0]
 8001674:	d1de      	bne.n	8001634 <_free_r+0x24>
 8001676:	6810      	ldr	r0, [r2, #0]
 8001678:	6852      	ldr	r2, [r2, #4]
 800167a:	4401      	add	r1, r0
 800167c:	6019      	str	r1, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	e7d8      	b.n	8001634 <_free_r+0x24>
 8001682:	d902      	bls.n	800168a <_free_r+0x7a>
 8001684:	230c      	movs	r3, #12
 8001686:	602b      	str	r3, [r5, #0]
 8001688:	e7d4      	b.n	8001634 <_free_r+0x24>
 800168a:	6820      	ldr	r0, [r4, #0]
 800168c:	1821      	adds	r1, r4, r0
 800168e:	428a      	cmp	r2, r1
 8001690:	bf01      	itttt	eq
 8001692:	6811      	ldreq	r1, [r2, #0]
 8001694:	6852      	ldreq	r2, [r2, #4]
 8001696:	1809      	addeq	r1, r1, r0
 8001698:	6021      	streq	r1, [r4, #0]
 800169a:	6062      	str	r2, [r4, #4]
 800169c:	605c      	str	r4, [r3, #4]
 800169e:	e7c9      	b.n	8001634 <_free_r+0x24>
 80016a0:	bd38      	pop	{r3, r4, r5, pc}
 80016a2:	bf00      	nop
 80016a4:	20000148 	.word	0x20000148

080016a8 <_malloc_r>:
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	1ccd      	adds	r5, r1, #3
 80016ac:	f025 0503 	bic.w	r5, r5, #3
 80016b0:	3508      	adds	r5, #8
 80016b2:	2d0c      	cmp	r5, #12
 80016b4:	bf38      	it	cc
 80016b6:	250c      	movcc	r5, #12
 80016b8:	2d00      	cmp	r5, #0
 80016ba:	4606      	mov	r6, r0
 80016bc:	db01      	blt.n	80016c2 <_malloc_r+0x1a>
 80016be:	42a9      	cmp	r1, r5
 80016c0:	d903      	bls.n	80016ca <_malloc_r+0x22>
 80016c2:	230c      	movs	r3, #12
 80016c4:	6033      	str	r3, [r6, #0]
 80016c6:	2000      	movs	r0, #0
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
 80016ca:	f000 f87d 	bl	80017c8 <__malloc_lock>
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <_malloc_r+0xac>)
 80016d0:	6814      	ldr	r4, [r2, #0]
 80016d2:	4621      	mov	r1, r4
 80016d4:	b991      	cbnz	r1, 80016fc <_malloc_r+0x54>
 80016d6:	4c20      	ldr	r4, [pc, #128]	; (8001758 <_malloc_r+0xb0>)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	b91b      	cbnz	r3, 80016e4 <_malloc_r+0x3c>
 80016dc:	4630      	mov	r0, r6
 80016de:	f000 f863 	bl	80017a8 <_sbrk_r>
 80016e2:	6020      	str	r0, [r4, #0]
 80016e4:	4629      	mov	r1, r5
 80016e6:	4630      	mov	r0, r6
 80016e8:	f000 f85e 	bl	80017a8 <_sbrk_r>
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	d124      	bne.n	800173a <_malloc_r+0x92>
 80016f0:	230c      	movs	r3, #12
 80016f2:	4630      	mov	r0, r6
 80016f4:	6033      	str	r3, [r6, #0]
 80016f6:	f000 f868 	bl	80017ca <__malloc_unlock>
 80016fa:	e7e4      	b.n	80016c6 <_malloc_r+0x1e>
 80016fc:	680b      	ldr	r3, [r1, #0]
 80016fe:	1b5b      	subs	r3, r3, r5
 8001700:	d418      	bmi.n	8001734 <_malloc_r+0x8c>
 8001702:	2b0b      	cmp	r3, #11
 8001704:	d90f      	bls.n	8001726 <_malloc_r+0x7e>
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	18cc      	adds	r4, r1, r3
 800170a:	50cd      	str	r5, [r1, r3]
 800170c:	4630      	mov	r0, r6
 800170e:	f000 f85c 	bl	80017ca <__malloc_unlock>
 8001712:	f104 000b 	add.w	r0, r4, #11
 8001716:	1d23      	adds	r3, r4, #4
 8001718:	f020 0007 	bic.w	r0, r0, #7
 800171c:	1ac3      	subs	r3, r0, r3
 800171e:	d0d3      	beq.n	80016c8 <_malloc_r+0x20>
 8001720:	425a      	negs	r2, r3
 8001722:	50e2      	str	r2, [r4, r3]
 8001724:	e7d0      	b.n	80016c8 <_malloc_r+0x20>
 8001726:	684b      	ldr	r3, [r1, #4]
 8001728:	428c      	cmp	r4, r1
 800172a:	bf16      	itet	ne
 800172c:	6063      	strne	r3, [r4, #4]
 800172e:	6013      	streq	r3, [r2, #0]
 8001730:	460c      	movne	r4, r1
 8001732:	e7eb      	b.n	800170c <_malloc_r+0x64>
 8001734:	460c      	mov	r4, r1
 8001736:	6849      	ldr	r1, [r1, #4]
 8001738:	e7cc      	b.n	80016d4 <_malloc_r+0x2c>
 800173a:	1cc4      	adds	r4, r0, #3
 800173c:	f024 0403 	bic.w	r4, r4, #3
 8001740:	42a0      	cmp	r0, r4
 8001742:	d005      	beq.n	8001750 <_malloc_r+0xa8>
 8001744:	1a21      	subs	r1, r4, r0
 8001746:	4630      	mov	r0, r6
 8001748:	f000 f82e 	bl	80017a8 <_sbrk_r>
 800174c:	3001      	adds	r0, #1
 800174e:	d0cf      	beq.n	80016f0 <_malloc_r+0x48>
 8001750:	6025      	str	r5, [r4, #0]
 8001752:	e7db      	b.n	800170c <_malloc_r+0x64>
 8001754:	20000148 	.word	0x20000148
 8001758:	2000014c 	.word	0x2000014c

0800175c <_realloc_r>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	4607      	mov	r7, r0
 8001760:	4614      	mov	r4, r2
 8001762:	460e      	mov	r6, r1
 8001764:	b921      	cbnz	r1, 8001770 <_realloc_r+0x14>
 8001766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800176a:	4611      	mov	r1, r2
 800176c:	f7ff bf9c 	b.w	80016a8 <_malloc_r>
 8001770:	b922      	cbnz	r2, 800177c <_realloc_r+0x20>
 8001772:	f7ff ff4d 	bl	8001610 <_free_r>
 8001776:	4625      	mov	r5, r4
 8001778:	4628      	mov	r0, r5
 800177a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800177c:	f000 f826 	bl	80017cc <_malloc_usable_size_r>
 8001780:	42a0      	cmp	r0, r4
 8001782:	d20f      	bcs.n	80017a4 <_realloc_r+0x48>
 8001784:	4621      	mov	r1, r4
 8001786:	4638      	mov	r0, r7
 8001788:	f7ff ff8e 	bl	80016a8 <_malloc_r>
 800178c:	4605      	mov	r5, r0
 800178e:	2800      	cmp	r0, #0
 8001790:	d0f2      	beq.n	8001778 <_realloc_r+0x1c>
 8001792:	4631      	mov	r1, r6
 8001794:	4622      	mov	r2, r4
 8001796:	f7ff fc0d 	bl	8000fb4 <memcpy>
 800179a:	4631      	mov	r1, r6
 800179c:	4638      	mov	r0, r7
 800179e:	f7ff ff37 	bl	8001610 <_free_r>
 80017a2:	e7e9      	b.n	8001778 <_realloc_r+0x1c>
 80017a4:	4635      	mov	r5, r6
 80017a6:	e7e7      	b.n	8001778 <_realloc_r+0x1c>

080017a8 <_sbrk_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	2300      	movs	r3, #0
 80017ac:	4c05      	ldr	r4, [pc, #20]	; (80017c4 <_sbrk_r+0x1c>)
 80017ae:	4605      	mov	r5, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	6023      	str	r3, [r4, #0]
 80017b4:	f7ff fb4e 	bl	8000e54 <_sbrk>
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	d102      	bne.n	80017c2 <_sbrk_r+0x1a>
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	b103      	cbz	r3, 80017c2 <_sbrk_r+0x1a>
 80017c0:	602b      	str	r3, [r5, #0]
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
 80017c4:	20000154 	.word	0x20000154

080017c8 <__malloc_lock>:
 80017c8:	4770      	bx	lr

080017ca <__malloc_unlock>:
 80017ca:	4770      	bx	lr

080017cc <_malloc_usable_size_r>:
 80017cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017d0:	1f18      	subs	r0, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bfbc      	itt	lt
 80017d6:	580b      	ldrlt	r3, [r1, r0]
 80017d8:	18c0      	addlt	r0, r0, r3
 80017da:	4770      	bx	lr

080017dc <_init>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	bf00      	nop
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr

080017e8 <_fini>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	bf00      	nop
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr
