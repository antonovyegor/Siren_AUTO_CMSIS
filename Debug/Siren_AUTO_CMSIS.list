
Siren_AUTO_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002960  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c48  08002c48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c48  08002c48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c48  08002c48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  20000070  08002cc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  08002cc0  00020e30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b3e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c7b  00000000  00000000  00029bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  0002b858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  0002bea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000143f1  00000000  00000000  0002c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000788c  00000000  00000000  000407e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e261  00000000  00000000  0004806d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b62ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  000b634c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002a58 	.word	0x08002a58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002a58 	.word	0x08002a58

08000150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000154:	4b05      	ldr	r3, [pc, #20]	; (800016c <HAL_IncTick+0x1c>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	461a      	mov	r2, r3
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <HAL_IncTick+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4413      	add	r3, r2
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <HAL_IncTick+0x20>)
 8000162:	6013      	str	r3, [r2, #0]
}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000000 	.word	0x20000000
 8000170:	20000de8 	.word	0x20000de8

08000174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f103 0208 	add.w	r2, r3, #8
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800018c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f103 0208 	add.w	r2, r3, #8
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f103 0208 	add.w	r2, r3, #8
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr

080001b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001b2:	b480      	push	{r7}
 80001b4:	b083      	sub	sp, #12
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2200      	movs	r2, #0
 80001be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001c0:	bf00      	nop
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr

080001ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
 80001d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	689a      	ldr	r2, [r3, #8]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	1c5a      	adds	r2, r3, #1
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000226:	d103      	bne.n	8000230 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e00c      	b.n	800024a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3308      	adds	r3, #8
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e002      	b.n	800023e <vListInsert+0x2e>
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	429a      	cmp	r2, r3
 8000248:	d2f6      	bcs.n	8000238 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	683a      	ldr	r2, [r7, #0]
 8000258:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	6892      	ldr	r2, [r2, #8]
 8000296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	6852      	ldr	r2, [r2, #4]
 80002a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d103      	bne.n	80002b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b08c      	sub	sp, #48	; 0x30
 80002d6:	af04      	add	r7, sp, #16
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	603b      	str	r3, [r7, #0]
 80002de:	4613      	mov	r3, r2
 80002e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fe3c 	bl	8000f64 <pvPortMalloc>
 80002ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00e      	beq.n	8000312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80002f4:	2054      	movs	r0, #84	; 0x54
 80002f6:	f000 fe35 	bl	8000f64 <pvPortMalloc>
 80002fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d003      	beq.n	800030a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	631a      	str	r2, [r3, #48]	; 0x30
 8000308:	e005      	b.n	8000316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800030a:	6978      	ldr	r0, [r7, #20]
 800030c:	f000 feec 	bl	80010e8 <vPortFree>
 8000310:	e001      	b.n	8000316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000316:	69fb      	ldr	r3, [r7, #28]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d013      	beq.n	8000344 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800031c:	88fa      	ldrh	r2, [r7, #6]
 800031e:	2300      	movs	r3, #0
 8000320:	9303      	str	r3, [sp, #12]
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	9302      	str	r3, [sp, #8]
 8000326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	68b9      	ldr	r1, [r7, #8]
 8000332:	68f8      	ldr	r0, [r7, #12]
 8000334:	f000 f80e 	bl	8000354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000338:	69f8      	ldr	r0, [r7, #28]
 800033a:	f000 f889 	bl	8000450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
 8000342:	e002      	b.n	800034a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800034a:	69bb      	ldr	r3, [r7, #24]
	}
 800034c:	4618      	mov	r0, r3
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
 8000360:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800036c:	3b01      	subs	r3, #1
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	f023 0307 	bic.w	r3, r3, #7
 800037a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	f003 0307 	and.w	r3, r3, #7
 8000382:	2b00      	cmp	r3, #0
 8000384:	d009      	beq.n	800039a <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038a:	f383 8811 	msr	BASEPRI, r3
 800038e:	f3bf 8f6f 	isb	sy
 8000392:	f3bf 8f4f 	dsb	sy
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	e7fe      	b.n	8000398 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]
 800039e:	e012      	b.n	80003c6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	4413      	add	r3, r2
 80003a6:	7819      	ldrb	r1, [r3, #0]
 80003a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	4413      	add	r3, r2
 80003ae:	3334      	adds	r3, #52	; 0x34
 80003b0:	460a      	mov	r2, r1
 80003b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80003b4:	68ba      	ldr	r2, [r7, #8]
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	4413      	add	r3, r2
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d006      	beq.n	80003ce <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	3301      	adds	r3, #1
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	2b0f      	cmp	r3, #15
 80003ca:	d9e9      	bls.n	80003a0 <prvInitialiseNewTask+0x4c>
 80003cc:	e000      	b.n	80003d0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80003ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80003d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003d2:	2200      	movs	r2, #0
 80003d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80003d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003da:	2b06      	cmp	r3, #6
 80003dc:	d901      	bls.n	80003e2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80003de:	2306      	movs	r3, #6
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80003e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80003e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80003ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f0:	2200      	movs	r2, #0
 80003f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80003f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f6:	3304      	adds	r3, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff feda 	bl	80001b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80003fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000400:	3318      	adds	r3, #24
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff fed5 	bl	80001b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800040c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800040e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000410:	f1c3 0207 	rsb	r2, r3, #7
 8000414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000416:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800041c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000420:	2200      	movs	r2, #0
 8000422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000426:	2200      	movs	r2, #0
 8000428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	68f9      	ldr	r1, [r7, #12]
 8000430:	69b8      	ldr	r0, [r7, #24]
 8000432:	f000 fbed 	bl	8000c10 <pxPortInitialiseStack>
 8000436:	4602      	mov	r2, r0
 8000438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800043a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000446:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000458:	f000 fcc6 	bl	8000de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800045c:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <prvAddNewTaskToReadyList+0xb8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	4a29      	ldr	r2, [pc, #164]	; (8000508 <prvAddNewTaskToReadyList+0xb8>)
 8000464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000466:	4b29      	ldr	r3, [pc, #164]	; (800050c <prvAddNewTaskToReadyList+0xbc>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d109      	bne.n	8000482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800046e:	4a27      	ldr	r2, [pc, #156]	; (800050c <prvAddNewTaskToReadyList+0xbc>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <prvAddNewTaskToReadyList+0xb8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d110      	bne.n	800049e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800047c:	f000 faa4 	bl	80009c8 <prvInitialiseTaskLists>
 8000480:	e00d      	b.n	800049e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000482:	4b23      	ldr	r3, [pc, #140]	; (8000510 <prvAddNewTaskToReadyList+0xc0>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d109      	bne.n	800049e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800048a:	4b20      	ldr	r3, [pc, #128]	; (800050c <prvAddNewTaskToReadyList+0xbc>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000494:	429a      	cmp	r2, r3
 8000496:	d802      	bhi.n	800049e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000498:	4a1c      	ldr	r2, [pc, #112]	; (800050c <prvAddNewTaskToReadyList+0xbc>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800049e:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <prvAddNewTaskToReadyList+0xc4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <prvAddNewTaskToReadyList+0xc4>)
 80004a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ac:	2201      	movs	r2, #1
 80004ae:	409a      	lsls	r2, r3
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <prvAddNewTaskToReadyList+0xc8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	4a18      	ldr	r2, [pc, #96]	; (8000518 <prvAddNewTaskToReadyList+0xc8>)
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4613      	mov	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4a15      	ldr	r2, [pc, #84]	; (800051c <prvAddNewTaskToReadyList+0xcc>)
 80004c8:	441a      	add	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3304      	adds	r3, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4610      	mov	r0, r2
 80004d2:	f7ff fe7a 	bl	80001ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80004d6:	f000 fcb5 	bl	8000e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <prvAddNewTaskToReadyList+0xc0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00e      	beq.n	8000500 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <prvAddNewTaskToReadyList+0xbc>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d207      	bcs.n	8000500 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <prvAddNewTaskToReadyList+0xd0>)
 80004f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	f3bf 8f4f 	dsb	sy
 80004fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000018c 	.word	0x2000018c
 800050c:	2000008c 	.word	0x2000008c
 8000510:	20000198 	.word	0x20000198
 8000514:	200001a8 	.word	0x200001a8
 8000518:	20000194 	.word	0x20000194
 800051c:	20000090 	.word	0x20000090
 8000520:	e000ed04 	.word	0xe000ed04

08000524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d016      	beq.n	8000564 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <vTaskDelay+0x60>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d009      	beq.n	8000552 <vTaskDelay+0x2e>
 800053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000542:	f383 8811 	msr	BASEPRI, r3
 8000546:	f3bf 8f6f 	isb	sy
 800054a:	f3bf 8f4f 	dsb	sy
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	e7fe      	b.n	8000550 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000552:	f000 f861 	bl	8000618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000556:	2100      	movs	r1, #0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 faf3 	bl	8000b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800055e:	f000 f869 	bl	8000634 <xTaskResumeAll>
 8000562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d107      	bne.n	800057a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <vTaskDelay+0x64>)
 800056c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	f3bf 8f4f 	dsb	sy
 8000576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200001b4 	.word	0x200001b4
 8000588:	e000ed04 	.word	0xe000ed04

0800058c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <vTaskStartScheduler+0x74>)
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2300      	movs	r3, #0
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2210      	movs	r2, #16
 800059e:	4919      	ldr	r1, [pc, #100]	; (8000604 <vTaskStartScheduler+0x78>)
 80005a0:	4819      	ldr	r0, [pc, #100]	; (8000608 <vTaskStartScheduler+0x7c>)
 80005a2:	f7ff fe96 	bl	80002d2 <xTaskCreate>
 80005a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d115      	bne.n	80005da <vTaskStartScheduler+0x4e>
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <vTaskStartScheduler+0x80>)
 80005c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <vTaskStartScheduler+0x84>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <vTaskStartScheduler+0x88>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80005d4:	f000 fb98 	bl	8000d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80005d8:	e00d      	b.n	80005f6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005e0:	d109      	bne.n	80005f6 <vTaskStartScheduler+0x6a>
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e7fe      	b.n	80005f4 <vTaskStartScheduler+0x68>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001b0 	.word	0x200001b0
 8000604:	08002a70 	.word	0x08002a70
 8000608:	08000999 	.word	0x08000999
 800060c:	200001ac 	.word	0x200001ac
 8000610:	20000198 	.word	0x20000198
 8000614:	20000190 	.word	0x20000190

08000618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <vTaskSuspendAll+0x18>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a03      	ldr	r2, [pc, #12]	; (8000630 <vTaskSuspendAll+0x18>)
 8000624:	6013      	str	r3, [r2, #0]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	200001b4 	.word	0x200001b4

08000634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <xTaskResumeAll+0x114>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d109      	bne.n	800065e <xTaskResumeAll+0x2a>
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	e7fe      	b.n	800065c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800065e:	f000 fbc3 	bl	8000de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000662:	4b39      	ldr	r3, [pc, #228]	; (8000748 <xTaskResumeAll+0x114>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a37      	ldr	r2, [pc, #220]	; (8000748 <xTaskResumeAll+0x114>)
 800066a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800066c:	4b36      	ldr	r3, [pc, #216]	; (8000748 <xTaskResumeAll+0x114>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d161      	bne.n	8000738 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000674:	4b35      	ldr	r3, [pc, #212]	; (800074c <xTaskResumeAll+0x118>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d05d      	beq.n	8000738 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800067c:	e02e      	b.n	80006dc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <xTaskResumeAll+0x11c>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3318      	adds	r3, #24
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fdf8 	bl	8000280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3304      	adds	r3, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fdf3 	bl	8000280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	2201      	movs	r2, #1
 80006a0:	409a      	lsls	r2, r3
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <xTaskResumeAll+0x120>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <xTaskResumeAll+0x120>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b0:	4613      	mov	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <xTaskResumeAll+0x124>)
 80006ba:	441a      	add	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3304      	adds	r3, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f7ff fd81 	bl	80001ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <xTaskResumeAll+0x128>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d302      	bcc.n	80006dc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <xTaskResumeAll+0x12c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <xTaskResumeAll+0x11c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1cc      	bne.n	800067e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80006ea:	f000 f9e9 	bl	8000ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <xTaskResumeAll+0x130>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d010      	beq.n	800071c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80006fa:	f000 f837 	bl	800076c <xTaskIncrementTick>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <xTaskResumeAll+0x12c>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3b01      	subs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f1      	bne.n	80006fa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <xTaskResumeAll+0x130>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <xTaskResumeAll+0x12c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d009      	beq.n	8000738 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000724:	2301      	movs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <xTaskResumeAll+0x134>)
 800072a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000738:	f000 fb84 	bl	8000e44 <vPortExitCritical>

	return xAlreadyYielded;
 800073c:	68bb      	ldr	r3, [r7, #8]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001b4 	.word	0x200001b4
 800074c:	2000018c 	.word	0x2000018c
 8000750:	2000014c 	.word	0x2000014c
 8000754:	20000194 	.word	0x20000194
 8000758:	20000090 	.word	0x20000090
 800075c:	2000008c 	.word	0x2000008c
 8000760:	200001a0 	.word	0x200001a0
 8000764:	2000019c 	.word	0x2000019c
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <xTaskIncrementTick+0x14c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 808c 	bne.w	8000898 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000780:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <xTaskIncrementTick+0x150>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000788:	4a4c      	ldr	r2, [pc, #304]	; (80008bc <xTaskIncrementTick+0x150>)
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d11f      	bne.n	80007d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000794:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <xTaskIncrementTick+0x154>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d009      	beq.n	80007b2 <xTaskIncrementTick+0x46>
 800079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	e7fe      	b.n	80007b0 <xTaskIncrementTick+0x44>
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <xTaskIncrementTick+0x154>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <xTaskIncrementTick+0x158>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <xTaskIncrementTick+0x154>)
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <xTaskIncrementTick+0x158>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <xTaskIncrementTick+0x15c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a3e      	ldr	r2, [pc, #248]	; (80008c8 <xTaskIncrementTick+0x15c>)
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	f000 f976 	bl	8000ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <xTaskIncrementTick+0x160>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d34d      	bcc.n	800087a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <xTaskIncrementTick+0x154>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <xTaskIncrementTick+0x80>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <xTaskIncrementTick+0x82>
 80007ec:	2300      	movs	r3, #0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007f2:	4b36      	ldr	r3, [pc, #216]	; (80008cc <xTaskIncrementTick+0x160>)
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f8:	601a      	str	r2, [r3, #0]
					break;
 80007fa:	e03e      	b.n	800087a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80007fc:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <xTaskIncrementTick+0x154>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d203      	bcs.n	800081c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000814:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <xTaskIncrementTick+0x160>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
						break;
 800081a:	e02e      	b.n	800087a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3304      	adds	r3, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fd2d 	bl	8000280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3318      	adds	r3, #24
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fd24 	bl	8000280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083c:	2201      	movs	r2, #1
 800083e:	409a      	lsls	r2, r3
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <xTaskIncrementTick+0x164>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4313      	orrs	r3, r2
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <xTaskIncrementTick+0x164>)
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <xTaskIncrementTick+0x168>)
 8000858:	441a      	add	r2, r3
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	3304      	adds	r3, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4610      	mov	r0, r2
 8000862:	f7ff fcb2 	bl	80001ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <xTaskIncrementTick+0x16c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	429a      	cmp	r2, r3
 8000872:	d3b4      	bcc.n	80007de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000878:	e7b1      	b.n	80007de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <xTaskIncrementTick+0x16c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000880:	4914      	ldr	r1, [pc, #80]	; (80008d4 <xTaskIncrementTick+0x168>)
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d907      	bls.n	80008a2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e004      	b.n	80008a2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <xTaskIncrementTick+0x170>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <xTaskIncrementTick+0x170>)
 80008a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <xTaskIncrementTick+0x174>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80008ae:	697b      	ldr	r3, [r7, #20]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200001b4 	.word	0x200001b4
 80008bc:	20000190 	.word	0x20000190
 80008c0:	20000144 	.word	0x20000144
 80008c4:	20000148 	.word	0x20000148
 80008c8:	200001a4 	.word	0x200001a4
 80008cc:	200001ac 	.word	0x200001ac
 80008d0:	20000194 	.word	0x20000194
 80008d4:	20000090 	.word	0x20000090
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	2000019c 	.word	0x2000019c
 80008e0:	200001a0 	.word	0x200001a0

080008e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <vTaskSwitchContext+0xa0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <vTaskSwitchContext+0xa4>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80008f8:	e03e      	b.n	8000978 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <vTaskSwitchContext+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <vTaskSwitchContext+0xa8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	fab3 f383 	clz	r3, r3
 800090c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	f1c3 031f 	rsb	r3, r3, #31
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	491e      	ldr	r1, [pc, #120]	; (8000990 <vTaskSwitchContext+0xac>)
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d109      	bne.n	800093e <vTaskSwitchContext+0x5a>
	__asm volatile
 800092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092e:	f383 8811 	msr	BASEPRI, r3
 8000932:	f3bf 8f6f 	isb	sy
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	e7fe      	b.n	800093c <vTaskSwitchContext+0x58>
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <vTaskSwitchContext+0xac>)
 800094a:	4413      	add	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	3308      	adds	r3, #8
 8000960:	429a      	cmp	r2, r3
 8000962:	d104      	bne.n	800096e <vTaskSwitchContext+0x8a>
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <vTaskSwitchContext+0xb0>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200001b4 	.word	0x200001b4
 8000988:	200001a0 	.word	0x200001a0
 800098c:	20000194 	.word	0x20000194
 8000990:	20000090 	.word	0x20000090
 8000994:	2000008c 	.word	0x2000008c

08000998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80009a0:	f000 f852 	bl	8000a48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <prvIdleTask+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d9f9      	bls.n	80009a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <prvIdleTask+0x2c>)
 80009ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80009bc:	e7f0      	b.n	80009a0 <prvIdleTask+0x8>
 80009be:	bf00      	nop
 80009c0:	20000090 	.word	0x20000090
 80009c4:	e000ed04 	.word	0xe000ed04

080009c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	e00c      	b.n	80009ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <prvInitialiseTaskLists+0x60>)
 80009e0:	4413      	add	r3, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fbc6 	bl	8000174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3301      	adds	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	d9ef      	bls.n	80009d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <prvInitialiseTaskLists+0x64>)
 80009f6:	f7ff fbbd 	bl	8000174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <prvInitialiseTaskLists+0x68>)
 80009fc:	f7ff fbba 	bl	8000174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <prvInitialiseTaskLists+0x6c>)
 8000a02:	f7ff fbb7 	bl	8000174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <prvInitialiseTaskLists+0x70>)
 8000a08:	f7ff fbb4 	bl	8000174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <prvInitialiseTaskLists+0x74>)
 8000a0e:	f7ff fbb1 	bl	8000174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <prvInitialiseTaskLists+0x78>)
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <prvInitialiseTaskLists+0x64>)
 8000a16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <prvInitialiseTaskLists+0x7c>)
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <prvInitialiseTaskLists+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000090 	.word	0x20000090
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	20000130 	.word	0x20000130
 8000a34:	2000014c 	.word	0x2000014c
 8000a38:	20000160 	.word	0x20000160
 8000a3c:	20000178 	.word	0x20000178
 8000a40:	20000144 	.word	0x20000144
 8000a44:	20000148 	.word	0x20000148

08000a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000a4e:	e019      	b.n	8000a84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8000a50:	f000 f9ca 	bl	8000de8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <prvCheckTasksWaitingTermination+0x4c>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fc0d 	bl	8000280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <prvCheckTasksWaitingTermination+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <prvCheckTasksWaitingTermination+0x50>)
 8000a6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <prvCheckTasksWaitingTermination+0x54>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <prvCheckTasksWaitingTermination+0x54>)
 8000a78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8000a7a:	f000 f9e3 	bl	8000e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f80e 	bl	8000aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <prvCheckTasksWaitingTermination+0x54>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1e1      	bne.n	8000a50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000160 	.word	0x20000160
 8000a98:	2000018c 	.word	0x2000018c
 8000a9c:	20000174 	.word	0x20000174

08000aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fb1b 	bl	80010e8 <vPortFree>
			vPortFree( pxTCB );
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 fb18 	bl	80010e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <prvResetNextTaskUnblockTime+0x40>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <prvResetNextTaskUnblockTime+0x14>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <prvResetNextTaskUnblockTime+0x16>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d004      	beq.n	8000ae4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <prvResetNextTaskUnblockTime+0x44>)
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000ae2:	e008      	b.n	8000af6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <prvResetNextTaskUnblockTime+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <prvResetNextTaskUnblockTime+0x44>)
 8000af4:	6013      	str	r3, [r2, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000144 	.word	0x20000144
 8000b04:	200001ac 	.word	0x200001ac

08000b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <xTaskGetSchedulerState+0x34>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8000b16:	2301      	movs	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e008      	b.n	8000b2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <xTaskGetSchedulerState+0x38>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8000b24:	2302      	movs	r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	e001      	b.n	8000b2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8000b2e:	687b      	ldr	r3, [r7, #4]
	}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000198 	.word	0x20000198
 8000b40:	200001b4 	.word	0x200001b4

08000b44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fb90 	bl	8000280 <uxListRemove>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8000b7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b84:	d10a      	bne.n	8000b9c <prvAddCurrentTaskToDelayedList+0x58>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3304      	adds	r3, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	; (8000c00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8000b96:	f7ff fb18 	bl	80001ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000b9a:	e026      	b.n	8000bea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d209      	bcs.n	8000bc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f7ff fb25 	bl	8000210 <vListInsert>
}
 8000bc6:	e010      	b.n	8000bea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	f7ff fb1b 	bl	8000210 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d202      	bcs.n	8000bea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000190 	.word	0x20000190
 8000bf8:	2000008c 	.word	0x2000008c
 8000bfc:	20000194 	.word	0x20000194
 8000c00:	20000178 	.word	0x20000178
 8000c04:	20000148 	.word	0x20000148
 8000c08:	20000144 	.word	0x20000144
 8000c0c:	200001ac 	.word	0x200001ac

08000c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b04      	subs	r3, #4
 8000c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	f023 0201 	bic.w	r2, r3, #1
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b04      	subs	r3, #4
 8000c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000c40:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <pxPortInitialiseStack+0x54>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3b14      	subs	r3, #20
 8000c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3b20      	subs	r3, #32
 8000c56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000c58:	68fb      	ldr	r3, [r7, #12]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	08000c69 	.word	0x08000c69

08000c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <prvTaskExitError+0x4c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c7a:	d009      	beq.n	8000c90 <prvTaskExitError+0x28>
 8000c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e7fe      	b.n	8000c8e <prvTaskExitError+0x26>
 8000c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c94:	f383 8811 	msr	BASEPRI, r3
 8000c98:	f3bf 8f6f 	isb	sy
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000ca2:	bf00      	nop
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0fc      	beq.n	8000ca4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000004 	.word	0x20000004
	...

08000cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <pxCurrentTCBConst2>)
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	6808      	ldr	r0, [r1, #0]
 8000cc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000cca:	f380 8809 	msr	PSP, r0
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	f380 8811 	msr	BASEPRI, r0
 8000cda:	f04e 0e0d 	orr.w	lr, lr, #13
 8000cde:	4770      	bx	lr

08000ce0 <pxCurrentTCBConst2>:
 8000ce0:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop

08000ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <prvPortStartFirstTask+0x1c>)
 8000cea:	6800      	ldr	r0, [r0, #0]
 8000cec:	6800      	ldr	r0, [r0, #0]
 8000cee:	f380 8808 	msr	MSP, r0
 8000cf2:	b662      	cpsie	i
 8000cf4:	b661      	cpsie	f
 8000cf6:	f3bf 8f4f 	dsb	sy
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	df00      	svc	0
 8000d00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000d02:	bf00      	nop
 8000d04:	e000ed08 	.word	0xe000ed08

08000d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <xPortStartScheduler+0xcc>)
 8000d10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <xPortStartScheduler+0xd0>)
 8000d34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d3c:	e009      	b.n	8000d52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	2b80      	cmp	r3, #128	; 0x80
 8000d5c:	d0ef      	beq.n	8000d3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d009      	beq.n	8000d7e <xPortStartScheduler+0x76>
 8000d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6e:	f383 8811 	msr	BASEPRI, r3
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	e7fe      	b.n	8000d7c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <xPortStartScheduler+0xd4>)
 8000d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <xPortStartScheduler+0xd8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <xPortStartScheduler+0xd8>)
 8000da2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <xPortStartScheduler+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <xPortStartScheduler+0xd8>)
 8000dae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000db4:	f000 f8b0 	bl	8000f18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <xPortStartScheduler+0xdc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000dbe:	f7ff ff93 	bl	8000ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000dc2:	f7ff fd8f 	bl	80008e4 <vTaskSwitchContext>
	prvTaskExitError();
 8000dc6:	f7ff ff4f 	bl	8000c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	e000e400 	.word	0xe000e400
 8000dd8:	200001b8 	.word	0x200001b8
 8000ddc:	200001bc 	.word	0x200001bc
 8000de0:	e000ed20 	.word	0xe000ed20
 8000de4:	20000004 	.word	0x20000004

08000de8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <vPortEnterCritical+0x54>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <vPortEnterCritical+0x54>)
 8000e08:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <vPortEnterCritical+0x54>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10e      	bne.n	8000e30 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <vPortEnterCritical+0x58>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d009      	beq.n	8000e30 <vPortEnterCritical+0x48>
 8000e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e20:	f383 8811 	msr	BASEPRI, r3
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	e7fe      	b.n	8000e2e <vPortEnterCritical+0x46>
	}
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	e000ed04 	.word	0xe000ed04

08000e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <vPortExitCritical+0x48>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d109      	bne.n	8000e66 <vPortExitCritical+0x22>
 8000e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	e7fe      	b.n	8000e64 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <vPortExitCritical+0x48>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <vPortExitCritical+0x48>)
 8000e6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <vPortExitCritical+0x48>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <vPortExitCritical+0x3e>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000004 	.word	0x20000004

08000e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e90:	f3ef 8009 	mrs	r0, PSP
 8000e94:	f3bf 8f6f 	isb	sy
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <pxCurrentTCBConst>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ea0:	6010      	str	r0, [r2, #0]
 8000ea2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000ea6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eaa:	f380 8811 	msr	BASEPRI, r0
 8000eae:	f7ff fd19 	bl	80008e4 <vTaskSwitchContext>
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	f380 8811 	msr	BASEPRI, r0
 8000eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	6808      	ldr	r0, [r1, #0]
 8000ec2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ec6:	f380 8809 	msr	PSP, r0
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	4770      	bx	lr

08000ed0 <pxCurrentTCBConst>:
 8000ed0:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop

08000ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	__asm volatile
 8000ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000ef0:	f7ff fc3c 	bl	800076c <xTaskIncrementTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <xPortSysTickHandler+0x3c>)
 8000efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	e000ed04 	.word	0xe000ed04

08000f18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <vPortSetupTimerInterrupt+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <vPortSetupTimerInterrupt+0x3c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <vPortSetupTimerInterrupt+0x40>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <vPortSetupTimerInterrupt+0x44>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	099b      	lsrs	r3, r3, #6
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <vPortSetupTimerInterrupt+0x48>)
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <vPortSetupTimerInterrupt+0x38>)
 8000f42:	2207      	movs	r2, #7
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010
 8000f54:	e000e018 	.word	0xe000e018
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	10624dd3 	.word	0x10624dd3
 8000f60:	e000e014 	.word	0xe000e014

08000f64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f70:	f7ff fb52 	bl	8000618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f74:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <pvPortMalloc+0x170>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d101      	bne.n	8000f80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000f7c:	f000 f90c 	bl	8001198 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f80:	4b55      	ldr	r3, [pc, #340]	; (80010d8 <pvPortMalloc+0x174>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 808c 	bne.w	80010a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01c      	beq.n	8000fce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000f94:	2208      	movs	r2, #8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d013      	beq.n	8000fce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f023 0307 	bic.w	r3, r3, #7
 8000fac:	3308      	adds	r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <pvPortMalloc+0x6a>
	__asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e7fe      	b.n	8000fcc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d068      	beq.n	80010a6 <pvPortMalloc+0x142>
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <pvPortMalloc+0x178>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d863      	bhi.n	80010a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <pvPortMalloc+0x17c>)
 8000fe0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <pvPortMalloc+0x17c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fe8:	e004      	b.n	8000ff4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d903      	bls.n	8001006 <pvPortMalloc+0xa2>
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f1      	bne.n	8000fea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <pvPortMalloc+0x170>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100c:	429a      	cmp	r2, r3
 800100e:	d04a      	beq.n	80010a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2208      	movs	r2, #8
 8001016:	4413      	add	r3, r2
 8001018:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1ad2      	subs	r2, r2, r3
 800102a:	2308      	movs	r3, #8
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	429a      	cmp	r2, r3
 8001030:	d91e      	bls.n	8001070 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <pvPortMalloc+0xf4>
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e7fe      	b.n	8001056 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800106a:	69b8      	ldr	r0, [r7, #24]
 800106c:	f000 f8f6 	bl	800125c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <pvPortMalloc+0x178>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <pvPortMalloc+0x178>)
 800107c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <pvPortMalloc+0x178>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <pvPortMalloc+0x180>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d203      	bcs.n	8001092 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <pvPortMalloc+0x178>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <pvPortMalloc+0x180>)
 8001090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <pvPortMalloc+0x174>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	431a      	orrs	r2, r3
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010a6:	f7ff fac5 	bl	8000634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <pvPortMalloc+0x164>
 80010b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b8:	f383 8811 	msr	BASEPRI, r3
 80010bc:	f3bf 8f6f 	isb	sy
 80010c0:	f3bf 8f4f 	dsb	sy
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	e7fe      	b.n	80010c6 <pvPortMalloc+0x162>
	return pvReturn;
 80010c8:	69fb      	ldr	r3, [r7, #28]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000dc8 	.word	0x20000dc8
 80010d8:	20000dd4 	.word	0x20000dd4
 80010dc:	20000dcc 	.word	0x20000dcc
 80010e0:	20000dc0 	.word	0x20000dc0
 80010e4:	20000dd0 	.word	0x20000dd0

080010e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d046      	beq.n	8001188 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80010fa:	2308      	movs	r3, #8
 80010fc:	425b      	negs	r3, r3
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4413      	add	r3, r2
 8001102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <vPortFree+0xa8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <vPortFree+0x42>
 8001116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111a:	f383 8811 	msr	BASEPRI, r3
 800111e:	f3bf 8f6f 	isb	sy
 8001122:	f3bf 8f4f 	dsb	sy
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e7fe      	b.n	8001128 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d009      	beq.n	8001146 <vPortFree+0x5e>
 8001132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001136:	f383 8811 	msr	BASEPRI, r3
 800113a:	f3bf 8f6f 	isb	sy
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	e7fe      	b.n	8001144 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <vPortFree+0xa8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d019      	beq.n	8001188 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d115      	bne.n	8001188 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <vPortFree+0xa8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800116c:	f7ff fa54 	bl	8000618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <vPortFree+0xac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	4a06      	ldr	r2, [pc, #24]	; (8001194 <vPortFree+0xac>)
 800117c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800117e:	6938      	ldr	r0, [r7, #16]
 8001180:	f000 f86c 	bl	800125c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001184:	f7ff fa56 	bl	8000634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000dd4 	.word	0x20000dd4
 8001194:	20000dcc 	.word	0x20000dcc

08001198 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800119e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <prvHeapInit+0xac>)
 80011a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3307      	adds	r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 0307 	bic.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <prvHeapInit+0xac>)
 80011c8:	4413      	add	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <prvHeapInit+0xb0>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <prvHeapInit+0xb0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80011e4:	2208      	movs	r2, #8
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 0307 	bic.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <prvHeapInit+0xb4>)
 80011f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <prvHeapInit+0xb4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <prvHeapInit+0xb4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <prvHeapInit+0xb4>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <prvHeapInit+0xb8>)
 8001226:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <prvHeapInit+0xbc>)
 800122e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <prvHeapInit+0xc0>)
 8001232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200001c0 	.word	0x200001c0
 8001248:	20000dc0 	.word	0x20000dc0
 800124c:	20000dc8 	.word	0x20000dc8
 8001250:	20000dd0 	.word	0x20000dd0
 8001254:	20000dcc 	.word	0x20000dcc
 8001258:	20000dd4 	.word	0x20000dd4

0800125c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <prvInsertBlockIntoFreeList+0xa8>)
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e002      	b.n	8001270 <prvInsertBlockIntoFreeList+0x14>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d8f7      	bhi.n	800126a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4413      	add	r3, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	d108      	bne.n	800129e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	441a      	add	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	441a      	add	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d118      	bne.n	80012e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <prvInsertBlockIntoFreeList+0xac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d00d      	beq.n	80012da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	441a      	add	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e008      	b.n	80012ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <prvInsertBlockIntoFreeList+0xac>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e003      	b.n	80012ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d002      	beq.n	80012fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000dc0 	.word	0x20000dc0
 8001308:	20000dc8 	.word	0x20000dc8

0800130c <DelayMicro>:
#include "ds18b20.h"
#include "defines.h"

//--------------------------------------------------
void DelayMicro( uint32_t micros)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <DelayMicro+0x34>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <DelayMicro+0x38>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0dda      	lsrs	r2, r3, #23
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8001328:	bf00      	nop
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1fa      	bne.n	800132a <DelayMicro+0x1e>
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	ee9bfab5 	.word	0xee9bfab5

08001348 <port_init>:
//--------------------------------------------------
void port_init(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <port_init+0x60>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <port_init+0x60>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
	GPIOB->CRH |= GPIO_CRH_MODE11;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <port_init+0x64>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <port_init+0x64>)
 800135e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001362:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF11_0;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <port_init+0x64>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <port_init+0x64>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_CNF11_1;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <port_init+0x64>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <port_init+0x64>)
 8001376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800137a:	6053      	str	r3, [r2, #4]

	GPIOB->CRH |= GPIO_CRH_MODE10;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <port_init+0x64>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <port_init+0x64>)
 8001382:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001386:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF10_0;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <port_init+0x64>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <port_init+0x64>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_CNF10_1;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <port_init+0x64>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <port_init+0x64>)
 800139a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800139e:	6053      	str	r3, [r2, #4]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010c00 	.word	0x40010c00

080013b0 <ds18b20_Reset>:
//--------------------------------------------------
uint8_t ds18b20_Reset(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  uint16_t status1 , status2;
  GPIOB->ODR &= ~GPIO_ODR_ODR11;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <ds18b20_Reset+0x80>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <ds18b20_Reset+0x80>)
 80013bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013c0:	60d3      	str	r3, [r2, #12]
  GPIOB->ODR &= ~GPIO_ODR_ODR10;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <ds18b20_Reset+0x80>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <ds18b20_Reset+0x80>)
 80013c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013cc:	60d3      	str	r3, [r2, #12]

  DelayMicro(485);
 80013ce:	f240 10e5 	movw	r0, #485	; 0x1e5
 80013d2:	f7ff ff9b 	bl	800130c <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <ds18b20_Reset+0x80>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <ds18b20_Reset+0x80>)
 80013dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e0:	60d3      	str	r3, [r2, #12]
  GPIOB->ODR |= GPIO_ODR_ODR10;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <ds18b20_Reset+0x80>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <ds18b20_Reset+0x80>)
 80013e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ec:	60d3      	str	r3, [r2, #12]
  DelayMicro(65);
 80013ee:	2041      	movs	r0, #65	; 0x41
 80013f0:	f7ff ff8c 	bl	800130c <DelayMicro>
  status1 = GPIOB->IDR & GPIO_IDR_IDR11;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <ds18b20_Reset+0x80>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013fe:	80fb      	strh	r3, [r7, #6]
  status2 = GPIOB->IDR & GPIO_IDR_IDR10;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <ds18b20_Reset+0x80>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	b29b      	uxth	r3, r3
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140a:	80bb      	strh	r3, [r7, #4]
  DelayMicro(500);
 800140c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001410:	f7ff ff7c 	bl	800130c <DelayMicro>

  return (status1||status2 ? 1 : 0);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <ds18b20_Reset+0x70>
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <ds18b20_Reset+0x74>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <ds18b20_Reset+0x76>
 8001424:	2300      	movs	r3, #0
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010c00 	.word	0x40010c00

08001434 <ds18b20_ReadBit_11>:
//----------------------------------------------------------
uint8_t ds18b20_ReadBit_11(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <ds18b20_ReadBit_11+0x54>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <ds18b20_ReadBit_11+0x54>)
 8001444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001448:	60d3      	str	r3, [r2, #12]
  DelayMicro(2);
 800144a:	2002      	movs	r0, #2
 800144c:	f7ff ff5e 	bl	800130c <DelayMicro>
	GPIOB->ODR |= GPIO_ODR_ODR11;
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <ds18b20_ReadBit_11+0x54>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <ds18b20_ReadBit_11+0x54>)
 8001456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145a:	60d3      	str	r3, [r2, #12]
	DelayMicro(13);
 800145c:	200d      	movs	r0, #13
 800145e:	f7ff ff55 	bl	800130c <DelayMicro>
	bit = (GPIOB->IDR & GPIO_IDR_IDR11 ? 1 : 0);
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <ds18b20_ReadBit_11+0x54>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf14      	ite	ne
 800146e:	2301      	movne	r3, #1
 8001470:	2300      	moveq	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	71fb      	strb	r3, [r7, #7]
	DelayMicro(45);
 8001476:	202d      	movs	r0, #45	; 0x2d
 8001478:	f7ff ff48 	bl	800130c <DelayMicro>
  return bit;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010c00 	.word	0x40010c00

0800148c <ds18b20_ReadBit_10>:
uint8_t ds18b20_ReadBit_10(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR10;
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <ds18b20_ReadBit_10+0x54>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <ds18b20_ReadBit_10+0x54>)
 800149c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014a0:	60d3      	str	r3, [r2, #12]
  DelayMicro(2);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff ff32 	bl	800130c <DelayMicro>
	GPIOB->ODR |= GPIO_ODR_ODR10;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <ds18b20_ReadBit_10+0x54>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <ds18b20_ReadBit_10+0x54>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	60d3      	str	r3, [r2, #12]
	DelayMicro(13);
 80014b4:	200d      	movs	r0, #13
 80014b6:	f7ff ff29 	bl	800130c <DelayMicro>
	bit = (GPIOB->IDR & GPIO_IDR_IDR10 ? 1 : 0);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <ds18b20_ReadBit_10+0x54>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	71fb      	strb	r3, [r7, #7]
	DelayMicro(45);
 80014ce:	202d      	movs	r0, #45	; 0x2d
 80014d0:	f7ff ff1c 	bl	800130c <DelayMicro>
  return bit;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <ds18b20_ReadByte_11>:
//-----------------------------------------------
uint8_t ds18b20_ReadByte_11(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	e00d      	b.n	8001510 <ds18b20_ReadByte_11+0x2c>
  data += ds18b20_ReadBit_11() << i;
 80014f4:	f7ff ff9e 	bl	8001434 <ds18b20_ReadBit_11>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4413      	add	r3, r2
 8001508:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	3301      	adds	r3, #1
 800150e:	71bb      	strb	r3, [r7, #6]
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	2b07      	cmp	r3, #7
 8001514:	d9ee      	bls.n	80014f4 <ds18b20_ReadByte_11+0x10>
  return data;
 8001516:	79fb      	ldrb	r3, [r7, #7]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <ds18b20_ReadByte_10>:
uint8_t ds18b20_ReadByte_10(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	71bb      	strb	r3, [r7, #6]
 800152e:	e00d      	b.n	800154c <ds18b20_ReadByte_10+0x2c>
  data += ds18b20_ReadBit_10() << i;
 8001530:	f7ff ffac 	bl	800148c <ds18b20_ReadBit_10>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	b2da      	uxtb	r2, r3
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4413      	add	r3, r2
 8001544:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	3301      	adds	r3, #1
 800154a:	71bb      	strb	r3, [r7, #6]
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b07      	cmp	r3, #7
 8001550:	d9ee      	bls.n	8001530 <ds18b20_ReadByte_10+0x10>
  return data;
 8001552:	79fb      	ldrb	r3, [r7, #7]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <ds18b20_WriteBit_11>:
//-----------------------------------------------
void ds18b20_WriteBit_11(uint8_t bit)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <ds18b20_WriteBit_11+0x50>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <ds18b20_WriteBit_11+0x50>)
 800156c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001570:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 3 : 65);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <ds18b20_WriteBit_11+0x20>
 8001578:	2303      	movs	r3, #3
 800157a:	e000      	b.n	800157e <ds18b20_WriteBit_11+0x22>
 800157c:	2341      	movs	r3, #65	; 0x41
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fec4 	bl	800130c <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <ds18b20_WriteBit_11+0x50>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <ds18b20_WriteBit_11+0x50>)
 800158a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800158e:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 65 : 3);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <ds18b20_WriteBit_11+0x3e>
 8001596:	2341      	movs	r3, #65	; 0x41
 8001598:	e000      	b.n	800159c <ds18b20_WriteBit_11+0x40>
 800159a:	2303      	movs	r3, #3
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff feb5 	bl	800130c <DelayMicro>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <ds18b20_WriteBit_10>:
void ds18b20_WriteBit_10(uint8_t bit)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR10;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <ds18b20_WriteBit_10+0x50>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <ds18b20_WriteBit_10+0x50>)
 80015c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015c4:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 3 : 65);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <ds18b20_WriteBit_10+0x20>
 80015cc:	2303      	movs	r3, #3
 80015ce:	e000      	b.n	80015d2 <ds18b20_WriteBit_10+0x22>
 80015d0:	2341      	movs	r3, #65	; 0x41
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fe9a 	bl	800130c <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR10;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <ds18b20_WriteBit_10+0x50>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a08      	ldr	r2, [pc, #32]	; (8001600 <ds18b20_WriteBit_10+0x50>)
 80015de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e2:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 65 : 3);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <ds18b20_WriteBit_10+0x3e>
 80015ea:	2341      	movs	r3, #65	; 0x41
 80015ec:	e000      	b.n	80015f0 <ds18b20_WriteBit_10+0x40>
 80015ee:	2303      	movs	r3, #3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe8b 	bl	800130c <DelayMicro>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010c00 	.word	0x40010c00

08001604 <ds18b20_WriteByte_11>:
//-----------------------------------------------
void ds18b20_WriteByte_11(uint8_t dt)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e010      	b.n	8001636 <ds18b20_WriteByte_11+0x32>
  {
    ds18b20_WriteBit_11(dt >> i & 1);
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	fa42 f303 	asr.w	r3, r2, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff99 	bl	800155c <ds18b20_WriteBit_11>
    DelayMicro(5);
 800162a:	2005      	movs	r0, #5
 800162c:	f7ff fe6e 	bl	800130c <DelayMicro>
  for (uint8_t i = 0; i < 8; i++)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	3301      	adds	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b07      	cmp	r3, #7
 800163a:	d9eb      	bls.n	8001614 <ds18b20_WriteByte_11+0x10>
  }
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <ds18b20_WriteByte_10>:
void ds18b20_WriteByte_10(uint8_t dt)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e010      	b.n	8001676 <ds18b20_WriteByte_10+0x32>
  {
    ds18b20_WriteBit_10(dt >> i & 1);
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	fa42 f303 	asr.w	r3, r2, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffa3 	bl	80015b0 <ds18b20_WriteBit_10>
    DelayMicro(5);
 800166a:	2005      	movs	r0, #5
 800166c:	f7ff fe4e 	bl	800130c <DelayMicro>
  for (uint8_t i = 0; i < 8; i++)
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	3301      	adds	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b07      	cmp	r3, #7
 800167a:	d9eb      	bls.n	8001654 <ds18b20_WriteByte_10+0x10>
  }
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode, uint8_t *ROM)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
	if(ds18b20_Reset()) return 1;
 8001690:	f7ff fe8e 	bl	80013b0 <ds18b20_Reset>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <ds18b20_init+0x1a>
 800169a:	2301      	movs	r3, #1
 800169c:	e021      	b.n	80016e2 <ds18b20_init+0x5e>

	if(mode==SKIP_ROM){
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <ds18b20_init+0x2c>
		ds18b20_WriteByte_11(0xCC);
 80016a4:	20cc      	movs	r0, #204	; 0xcc
 80016a6:	f7ff ffad 	bl	8001604 <ds18b20_WriteByte_11>
		ds18b20_WriteByte_10(0xCC);//SKIP ROM
 80016aa:	20cc      	movs	r0, #204	; 0xcc
 80016ac:	f7ff ffca 	bl	8001644 <ds18b20_WriteByte_10>
//		for(int j=0;j<8;j++)
//			ds18b20_WriteByte(&ROM[j]); //SKIP ROM
//
//		vTaskDelay(1);
	}
	ds18b20_WriteByte_11(0x4E);//WRITE SCRATCHPAD
 80016b0:	204e      	movs	r0, #78	; 0x4e
 80016b2:	f7ff ffa7 	bl	8001604 <ds18b20_WriteByte_11>
	ds18b20_WriteByte_10(0x4E);//WRITE SCRATCHPAD
 80016b6:	204e      	movs	r0, #78	; 0x4e
 80016b8:	f7ff ffc4 	bl	8001644 <ds18b20_WriteByte_10>
	ds18b20_WriteByte_11(0x64);//TH REGISTER 100C
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f7ff ffa1 	bl	8001604 <ds18b20_WriteByte_11>
	ds18b20_WriteByte_10(0x64);//TH REGISTER 100C
 80016c2:	2064      	movs	r0, #100	; 0x64
 80016c4:	f7ff ffbe 	bl	8001644 <ds18b20_WriteByte_10>
	ds18b20_WriteByte_11(0x1E);//TL REGISTER - 30C
 80016c8:	201e      	movs	r0, #30
 80016ca:	f7ff ff9b 	bl	8001604 <ds18b20_WriteByte_11>
	ds18b20_WriteByte_10(0x1E);//TL REGISTER - 30C
 80016ce:	201e      	movs	r0, #30
 80016d0:	f7ff ffb8 	bl	8001644 <ds18b20_WriteByte_10>
	ds18b20_WriteByte_11(RESOLUTION_12BIT);//Resolution 12 bit
 80016d4:	207f      	movs	r0, #127	; 0x7f
 80016d6:	f7ff ff95 	bl	8001604 <ds18b20_WriteByte_11>
	ds18b20_WriteByte_10(RESOLUTION_12BIT);//Resolution 12 bit
 80016da:	207f      	movs	r0, #127	; 0x7f
 80016dc:	f7ff ffb2 	bl	8001644 <ds18b20_WriteByte_10>
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t *ROM)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	6039      	str	r1, [r7, #0]
 80016f4:	71fb      	strb	r3, [r7, #7]
  ds18b20_Reset();
 80016f6:	f7ff fe5b 	bl	80013b0 <ds18b20_Reset>
  if(mode==SKIP_ROM){
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <ds18b20_MeasureTemperCmd+0x22>
	  ds18b20_WriteByte_11(0xCC);//SKIP ROM
 8001700:	20cc      	movs	r0, #204	; 0xcc
 8001702:	f7ff ff7f 	bl	8001604 <ds18b20_WriteByte_11>
  	  ds18b20_WriteByte_10(0xCC);//SKIP ROM
 8001706:	20cc      	movs	r0, #204	; 0xcc
 8001708:	f7ff ff9c 	bl	8001644 <ds18b20_WriteByte_10>
//	  ds18b20_WriteByte(0x55); // MATCH ROM
//	  for(int j=0;j<8;j++)
//		  ds18b20_WriteByte(ROM[j]); //SKIP ROM
  }
  //CONVERT T
  ds18b20_WriteByte_11(0x44);
 800170c:	2044      	movs	r0, #68	; 0x44
 800170e:	f7ff ff79 	bl	8001604 <ds18b20_WriteByte_11>
  ds18b20_WriteByte_10(0x44);
 8001712:	2044      	movs	r0, #68	; 0x44
 8001714:	f7ff ff96 	bl	8001644 <ds18b20_WriteByte_10>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data1,uint8_t *Data2, uint8_t *ROM)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  ds18b20_Reset();
 8001730:	f7ff fe3e 	bl	80013b0 <ds18b20_Reset>

  if(mode==SKIP_ROM){
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d105      	bne.n	8001746 <ds18b20_ReadStratcpad+0x26>
	  ds18b20_WriteByte_11(0xCC); //SKIP ROM
 800173a:	20cc      	movs	r0, #204	; 0xcc
 800173c:	f7ff ff62 	bl	8001604 <ds18b20_WriteByte_11>
	  ds18b20_WriteByte_10(0xCC);
 8001740:	20cc      	movs	r0, #204	; 0xcc
 8001742:	f7ff ff7f 	bl	8001644 <ds18b20_WriteByte_10>
//	  for(int j=0;j<8;j++)
//		  ds18b20_WriteByte(ROM[j]); //SKIP ROM
//	  vTaskDelay(1);
  }
  //READ SCRATCHPAD
  ds18b20_WriteByte_11(0xBE);
 8001746:	20be      	movs	r0, #190	; 0xbe
 8001748:	f7ff ff5c 	bl	8001604 <ds18b20_WriteByte_11>
  ds18b20_WriteByte_10(0xBE);
 800174c:	20be      	movs	r0, #190	; 0xbe
 800174e:	f7ff ff79 	bl	8001644 <ds18b20_WriteByte_10>
  for(i=0;i<8;i++)
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
 8001756:	e010      	b.n	800177a <ds18b20_ReadStratcpad+0x5a>
  {
    Data1[i] = ds18b20_ReadByte_11();
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	18d4      	adds	r4, r2, r3
 800175e:	f7ff fec1 	bl	80014e4 <ds18b20_ReadByte_11>
 8001762:	4603      	mov	r3, r0
 8001764:	7023      	strb	r3, [r4, #0]
    Data2[i] = ds18b20_ReadByte_10();
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	18d4      	adds	r4, r2, r3
 800176c:	f7ff fed8 	bl	8001520 <ds18b20_ReadByte_10>
 8001770:	4603      	mov	r3, r0
 8001772:	7023      	strb	r3, [r4, #0]
  for(i=0;i<8;i++)
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	3301      	adds	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b07      	cmp	r3, #7
 800177e:	d9eb      	bls.n	8001758 <ds18b20_ReadStratcpad+0x38>
  }
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}

08001788 <ADC_Mode_Init>:

extern uint16_t valueADC[5];



void ADC_Mode_Init(void){
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_CONT;
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <ADC_Mode_Init+0x144>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <ADC_Mode_Init+0x144>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	6093      	str	r3, [r2, #8]
	//ADC1->CR2 &= ~ADC_CR2_CONT;
	ADC1->CR2 |= ADC_CR2_EXTSEL;
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <ADC_Mode_Init+0x144>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <ADC_Mode_Init+0x144>)
 800179e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80017a2:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTTRIG;
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <ADC_Mode_Init+0x144>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a48      	ldr	r2, [pc, #288]	; (80018cc <ADC_Mode_Init+0x144>)
 80017aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017ae:	6093      	str	r3, [r2, #8]

	ADC1->CR1 |= ADC_CR1_SCAN;
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <ADC_Mode_Init+0x144>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a45      	ldr	r2, [pc, #276]	; (80018cc <ADC_Mode_Init+0x144>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6053      	str	r3, [r2, #4]

	ADC1->SQR1 &= ~ADC_SQR1_L;
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <ADC_Mode_Init+0x144>)
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	4a42      	ldr	r2, [pc, #264]	; (80018cc <ADC_Mode_Init+0x144>)
 80017c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80017c6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_2 ;  /// 0100 - 5 измерения
 80017c8:	4b40      	ldr	r3, [pc, #256]	; (80018cc <ADC_Mode_Init+0x144>)
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <ADC_Mode_Init+0x144>)
 80017ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d2:	62d3      	str	r3, [r2, #44]	; 0x2c

	//обнуление
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP0; //  0 канал
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <ADC_Mode_Init+0x144>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a3c      	ldr	r2, [pc, #240]	; (80018cc <ADC_Mode_Init+0x144>)
 80017da:	f023 0307 	bic.w	r3, r3, #7
 80017de:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP1; //  1 канал
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <ADC_Mode_Init+0x144>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4a39      	ldr	r2, [pc, #228]	; (80018cc <ADC_Mode_Init+0x144>)
 80017e6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80017ea:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP2; //  2 канал
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <ADC_Mode_Init+0x144>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a36      	ldr	r2, [pc, #216]	; (80018cc <ADC_Mode_Init+0x144>)
 80017f2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80017f6:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP3; //  3 канал
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <ADC_Mode_Init+0x144>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a33      	ldr	r2, [pc, #204]	; (80018cc <ADC_Mode_Init+0x144>)
 80017fe:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001802:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP4; //  4 канал
 8001804:	4b31      	ldr	r3, [pc, #196]	; (80018cc <ADC_Mode_Init+0x144>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <ADC_Mode_Init+0x144>)
 800180a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800180e:	6113      	str	r3, [r2, #16]

	ADC1->SMPR2 |= ADC_SMPR2_SMP0 ; // 111 - 289.5 циклов
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <ADC_Mode_Init+0x144>)
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <ADC_Mode_Init+0x144>)
 8001816:	f043 0307 	orr.w	r3, r3, #7
 800181a:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP1 ;
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <ADC_Mode_Init+0x144>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <ADC_Mode_Init+0x144>)
 8001822:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001826:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP2 ;
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <ADC_Mode_Init+0x144>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <ADC_Mode_Init+0x144>)
 800182e:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8001832:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP3 ;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <ADC_Mode_Init+0x144>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a24      	ldr	r2, [pc, #144]	; (80018cc <ADC_Mode_Init+0x144>)
 800183a:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 800183e:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP4 ;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <ADC_Mode_Init+0x144>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <ADC_Mode_Init+0x144>)
 8001846:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800184a:	6113      	str	r3, [r2, #16]

	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <ADC_Mode_Init+0x144>)
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <ADC_Mode_Init+0x144>)
 8001852:	f023 031f 	bic.w	r3, r3, #31
 8001856:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <ADC_Mode_Init+0x144>)
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <ADC_Mode_Init+0x144>)
 800185e:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8001862:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <ADC_Mode_Init+0x144>)
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <ADC_Mode_Init+0x144>)
 800186a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800186e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ4;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <ADC_Mode_Init+0x144>)
 8001872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001874:	4a15      	ldr	r2, [pc, #84]	; (80018cc <ADC_Mode_Init+0x144>)
 8001876:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 800187a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ5;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <ADC_Mode_Init+0x144>)
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <ADC_Mode_Init+0x144>)
 8001882:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8001886:	6353      	str	r3, [r2, #52]	; 0x34


	ADC1->SQR3 &= ~ADC_SQR3_SQ1;  //00  //PA0
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <ADC_Mode_Init+0x144>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <ADC_Mode_Init+0x144>)
 800188e:	f023 031f 	bic.w	r3, r3, #31
 8001892:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |= ADC_SQR3_SQ2_0; //01
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <ADC_Mode_Init+0x144>)
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <ADC_Mode_Init+0x144>)
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |=ADC_SQR3_SQ3_1 ; // 10
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <ADC_Mode_Init+0x144>)
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	4a09      	ldr	r2, [pc, #36]	; (80018cc <ADC_Mode_Init+0x144>)
 80018a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018aa:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |= ADC_SQR3_SQ4_0 | ADC_SQR3_SQ4_1 ; // 11
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <ADC_Mode_Init+0x144>)
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <ADC_Mode_Init+0x144>)
 80018b2:	f443 33c0 	orr.w	r3, r3, #98304	; 0x18000
 80018b6:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |= ADC_SQR3_SQ5_2 ; // 100
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <ADC_Mode_Init+0x144>)
 80018ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <ADC_Mode_Init+0x144>)
 80018be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c2:	6353      	str	r3, [r2, #52]	; 0x34


}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40012400 	.word	0x40012400

080018d0 <ADC_POWER>:

void ADC_POWER(uint8_t  pwrmode){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	memset(&valueADC[0],0,sizeof(valueADC));
 80018da:	220a      	movs	r2, #10
 80018dc:	2100      	movs	r1, #0
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <ADC_POWER+0x34>)
 80018e0:	f000 fca9 	bl	8002236 <memset>
	if (pwrmode){
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <ADC_POWER+0x20>
		ADC_Calibrate();
 80018ea:	f000 f80f 	bl	800190c <ADC_Calibrate>
	}
	else
		ADC1->CR2 &= ~ADC_CR2_ADON;
}
 80018ee:	e005      	b.n	80018fc <ADC_POWER+0x2c>
		ADC1->CR2 &= ~ADC_CR2_ADON;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <ADC_POWER+0x38>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <ADC_POWER+0x38>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6093      	str	r3, [r2, #8]
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000e0c 	.word	0x20000e0c
 8001908:	40012400 	.word	0x40012400

0800190c <ADC_Calibrate>:

void ADC_Calibrate(void){
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_ADON;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <ADC_Calibrate+0x44>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <ADC_Calibrate+0x44>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_RSTCAL;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <ADC_Calibrate+0x44>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <ADC_Calibrate+0x44>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_RSTCAL);
 8001928:	bf00      	nop
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <ADC_Calibrate+0x44>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b08      	cmp	r3, #8
 8001934:	d0f9      	beq.n	800192a <ADC_Calibrate+0x1e>
	ADC1->CR2 |= ADC_CR2_CAL;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <ADC_Calibrate+0x44>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <ADC_Calibrate+0x44>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_CAL); // пока там 1 идет калибровка по окончанию идет сброс бита
 8001942:	bf00      	nop
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <ADC_Calibrate+0x44>)
 8001946:	689b      	ldr	r3, [r3, #8]

}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40012400 	.word	0x40012400

08001954 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <ADC_GPIO_Init+0xa8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a27      	ldr	r2, [pc, #156]	; (80019fc <ADC_GPIO_Init+0xa8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <ADC_GPIO_Init+0xa8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a24      	ldr	r2, [pc, #144]	; (80019fc <ADC_GPIO_Init+0xa8>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <ADC_GPIO_Init+0xa8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <ADC_GPIO_Init+0xa8>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
	// ADC ports
	GPIOA->CRL &= ~GPIO_CRL_MODE0; // PA0   - input
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <ADC_GPIO_Init+0xac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <ADC_GPIO_Init+0xac>)
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF0;  //PA0    - analog mode
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <ADC_GPIO_Init+0xac>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <ADC_GPIO_Init+0xac>)
 800198e:	f023 030c 	bic.w	r3, r3, #12
 8001992:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE1; // PA1   - input
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <ADC_GPIO_Init+0xac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <ADC_GPIO_Init+0xac>)
 800199a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800199e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF1;  //PA1    - analog mode
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019aa:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE2; // PA2  - input
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF2;  //PA2    - analog mode
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019c2:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE3; // PA3   - input
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ce:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF3;  //PA3    - analog mode
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019da:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE4; // PA4   - input
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019e6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF4;  //PA4    - analog mode
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <ADC_GPIO_Init+0xac>)
 80019ee:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80019f2:	6013      	str	r3, [r2, #0]



}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800

08001a04 <ADC_DMA_Init>:

void ADC_DMA_Init(void){
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	//--------------------------------------------------------------------------------
		//     DMA   ADC1

		RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <ADC_DMA_Init+0x8c>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <ADC_DMA_Init+0x8c>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6153      	str	r3, [r2, #20]
		DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a16:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <ADC_DMA_Init+0x94>)
 8001a18:	609a      	str	r2, [r3, #8]
		DMA1_Channel1->CMAR = (uint32_t) &valueADC[0];
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <ADC_DMA_Init+0x98>)
 8001a1e:	60da      	str	r2, [r3, #12]
		DMA1_Channel1->CNDTR = 5;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a22:	2205      	movs	r2, #5
 8001a24:	605a      	str	r2, [r3, #4]
		DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a30:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a48:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a5c:	f043 0320 	orr.w	r3, r3, #32
 8001a60:	6013      	str	r3, [r2, #0]
		//DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
		DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a68:	f023 0310 	bic.w	r3, r3, #16
 8001a6c:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <ADC_DMA_Init+0x90>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6013      	str	r3, [r2, #0]
		ADC1->CR2 |= ADC_CR2_DMA;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <ADC_DMA_Init+0x9c>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <ADC_DMA_Init+0x9c>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6093      	str	r3, [r2, #8]



}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40020008 	.word	0x40020008
 8001a98:	4001244c 	.word	0x4001244c
 8001a9c:	20000e0c 	.word	0x20000e0c
 8001aa0:	40012400 	.word	0x40012400

08001aa4 <GPIO_Rele_Init>:
	GPIOB->CRH &= ~GPIO_CRH_CNF13;  //   - GP out PP



}
void GPIO_Rele_Init(void){
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <GPIO_Rele_Init+0x30>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <GPIO_Rele_Init+0x30>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	6193      	str	r3, [r2, #24]
	GPIOB->CRH |= GPIO_CRH_MODE12; //    - output
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <GPIO_Rele_Init+0x34>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <GPIO_Rele_Init+0x34>)
 8001aba:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001abe:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_CNF12;  //   - GP out PP
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <GPIO_Rele_Init+0x34>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <GPIO_Rele_Init+0x34>)
 8001ac6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001aca:	6053      	str	r3, [r2, #4]




}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010c00 	.word	0x40010c00

08001adc <RCC_PLL_Init>:
#include "defines.h"
#include "libRCC.h"

void RCC_PLL_Init(void){
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	 // настройка HSE PLL SYSCLK
		RCC->CR |= RCC_CR_HSEON;
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a35      	ldr	r2, [pc, #212]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
		while (!  (RCC->CR & RCC_CR_HSERDY)   );
 8001aec:	bf00      	nop
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f9      	beq.n	8001aee <RCC_PLL_Init+0x12>
		FLASH ->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <RCC_PLL_Init+0xe4>)
 8001afc:	2217      	movs	r2, #23
 8001afe:	601a      	str	r2, [r3, #0]
		RCC->CFGR &= ~RCC_CFGR_HPRE;  // 0000   /1
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0a:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;//100 - /2
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a2a      	ldr	r2, [pc, #168]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~RCC_CFGR_PPRE2; //000  - /1
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b1e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b22:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  RCC_CFGR_ADCPRE_DIV8;
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b2e:	6053      	str	r3, [r2, #4]

		RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b42:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001b46:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b52:	6053      	str	r3, [r2, #4]

		RCC->CFGR |= RCC_CFGR_PLLSRC;
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b6e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001b72:	6053      	str	r3, [r2, #4]

		RCC->CR |= RCC_CR_PLLON;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]
		while (!  (RCC->CR & RCC_CR_PLLRDY)   );
 8001b80:	bf00      	nop
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f9      	beq.n	8001b82 <RCC_PLL_Init+0xa6>

		RCC->CFGR &= ~RCC_CFGR_SW;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b94:	f023 0303 	bic.w	r3, r3, #3
 8001b98:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  RCC_CFGR_SW_PLL;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6053      	str	r3, [r2, #4]

		//RCC->CFGR |= RCC_CFGR_MCOSEL_PLL_DIV2;


		while (  (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1   ) ;
 8001ba6:	bf00      	nop
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <RCC_PLL_Init+0xe0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d1f9      	bne.n	8001ba8 <RCC_PLL_Init+0xcc>
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <vTask1Wire>:
extern uint16_t valueADC[5];
char strbuffer[10];



void vTask1Wire (void *argument){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	uint8_t dt1[8];
	uint16_t raw_temper1;
	uint8_t dt2[8];
	uint16_t raw_temper2;

	port_init();
 8001bcc:	f7ff fbbc 	bl	8001348 <port_init>
	ds18b20_init(SKIP_ROM,0);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fd56 	bl	8001684 <ds18b20_init>

while (1){
	ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fd85 	bl	80016ea <ds18b20_MeasureTemperCmd>
	vTaskDelay(1300);
 8001be0:	f240 5014 	movw	r0, #1300	; 0x514
 8001be4:	f7fe fc9e 	bl	8000524 <vTaskDelay>
	ds18b20_ReadStratcpad(SKIP_ROM, dt1,dt2, 0);
 8001be8:	f107 020c 	add.w	r2, r7, #12
 8001bec:	f107 0114 	add.w	r1, r7, #20
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff fd94 	bl	8001720 <ds18b20_ReadStratcpad>
	raw_temper1 = ((uint16_t)dt1[1]<<8)|dt1[0];
 8001bf8:	7d7b      	ldrb	r3, [r7, #21]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	7d3b      	ldrb	r3, [r7, #20]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	83fb      	strh	r3, [r7, #30]
	raw_temper2 = ((uint16_t)dt2[1]<<8)|dt2[0];
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	7b3b      	ldrb	r3, [r7, #12]
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	83bb      	strh	r3, [r7, #28]

	sprintf(strbuffer, "%u",raw_temper1);
 8001c18:	8bfb      	ldrh	r3, [r7, #30]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <vTask1Wire+0x94>)
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <vTask1Wire+0x98>)
 8001c20:	f000 fb12 	bl	8002248 <siprintf>
	USART1SendStr("Temp1      =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001c24:	480e      	ldr	r0, [pc, #56]	; (8001c60 <vTask1Wire+0x9c>)
 8001c26:	f000 f965 	bl	8001ef4 <USART1SendStr>
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <vTask1Wire+0x98>)
 8001c2c:	f000 f962 	bl	8001ef4 <USART1SendStr>
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <vTask1Wire+0xa0>)
 8001c32:	f000 f95f 	bl	8001ef4 <USART1SendStr>
	sprintf(strbuffer, "%u",raw_temper2);
 8001c36:	8bbb      	ldrh	r3, [r7, #28]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4907      	ldr	r1, [pc, #28]	; (8001c58 <vTask1Wire+0x94>)
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <vTask1Wire+0x98>)
 8001c3e:	f000 fb03 	bl	8002248 <siprintf>
	USART1SendStr("Temp2      =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <vTask1Wire+0xa4>)
 8001c44:	f000 f956 	bl	8001ef4 <USART1SendStr>
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <vTask1Wire+0x98>)
 8001c4a:	f000 f953 	bl	8001ef4 <USART1SendStr>
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <vTask1Wire+0xa0>)
 8001c50:	f000 f950 	bl	8001ef4 <USART1SendStr>
	ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 8001c54:	e7c0      	b.n	8001bd8 <vTask1Wire+0x14>
 8001c56:	bf00      	nop
 8001c58:	08002ab8 	.word	0x08002ab8
 8001c5c:	20000dec 	.word	0x20000dec
 8001c60:	08002abc 	.word	0x08002abc
 8001c64:	08002acc 	.word	0x08002acc
 8001c68:	08002ad0 	.word	0x08002ad0

08001c6c <vTaskBlink>:

}

}

void vTaskBlink( void *argument){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	//LED C13
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <vTaskBlink+0x54>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <vTaskBlink+0x54>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= GPIO_CRH_MODE13; // PC13   - output
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <vTaskBlink+0x58>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <vTaskBlink+0x58>)
 8001c86:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001c8a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF13;  //PC13   - GP out PP
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <vTaskBlink+0x58>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <vTaskBlink+0x58>)
 8001c92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c96:	6053      	str	r3, [r2, #4]

	while(1){
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <vTaskBlink+0x58>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <vTaskBlink+0x58>)
 8001c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca2:	6113      	str	r3, [r2, #16]
	vTaskDelay(900);
 8001ca4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001ca8:	f7fe fc3c 	bl	8000524 <vTaskDelay>
	GPIOC->BSRR |= GPIO_BSRR_BR13;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <vTaskBlink+0x58>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <vTaskBlink+0x58>)
 8001cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cb6:	6113      	str	r3, [r2, #16]
	vTaskDelay(100);
 8001cb8:	2064      	movs	r0, #100	; 0x64
 8001cba:	f7fe fc33 	bl	8000524 <vTaskDelay>
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8001cbe:	e7eb      	b.n	8001c98 <vTaskBlink+0x2c>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40011000 	.word	0x40011000

08001cc8 <vTaskADCConvert>:

	}
}

void vTaskADCConvert (void *argument){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	ADC_GPIO_Init();
 8001cd0:	f7ff fe40 	bl	8001954 <ADC_GPIO_Init>
	ADC_Mode_Init();
 8001cd4:	f7ff fd58 	bl	8001788 <ADC_Mode_Init>
	ADC_POWER(ON);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff fdf9 	bl	80018d0 <ADC_POWER>
	ADC_DMA_Init();
 8001cde:	f7ff fe91 	bl	8001a04 <ADC_DMA_Init>

	USART1_GPIO_Init();
 8001ce2:	f000 f897 	bl	8001e14 <USART1_GPIO_Init>
	USART1_Mode_Init();
 8001ce6:	f000 f8c9 	bl	8001e7c <USART1_Mode_Init>

	while (1){
		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <vTaskADCConvert+0xe8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4a30      	ldr	r2, [pc, #192]	; (8001db0 <vTaskADCConvert+0xe8>)
 8001cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf4:	6093      	str	r3, [r2, #8]
		while (  (DMA1->ISR & DMA_ISR_TCIF1) == 0  );
 8001cf6:	bf00      	nop
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <vTaskADCConvert+0xec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f9      	beq.n	8001cf8 <vTaskADCConvert+0x30>


		sprintf(strbuffer, "%u",valueADC[0]);
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <vTaskADCConvert+0xf0>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	492c      	ldr	r1, [pc, #176]	; (8001dbc <vTaskADCConvert+0xf4>)
 8001d0c:	482c      	ldr	r0, [pc, #176]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d0e:	f000 fa9b 	bl	8002248 <siprintf>
		USART1SendStr("BatLevel      =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001d12:	482c      	ldr	r0, [pc, #176]	; (8001dc4 <vTaskADCConvert+0xfc>)
 8001d14:	f000 f8ee 	bl	8001ef4 <USART1SendStr>
 8001d18:	4829      	ldr	r0, [pc, #164]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d1a:	f000 f8eb 	bl	8001ef4 <USART1SendStr>
 8001d1e:	482a      	ldr	r0, [pc, #168]	; (8001dc8 <vTaskADCConvert+0x100>)
 8001d20:	f000 f8e8 	bl	8001ef4 <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[1]);
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <vTaskADCConvert+0xf0>)
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <vTaskADCConvert+0xf4>)
 8001d2c:	4824      	ldr	r0, [pc, #144]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d2e:	f000 fa8b 	bl	8002248 <siprintf>
		USART1SendStr("CurrentLevel  =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <vTaskADCConvert+0x104>)
 8001d34:	f000 f8de 	bl	8001ef4 <USART1SendStr>
 8001d38:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d3a:	f000 f8db 	bl	8001ef4 <USART1SendStr>
 8001d3e:	4822      	ldr	r0, [pc, #136]	; (8001dc8 <vTaskADCConvert+0x100>)
 8001d40:	f000 f8d8 	bl	8001ef4 <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[2]);
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <vTaskADCConvert+0xf0>)
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	491c      	ldr	r1, [pc, #112]	; (8001dbc <vTaskADCConvert+0xf4>)
 8001d4c:	481c      	ldr	r0, [pc, #112]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d4e:	f000 fa7b 	bl	8002248 <siprintf>
		USART1SendStr("LED1          =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001d52:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <vTaskADCConvert+0x108>)
 8001d54:	f000 f8ce 	bl	8001ef4 <USART1SendStr>
 8001d58:	4819      	ldr	r0, [pc, #100]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d5a:	f000 f8cb 	bl	8001ef4 <USART1SendStr>
 8001d5e:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <vTaskADCConvert+0x100>)
 8001d60:	f000 f8c8 	bl	8001ef4 <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[3]);
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <vTaskADCConvert+0xf0>)
 8001d66:	88db      	ldrh	r3, [r3, #6]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <vTaskADCConvert+0xf4>)
 8001d6c:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d6e:	f000 fa6b 	bl	8002248 <siprintf>
		USART1SendStr("LED2          =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001d72:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <vTaskADCConvert+0x10c>)
 8001d74:	f000 f8be 	bl	8001ef4 <USART1SendStr>
 8001d78:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d7a:	f000 f8bb 	bl	8001ef4 <USART1SendStr>
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <vTaskADCConvert+0x100>)
 8001d80:	f000 f8b8 	bl	8001ef4 <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[4]);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <vTaskADCConvert+0xf0>)
 8001d86:	891b      	ldrh	r3, [r3, #8]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <vTaskADCConvert+0xf4>)
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d8e:	f000 fa5b 	bl	8002248 <siprintf>
		USART1SendStr("LED3          =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <vTaskADCConvert+0x110>)
 8001d94:	f000 f8ae 	bl	8001ef4 <USART1SendStr>
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <vTaskADCConvert+0xf8>)
 8001d9a:	f000 f8ab 	bl	8001ef4 <USART1SendStr>
 8001d9e:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <vTaskADCConvert+0x100>)
 8001da0:	f000 f8a8 	bl	8001ef4 <USART1SendStr>

		vTaskDelay(1000);
 8001da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da8:	f7fe fbbc 	bl	8000524 <vTaskDelay>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 8001dac:	e79d      	b.n	8001cea <vTaskADCConvert+0x22>
 8001dae:	bf00      	nop
 8001db0:	40012400 	.word	0x40012400
 8001db4:	40020000 	.word	0x40020000
 8001db8:	20000e0c 	.word	0x20000e0c
 8001dbc:	08002ab8 	.word	0x08002ab8
 8001dc0:	20000dec 	.word	0x20000dec
 8001dc4:	08002ae0 	.word	0x08002ae0
 8001dc8:	08002acc 	.word	0x08002acc
 8001dcc:	08002af0 	.word	0x08002af0
 8001dd0:	08002b00 	.word	0x08002b00
 8001dd4:	08002b10 	.word	0x08002b10
 8001dd8:	08002b20 	.word	0x08002b20

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4906      	ldr	r1, [pc, #24]	; (8001e10 <__NVIC_EnableIRQ+0x34>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <USART1_GPIO_Init>:

}



void USART1_GPIO_Init(void){
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <USART1_GPIO_Init+0x60>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <USART1_GPIO_Init+0x60>)
 8001e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e22:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <USART1_GPIO_Init+0x60>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <USART1_GPIO_Init+0x60>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <USART1_GPIO_Init+0x60>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <USART1_GPIO_Init+0x60>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
	// UART ports
	GPIOA->CRH |= GPIO_CRH_MODE9; // PA9    - output      TX
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e42:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e46:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1;  //PA9   - GP out PP   TX
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e52:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~ GPIO_CRH_MODE10; // PA10  - input                     RX
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;  //PA10  - Alternative input float   RX
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <USART1_GPIO_Init+0x64>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6053      	str	r3, [r2, #4]

}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010800 	.word	0x40010800

08001e7c <USART1_Mode_Init>:


void USART1_Mode_Init(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

	USART1->BRR =  0x271; // 625    -- 115200 72MHz
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001e82:	f240 2271 	movw	r2, #625	; 0x271
 8001e86:	609a      	str	r2, [r3, #8]

	USART1->CR1 |= USART_CR1_UE;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001e8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e92:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TE;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RE;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RXNEIE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <USART1_Mode_Init+0x48>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 8001eb8:	2025      	movs	r0, #37	; 0x25
 8001eba:	f7ff ff8f 	bl	8001ddc <__NVIC_EnableIRQ>



}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40013800 	.word	0x40013800

08001ec8 <USART1SendChar>:
void USART1SendByte(uint8_t b){
	while (! (USART1->SR & USART_SR_TC));
	USART1->DR = b;

}
void USART1SendChar(char symb){
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
	while (! (USART1->SR & USART_SR_TC));
 8001ed2:	bf00      	nop
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <USART1SendChar+0x28>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f9      	beq.n	8001ed4 <USART1SendChar+0xc>
	USART1->DR = symb;
 8001ee0:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <USART1SendChar+0x28>)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	6053      	str	r3, [r2, #4]

}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40013800 	.word	0x40013800

08001ef4 <USART1SendStr>:
void USART1SendStr(char* str){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
	while (str[i]){
 8001f00:	e009      	b.n	8001f16 <USART1SendStr+0x22>
		USART1SendChar(str[i++]);
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	73fa      	strb	r2, [r7, #15]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ffd9 	bl	8001ec8 <USART1SendChar>
	while (str[i]){
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ef      	bne.n	8001f02 <USART1SendStr+0xe>
	}

}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <main>:

uint8_t newCommandFlag=0;



int main (void){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af02      	add	r7, sp, #8


	RCC_PLL_Init();
 8001f32:	f7ff fdd3 	bl	8001adc <RCC_PLL_Init>
	GPIO_Rele_Init();
 8001f36:	f7ff fdb5 	bl	8001aa4 <GPIO_Rele_Init>



	xTaskCreate(vTaskBlink, "Led Blink 13", 32, NULL, 3, NULL);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	2303      	movs	r3, #3
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	2220      	movs	r2, #32
 8001f46:	490d      	ldr	r1, [pc, #52]	; (8001f7c <main+0x50>)
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <main+0x54>)
 8001f4a:	f7fe f9c2 	bl	80002d2 <xTaskCreate>
	xTaskCreate(vTaskADCConvert, "ADC ", 128, NULL, 1, NULL);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2301      	movs	r3, #1
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	490a      	ldr	r1, [pc, #40]	; (8001f84 <main+0x58>)
 8001f5c:	480a      	ldr	r0, [pc, #40]	; (8001f88 <main+0x5c>)
 8001f5e:	f7fe f9b8 	bl	80002d2 <xTaskCreate>
	xTaskCreate(vTask1Wire, "Temp", 128, NULL, 2, NULL);
 8001f62:	2300      	movs	r3, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2302      	movs	r3, #2
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	4907      	ldr	r1, [pc, #28]	; (8001f8c <main+0x60>)
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <main+0x64>)
 8001f72:	f7fe f9ae 	bl	80002d2 <xTaskCreate>


	vTaskStartScheduler();
 8001f76:	f7fe fb09 	bl	800058c <vTaskStartScheduler>

	while (1){
 8001f7a:	e7fe      	b.n	8001f7a <main+0x4e>
 8001f7c:	08002be8 	.word	0x08002be8
 8001f80:	08001c6d 	.word	0x08001c6d
 8001f84:	08002bf8 	.word	0x08002bf8
 8001f88:	08001cc9 	.word	0x08001cc9
 8001f8c:	08002c00 	.word	0x08002c00
 8001f90:	08001bc5 	.word	0x08001bc5

08001f94 <USART1_IRQHandler>:

}



void USART1_IRQHandler(){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0

	if (USART1->SR & USART_SR_RXNE)
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <USART1_IRQHandler+0xc4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d053      	beq.n	800204e <USART1_IRQHandler+0xba>
	{
		data=USART1->DR;
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <USART1_IRQHandler+0xc4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <USART1_IRQHandler+0xc8>)
 8001fae:	701a      	strb	r2, [r3, #0]
		if (data=='\r' || data=='\n' || data==0 || indexC==sizeof(commandStrBuf)-1)
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <USART1_IRQHandler+0xc8>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b0d      	cmp	r3, #13
 8001fb6:	d00b      	beq.n	8001fd0 <USART1_IRQHandler+0x3c>
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <USART1_IRQHandler+0xc8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b0a      	cmp	r3, #10
 8001fbe:	d007      	beq.n	8001fd0 <USART1_IRQHandler+0x3c>
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <USART1_IRQHandler+0xc8>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <USART1_IRQHandler+0x3c>
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <USART1_IRQHandler+0xcc>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b13      	cmp	r3, #19
 8001fce:	d12d      	bne.n	800202c <USART1_IRQHandler+0x98>
		{
			if (!newCommandFlag){
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <USART1_IRQHandler+0xd0>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11d      	bne.n	8002014 <USART1_IRQHandler+0x80>
				int i=0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
				memset(commandStr,0,sizeof(commandStr));
 8001fdc:	2214      	movs	r2, #20
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4821      	ldr	r0, [pc, #132]	; (8002068 <USART1_IRQHandler+0xd4>)
 8001fe2:	f000 f928 	bl	8002236 <memset>
				while(commandStrBuf[i]){
 8001fe6:	e00b      	b.n	8002000 <USART1_IRQHandler+0x6c>
					commandStr[i]=commandStrBuf[i];
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <USART1_IRQHandler+0xd8>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	7819      	ldrb	r1, [r3, #0]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <USART1_IRQHandler+0xd4>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
					i++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
				while(commandStrBuf[i]){
 8002000:	4a1a      	ldr	r2, [pc, #104]	; (800206c <USART1_IRQHandler+0xd8>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ed      	bne.n	8001fe8 <USART1_IRQHandler+0x54>
				}
				newCommandFlag=1;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <USART1_IRQHandler+0xd0>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <USART1_IRQHandler+0x86>
			}
			else{
				USART1SendStr("---REPEAT---");
 8002014:	4816      	ldr	r0, [pc, #88]	; (8002070 <USART1_IRQHandler+0xdc>)
 8002016:	f7ff ff6d 	bl	8001ef4 <USART1SendStr>
			}
			memset(commandStrBuf,0,sizeof(commandStrBuf));
 800201a:	2214      	movs	r2, #20
 800201c:	2100      	movs	r1, #0
 800201e:	4813      	ldr	r0, [pc, #76]	; (800206c <USART1_IRQHandler+0xd8>)
 8002020:	f000 f909 	bl	8002236 <memset>
			indexC=0;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <USART1_IRQHandler+0xcc>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e00a      	b.n	8002042 <USART1_IRQHandler+0xae>
		}
		else {
			commandStrBuf[indexC++]=data;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <USART1_IRQHandler+0xcc>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	b2d1      	uxtb	r1, r2
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <USART1_IRQHandler+0xcc>)
 8002036:	7011      	strb	r1, [r2, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <USART1_IRQHandler+0xc8>)
 800203c:	7819      	ldrb	r1, [r3, #0]
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <USART1_IRQHandler+0xd8>)
 8002040:	5499      	strb	r1, [r3, r2]
		}
		USART1->SR &= ~USART_SR_RXNE;
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <USART1_IRQHandler+0xc4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <USART1_IRQHandler+0xc4>)
 8002048:	f023 0320 	bic.w	r3, r3, #32
 800204c:	6013      	str	r3, [r2, #0]
	}
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40013800 	.word	0x40013800
 800205c:	20000e16 	.word	0x20000e16
 8002060:	20000dd8 	.word	0x20000dd8
 8002064:	20000dd9 	.word	0x20000dd9
 8002068:	20000df8 	.word	0x20000df8
 800206c:	20000e18 	.word	0x20000e18
 8002070:	08002c08 	.word	0x08002c08

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <HardFault_Handler+0x4>

08002086 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <BusFault_Handler+0x4>

08002092 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <UsageFault_Handler+0x4>

08002098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a8:	f7fe f852 	bl	8000150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020ac:	f7fe fd2c 	bl	8000b08 <xTaskGetSchedulerState>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d001      	beq.n	80020ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020b6:	f7fe ff0f 	bl	8000ed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <_sbrk+0x50>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x16>
		heap_end = &end;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <_sbrk+0x50>)
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <_sbrk+0x54>)
 80020d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <_sbrk+0x50>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <_sbrk+0x50>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	466a      	mov	r2, sp
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d907      	bls.n	80020fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ea:	f000 f86f 	bl	80021cc <__errno>
 80020ee:	4602      	mov	r2, r0
 80020f0:	230c      	movs	r3, #12
 80020f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f8:	e006      	b.n	8002108 <_sbrk+0x48>
	}

	heap_end += incr;
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <_sbrk+0x50>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a03      	ldr	r2, [pc, #12]	; (8002110 <_sbrk+0x50>)
 8002104:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000ddc 	.word	0x20000ddc
 8002114:	20000e30 	.word	0x20000e30

08002118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <SystemInit+0x5c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <SystemInit+0x5c>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <SystemInit+0x5c>)
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4911      	ldr	r1, [pc, #68]	; (8002174 <SystemInit+0x5c>)
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <SystemInit+0x60>)
 8002130:	4013      	ands	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <SystemInit+0x5c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <SystemInit+0x5c>)
 800213a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <SystemInit+0x5c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <SystemInit+0x5c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <SystemInit+0x5c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <SystemInit+0x5c>)
 8002156:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800215a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SystemInit+0x5c>)
 800215e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002162:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <SystemInit+0x64>)
 8002166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216a:	609a      	str	r2, [r3, #8]
#endif 
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40021000 	.word	0x40021000
 8002178:	f8ff0000 	.word	0xf8ff0000
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002180:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002182:	e003      	b.n	800218c <LoopCopyDataInit>

08002184 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002186:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002188:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800218a:	3104      	adds	r1, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800218c:	480a      	ldr	r0, [pc, #40]	; (80021b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002190:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002192:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002194:	d3f6      	bcc.n	8002184 <CopyDataInit>
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002198:	e002      	b.n	80021a0 <LoopFillZerobss>

0800219a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800219c:	f842 3b04 	str.w	r3, [r2], #4

080021a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021a4:	d3f9      	bcc.n	800219a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021a6:	f7ff ffb7 	bl	8002118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f000 f815 	bl	80021d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ae:	f7ff febd 	bl	8001f2c <main>
  bx lr
 80021b2:	4770      	bx	lr
  ldr r3, =_sidata
 80021b4:	08002c50 	.word	0x08002c50
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021bc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80021c0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80021c4:	20000e30 	.word	0x20000e30

080021c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>
	...

080021cc <__errno>:
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <__errno+0x8>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <__libc_init_array>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	2500      	movs	r5, #0
 80021dc:	4e0c      	ldr	r6, [pc, #48]	; (8002210 <__libc_init_array+0x38>)
 80021de:	4c0d      	ldr	r4, [pc, #52]	; (8002214 <__libc_init_array+0x3c>)
 80021e0:	1ba4      	subs	r4, r4, r6
 80021e2:	10a4      	asrs	r4, r4, #2
 80021e4:	42a5      	cmp	r5, r4
 80021e6:	d109      	bne.n	80021fc <__libc_init_array+0x24>
 80021e8:	f000 fc36 	bl	8002a58 <_init>
 80021ec:	2500      	movs	r5, #0
 80021ee:	4e0a      	ldr	r6, [pc, #40]	; (8002218 <__libc_init_array+0x40>)
 80021f0:	4c0a      	ldr	r4, [pc, #40]	; (800221c <__libc_init_array+0x44>)
 80021f2:	1ba4      	subs	r4, r4, r6
 80021f4:	10a4      	asrs	r4, r4, #2
 80021f6:	42a5      	cmp	r5, r4
 80021f8:	d105      	bne.n	8002206 <__libc_init_array+0x2e>
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002200:	4798      	blx	r3
 8002202:	3501      	adds	r5, #1
 8002204:	e7ee      	b.n	80021e4 <__libc_init_array+0xc>
 8002206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800220a:	4798      	blx	r3
 800220c:	3501      	adds	r5, #1
 800220e:	e7f2      	b.n	80021f6 <__libc_init_array+0x1e>
 8002210:	08002c48 	.word	0x08002c48
 8002214:	08002c48 	.word	0x08002c48
 8002218:	08002c48 	.word	0x08002c48
 800221c:	08002c4c 	.word	0x08002c4c

08002220 <memcpy>:
 8002220:	b510      	push	{r4, lr}
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	440a      	add	r2, r1
 8002226:	4291      	cmp	r1, r2
 8002228:	d100      	bne.n	800222c <memcpy+0xc>
 800222a:	bd10      	pop	{r4, pc}
 800222c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002234:	e7f7      	b.n	8002226 <memcpy+0x6>

08002236 <memset>:
 8002236:	4603      	mov	r3, r0
 8002238:	4402      	add	r2, r0
 800223a:	4293      	cmp	r3, r2
 800223c:	d100      	bne.n	8002240 <memset+0xa>
 800223e:	4770      	bx	lr
 8002240:	f803 1b01 	strb.w	r1, [r3], #1
 8002244:	e7f9      	b.n	800223a <memset+0x4>
	...

08002248 <siprintf>:
 8002248:	b40e      	push	{r1, r2, r3}
 800224a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800224e:	b500      	push	{lr}
 8002250:	b09c      	sub	sp, #112	; 0x70
 8002252:	ab1d      	add	r3, sp, #116	; 0x74
 8002254:	9002      	str	r0, [sp, #8]
 8002256:	9006      	str	r0, [sp, #24]
 8002258:	9107      	str	r1, [sp, #28]
 800225a:	9104      	str	r1, [sp, #16]
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <siprintf+0x38>)
 800225e:	4909      	ldr	r1, [pc, #36]	; (8002284 <siprintf+0x3c>)
 8002260:	f853 2b04 	ldr.w	r2, [r3], #4
 8002264:	9105      	str	r1, [sp, #20]
 8002266:	6800      	ldr	r0, [r0, #0]
 8002268:	a902      	add	r1, sp, #8
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f000 f866 	bl	800233c <_svfiprintf_r>
 8002270:	2200      	movs	r2, #0
 8002272:	9b02      	ldr	r3, [sp, #8]
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	b01c      	add	sp, #112	; 0x70
 8002278:	f85d eb04 	ldr.w	lr, [sp], #4
 800227c:	b003      	add	sp, #12
 800227e:	4770      	bx	lr
 8002280:	2000000c 	.word	0x2000000c
 8002284:	ffff0208 	.word	0xffff0208

08002288 <__ssputs_r>:
 8002288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800228c:	688e      	ldr	r6, [r1, #8]
 800228e:	4682      	mov	sl, r0
 8002290:	429e      	cmp	r6, r3
 8002292:	460c      	mov	r4, r1
 8002294:	4690      	mov	r8, r2
 8002296:	4699      	mov	r9, r3
 8002298:	d837      	bhi.n	800230a <__ssputs_r+0x82>
 800229a:	898a      	ldrh	r2, [r1, #12]
 800229c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022a0:	d031      	beq.n	8002306 <__ssputs_r+0x7e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	6825      	ldr	r5, [r4, #0]
 80022a6:	6909      	ldr	r1, [r1, #16]
 80022a8:	1a6f      	subs	r7, r5, r1
 80022aa:	6965      	ldr	r5, [r4, #20]
 80022ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80022b4:	f109 0301 	add.w	r3, r9, #1
 80022b8:	443b      	add	r3, r7
 80022ba:	429d      	cmp	r5, r3
 80022bc:	bf38      	it	cc
 80022be:	461d      	movcc	r5, r3
 80022c0:	0553      	lsls	r3, r2, #21
 80022c2:	d530      	bpl.n	8002326 <__ssputs_r+0x9e>
 80022c4:	4629      	mov	r1, r5
 80022c6:	f000 fb2d 	bl	8002924 <_malloc_r>
 80022ca:	4606      	mov	r6, r0
 80022cc:	b950      	cbnz	r0, 80022e4 <__ssputs_r+0x5c>
 80022ce:	230c      	movs	r3, #12
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d4:	f8ca 3000 	str.w	r3, [sl]
 80022d8:	89a3      	ldrh	r3, [r4, #12]
 80022da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022de:	81a3      	strh	r3, [r4, #12]
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e4:	463a      	mov	r2, r7
 80022e6:	6921      	ldr	r1, [r4, #16]
 80022e8:	f7ff ff9a 	bl	8002220 <memcpy>
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	81a3      	strh	r3, [r4, #12]
 80022f8:	6126      	str	r6, [r4, #16]
 80022fa:	443e      	add	r6, r7
 80022fc:	6026      	str	r6, [r4, #0]
 80022fe:	464e      	mov	r6, r9
 8002300:	6165      	str	r5, [r4, #20]
 8002302:	1bed      	subs	r5, r5, r7
 8002304:	60a5      	str	r5, [r4, #8]
 8002306:	454e      	cmp	r6, r9
 8002308:	d900      	bls.n	800230c <__ssputs_r+0x84>
 800230a:	464e      	mov	r6, r9
 800230c:	4632      	mov	r2, r6
 800230e:	4641      	mov	r1, r8
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	f000 faa1 	bl	8002858 <memmove>
 8002316:	68a3      	ldr	r3, [r4, #8]
 8002318:	2000      	movs	r0, #0
 800231a:	1b9b      	subs	r3, r3, r6
 800231c:	60a3      	str	r3, [r4, #8]
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	441e      	add	r6, r3
 8002322:	6026      	str	r6, [r4, #0]
 8002324:	e7dc      	b.n	80022e0 <__ssputs_r+0x58>
 8002326:	462a      	mov	r2, r5
 8002328:	f000 fb56 	bl	80029d8 <_realloc_r>
 800232c:	4606      	mov	r6, r0
 800232e:	2800      	cmp	r0, #0
 8002330:	d1e2      	bne.n	80022f8 <__ssputs_r+0x70>
 8002332:	6921      	ldr	r1, [r4, #16]
 8002334:	4650      	mov	r0, sl
 8002336:	f000 faa9 	bl	800288c <_free_r>
 800233a:	e7c8      	b.n	80022ce <__ssputs_r+0x46>

0800233c <_svfiprintf_r>:
 800233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	461d      	mov	r5, r3
 8002342:	898b      	ldrh	r3, [r1, #12]
 8002344:	b09d      	sub	sp, #116	; 0x74
 8002346:	061f      	lsls	r7, r3, #24
 8002348:	4680      	mov	r8, r0
 800234a:	460c      	mov	r4, r1
 800234c:	4616      	mov	r6, r2
 800234e:	d50f      	bpl.n	8002370 <_svfiprintf_r+0x34>
 8002350:	690b      	ldr	r3, [r1, #16]
 8002352:	b96b      	cbnz	r3, 8002370 <_svfiprintf_r+0x34>
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	f000 fae5 	bl	8002924 <_malloc_r>
 800235a:	6020      	str	r0, [r4, #0]
 800235c:	6120      	str	r0, [r4, #16]
 800235e:	b928      	cbnz	r0, 800236c <_svfiprintf_r+0x30>
 8002360:	230c      	movs	r3, #12
 8002362:	f8c8 3000 	str.w	r3, [r8]
 8002366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236a:	e0c8      	b.n	80024fe <_svfiprintf_r+0x1c2>
 800236c:	2340      	movs	r3, #64	; 0x40
 800236e:	6163      	str	r3, [r4, #20]
 8002370:	2300      	movs	r3, #0
 8002372:	9309      	str	r3, [sp, #36]	; 0x24
 8002374:	2320      	movs	r3, #32
 8002376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800237a:	2330      	movs	r3, #48	; 0x30
 800237c:	f04f 0b01 	mov.w	fp, #1
 8002380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002384:	9503      	str	r5, [sp, #12]
 8002386:	4637      	mov	r7, r6
 8002388:	463d      	mov	r5, r7
 800238a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800238e:	b10b      	cbz	r3, 8002394 <_svfiprintf_r+0x58>
 8002390:	2b25      	cmp	r3, #37	; 0x25
 8002392:	d13e      	bne.n	8002412 <_svfiprintf_r+0xd6>
 8002394:	ebb7 0a06 	subs.w	sl, r7, r6
 8002398:	d00b      	beq.n	80023b2 <_svfiprintf_r+0x76>
 800239a:	4653      	mov	r3, sl
 800239c:	4632      	mov	r2, r6
 800239e:	4621      	mov	r1, r4
 80023a0:	4640      	mov	r0, r8
 80023a2:	f7ff ff71 	bl	8002288 <__ssputs_r>
 80023a6:	3001      	adds	r0, #1
 80023a8:	f000 80a4 	beq.w	80024f4 <_svfiprintf_r+0x1b8>
 80023ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023ae:	4453      	add	r3, sl
 80023b0:	9309      	str	r3, [sp, #36]	; 0x24
 80023b2:	783b      	ldrb	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 809d 	beq.w	80024f4 <_svfiprintf_r+0x1b8>
 80023ba:	2300      	movs	r3, #0
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023c4:	9304      	str	r3, [sp, #16]
 80023c6:	9307      	str	r3, [sp, #28]
 80023c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023cc:	931a      	str	r3, [sp, #104]	; 0x68
 80023ce:	462f      	mov	r7, r5
 80023d0:	2205      	movs	r2, #5
 80023d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80023d6:	4850      	ldr	r0, [pc, #320]	; (8002518 <_svfiprintf_r+0x1dc>)
 80023d8:	f000 fa30 	bl	800283c <memchr>
 80023dc:	9b04      	ldr	r3, [sp, #16]
 80023de:	b9d0      	cbnz	r0, 8002416 <_svfiprintf_r+0xda>
 80023e0:	06d9      	lsls	r1, r3, #27
 80023e2:	bf44      	itt	mi
 80023e4:	2220      	movmi	r2, #32
 80023e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023ea:	071a      	lsls	r2, r3, #28
 80023ec:	bf44      	itt	mi
 80023ee:	222b      	movmi	r2, #43	; 0x2b
 80023f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023f4:	782a      	ldrb	r2, [r5, #0]
 80023f6:	2a2a      	cmp	r2, #42	; 0x2a
 80023f8:	d015      	beq.n	8002426 <_svfiprintf_r+0xea>
 80023fa:	462f      	mov	r7, r5
 80023fc:	2000      	movs	r0, #0
 80023fe:	250a      	movs	r5, #10
 8002400:	9a07      	ldr	r2, [sp, #28]
 8002402:	4639      	mov	r1, r7
 8002404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002408:	3b30      	subs	r3, #48	; 0x30
 800240a:	2b09      	cmp	r3, #9
 800240c:	d94d      	bls.n	80024aa <_svfiprintf_r+0x16e>
 800240e:	b1b8      	cbz	r0, 8002440 <_svfiprintf_r+0x104>
 8002410:	e00f      	b.n	8002432 <_svfiprintf_r+0xf6>
 8002412:	462f      	mov	r7, r5
 8002414:	e7b8      	b.n	8002388 <_svfiprintf_r+0x4c>
 8002416:	4a40      	ldr	r2, [pc, #256]	; (8002518 <_svfiprintf_r+0x1dc>)
 8002418:	463d      	mov	r5, r7
 800241a:	1a80      	subs	r0, r0, r2
 800241c:	fa0b f000 	lsl.w	r0, fp, r0
 8002420:	4318      	orrs	r0, r3
 8002422:	9004      	str	r0, [sp, #16]
 8002424:	e7d3      	b.n	80023ce <_svfiprintf_r+0x92>
 8002426:	9a03      	ldr	r2, [sp, #12]
 8002428:	1d11      	adds	r1, r2, #4
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	9103      	str	r1, [sp, #12]
 800242e:	2a00      	cmp	r2, #0
 8002430:	db01      	blt.n	8002436 <_svfiprintf_r+0xfa>
 8002432:	9207      	str	r2, [sp, #28]
 8002434:	e004      	b.n	8002440 <_svfiprintf_r+0x104>
 8002436:	4252      	negs	r2, r2
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	9207      	str	r2, [sp, #28]
 800243e:	9304      	str	r3, [sp, #16]
 8002440:	783b      	ldrb	r3, [r7, #0]
 8002442:	2b2e      	cmp	r3, #46	; 0x2e
 8002444:	d10c      	bne.n	8002460 <_svfiprintf_r+0x124>
 8002446:	787b      	ldrb	r3, [r7, #1]
 8002448:	2b2a      	cmp	r3, #42	; 0x2a
 800244a:	d133      	bne.n	80024b4 <_svfiprintf_r+0x178>
 800244c:	9b03      	ldr	r3, [sp, #12]
 800244e:	3702      	adds	r7, #2
 8002450:	1d1a      	adds	r2, r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	9203      	str	r2, [sp, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	bfb8      	it	lt
 800245a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800245e:	9305      	str	r3, [sp, #20]
 8002460:	4d2e      	ldr	r5, [pc, #184]	; (800251c <_svfiprintf_r+0x1e0>)
 8002462:	2203      	movs	r2, #3
 8002464:	7839      	ldrb	r1, [r7, #0]
 8002466:	4628      	mov	r0, r5
 8002468:	f000 f9e8 	bl	800283c <memchr>
 800246c:	b138      	cbz	r0, 800247e <_svfiprintf_r+0x142>
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	1b40      	subs	r0, r0, r5
 8002472:	fa03 f000 	lsl.w	r0, r3, r0
 8002476:	9b04      	ldr	r3, [sp, #16]
 8002478:	3701      	adds	r7, #1
 800247a:	4303      	orrs	r3, r0
 800247c:	9304      	str	r3, [sp, #16]
 800247e:	7839      	ldrb	r1, [r7, #0]
 8002480:	2206      	movs	r2, #6
 8002482:	4827      	ldr	r0, [pc, #156]	; (8002520 <_svfiprintf_r+0x1e4>)
 8002484:	1c7e      	adds	r6, r7, #1
 8002486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800248a:	f000 f9d7 	bl	800283c <memchr>
 800248e:	2800      	cmp	r0, #0
 8002490:	d038      	beq.n	8002504 <_svfiprintf_r+0x1c8>
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <_svfiprintf_r+0x1e8>)
 8002494:	bb13      	cbnz	r3, 80024dc <_svfiprintf_r+0x1a0>
 8002496:	9b03      	ldr	r3, [sp, #12]
 8002498:	3307      	adds	r3, #7
 800249a:	f023 0307 	bic.w	r3, r3, #7
 800249e:	3308      	adds	r3, #8
 80024a0:	9303      	str	r3, [sp, #12]
 80024a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024a4:	444b      	add	r3, r9
 80024a6:	9309      	str	r3, [sp, #36]	; 0x24
 80024a8:	e76d      	b.n	8002386 <_svfiprintf_r+0x4a>
 80024aa:	fb05 3202 	mla	r2, r5, r2, r3
 80024ae:	2001      	movs	r0, #1
 80024b0:	460f      	mov	r7, r1
 80024b2:	e7a6      	b.n	8002402 <_svfiprintf_r+0xc6>
 80024b4:	2300      	movs	r3, #0
 80024b6:	250a      	movs	r5, #10
 80024b8:	4619      	mov	r1, r3
 80024ba:	3701      	adds	r7, #1
 80024bc:	9305      	str	r3, [sp, #20]
 80024be:	4638      	mov	r0, r7
 80024c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024c4:	3a30      	subs	r2, #48	; 0x30
 80024c6:	2a09      	cmp	r2, #9
 80024c8:	d903      	bls.n	80024d2 <_svfiprintf_r+0x196>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0c8      	beq.n	8002460 <_svfiprintf_r+0x124>
 80024ce:	9105      	str	r1, [sp, #20]
 80024d0:	e7c6      	b.n	8002460 <_svfiprintf_r+0x124>
 80024d2:	fb05 2101 	mla	r1, r5, r1, r2
 80024d6:	2301      	movs	r3, #1
 80024d8:	4607      	mov	r7, r0
 80024da:	e7f0      	b.n	80024be <_svfiprintf_r+0x182>
 80024dc:	ab03      	add	r3, sp, #12
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4622      	mov	r2, r4
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <_svfiprintf_r+0x1ec>)
 80024e4:	a904      	add	r1, sp, #16
 80024e6:	4640      	mov	r0, r8
 80024e8:	f3af 8000 	nop.w
 80024ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80024f0:	4681      	mov	r9, r0
 80024f2:	d1d6      	bne.n	80024a2 <_svfiprintf_r+0x166>
 80024f4:	89a3      	ldrh	r3, [r4, #12]
 80024f6:	065b      	lsls	r3, r3, #25
 80024f8:	f53f af35 	bmi.w	8002366 <_svfiprintf_r+0x2a>
 80024fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024fe:	b01d      	add	sp, #116	; 0x74
 8002500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002504:	ab03      	add	r3, sp, #12
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4622      	mov	r2, r4
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <_svfiprintf_r+0x1ec>)
 800250c:	a904      	add	r1, sp, #16
 800250e:	4640      	mov	r0, r8
 8002510:	f000 f882 	bl	8002618 <_printf_i>
 8002514:	e7ea      	b.n	80024ec <_svfiprintf_r+0x1b0>
 8002516:	bf00      	nop
 8002518:	08002c15 	.word	0x08002c15
 800251c:	08002c1b 	.word	0x08002c1b
 8002520:	08002c1f 	.word	0x08002c1f
 8002524:	00000000 	.word	0x00000000
 8002528:	08002289 	.word	0x08002289

0800252c <_printf_common>:
 800252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002530:	4691      	mov	r9, r2
 8002532:	461f      	mov	r7, r3
 8002534:	688a      	ldr	r2, [r1, #8]
 8002536:	690b      	ldr	r3, [r1, #16]
 8002538:	4606      	mov	r6, r0
 800253a:	4293      	cmp	r3, r2
 800253c:	bfb8      	it	lt
 800253e:	4613      	movlt	r3, r2
 8002540:	f8c9 3000 	str.w	r3, [r9]
 8002544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002548:	460c      	mov	r4, r1
 800254a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800254e:	b112      	cbz	r2, 8002556 <_printf_common+0x2a>
 8002550:	3301      	adds	r3, #1
 8002552:	f8c9 3000 	str.w	r3, [r9]
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	0699      	lsls	r1, r3, #26
 800255a:	bf42      	ittt	mi
 800255c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002560:	3302      	addmi	r3, #2
 8002562:	f8c9 3000 	strmi.w	r3, [r9]
 8002566:	6825      	ldr	r5, [r4, #0]
 8002568:	f015 0506 	ands.w	r5, r5, #6
 800256c:	d107      	bne.n	800257e <_printf_common+0x52>
 800256e:	f104 0a19 	add.w	sl, r4, #25
 8002572:	68e3      	ldr	r3, [r4, #12]
 8002574:	f8d9 2000 	ldr.w	r2, [r9]
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	42ab      	cmp	r3, r5
 800257c:	dc29      	bgt.n	80025d2 <_printf_common+0xa6>
 800257e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	3300      	adds	r3, #0
 8002586:	bf18      	it	ne
 8002588:	2301      	movne	r3, #1
 800258a:	0692      	lsls	r2, r2, #26
 800258c:	d42e      	bmi.n	80025ec <_printf_common+0xc0>
 800258e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002592:	4639      	mov	r1, r7
 8002594:	4630      	mov	r0, r6
 8002596:	47c0      	blx	r8
 8002598:	3001      	adds	r0, #1
 800259a:	d021      	beq.n	80025e0 <_printf_common+0xb4>
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	68e5      	ldr	r5, [r4, #12]
 80025a0:	f003 0306 	and.w	r3, r3, #6
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	bf18      	it	ne
 80025a8:	2500      	movne	r5, #0
 80025aa:	f8d9 2000 	ldr.w	r2, [r9]
 80025ae:	f04f 0900 	mov.w	r9, #0
 80025b2:	bf08      	it	eq
 80025b4:	1aad      	subeq	r5, r5, r2
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	6922      	ldr	r2, [r4, #16]
 80025ba:	bf08      	it	eq
 80025bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bfc4      	itt	gt
 80025c4:	1a9b      	subgt	r3, r3, r2
 80025c6:	18ed      	addgt	r5, r5, r3
 80025c8:	341a      	adds	r4, #26
 80025ca:	454d      	cmp	r5, r9
 80025cc:	d11a      	bne.n	8002604 <_printf_common+0xd8>
 80025ce:	2000      	movs	r0, #0
 80025d0:	e008      	b.n	80025e4 <_printf_common+0xb8>
 80025d2:	2301      	movs	r3, #1
 80025d4:	4652      	mov	r2, sl
 80025d6:	4639      	mov	r1, r7
 80025d8:	4630      	mov	r0, r6
 80025da:	47c0      	blx	r8
 80025dc:	3001      	adds	r0, #1
 80025de:	d103      	bne.n	80025e8 <_printf_common+0xbc>
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e8:	3501      	adds	r5, #1
 80025ea:	e7c2      	b.n	8002572 <_printf_common+0x46>
 80025ec:	2030      	movs	r0, #48	; 0x30
 80025ee:	18e1      	adds	r1, r4, r3
 80025f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025fa:	4422      	add	r2, r4
 80025fc:	3302      	adds	r3, #2
 80025fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002602:	e7c4      	b.n	800258e <_printf_common+0x62>
 8002604:	2301      	movs	r3, #1
 8002606:	4622      	mov	r2, r4
 8002608:	4639      	mov	r1, r7
 800260a:	4630      	mov	r0, r6
 800260c:	47c0      	blx	r8
 800260e:	3001      	adds	r0, #1
 8002610:	d0e6      	beq.n	80025e0 <_printf_common+0xb4>
 8002612:	f109 0901 	add.w	r9, r9, #1
 8002616:	e7d8      	b.n	80025ca <_printf_common+0x9e>

08002618 <_printf_i>:
 8002618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800261c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002620:	460c      	mov	r4, r1
 8002622:	7e09      	ldrb	r1, [r1, #24]
 8002624:	b085      	sub	sp, #20
 8002626:	296e      	cmp	r1, #110	; 0x6e
 8002628:	4617      	mov	r7, r2
 800262a:	4606      	mov	r6, r0
 800262c:	4698      	mov	r8, r3
 800262e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002630:	f000 80b3 	beq.w	800279a <_printf_i+0x182>
 8002634:	d822      	bhi.n	800267c <_printf_i+0x64>
 8002636:	2963      	cmp	r1, #99	; 0x63
 8002638:	d036      	beq.n	80026a8 <_printf_i+0x90>
 800263a:	d80a      	bhi.n	8002652 <_printf_i+0x3a>
 800263c:	2900      	cmp	r1, #0
 800263e:	f000 80b9 	beq.w	80027b4 <_printf_i+0x19c>
 8002642:	2958      	cmp	r1, #88	; 0x58
 8002644:	f000 8083 	beq.w	800274e <_printf_i+0x136>
 8002648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800264c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002650:	e032      	b.n	80026b8 <_printf_i+0xa0>
 8002652:	2964      	cmp	r1, #100	; 0x64
 8002654:	d001      	beq.n	800265a <_printf_i+0x42>
 8002656:	2969      	cmp	r1, #105	; 0x69
 8002658:	d1f6      	bne.n	8002648 <_printf_i+0x30>
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	0605      	lsls	r5, r0, #24
 8002660:	f103 0104 	add.w	r1, r3, #4
 8002664:	d52a      	bpl.n	80026bc <_printf_i+0xa4>
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6011      	str	r1, [r2, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	da03      	bge.n	8002676 <_printf_i+0x5e>
 800266e:	222d      	movs	r2, #45	; 0x2d
 8002670:	425b      	negs	r3, r3
 8002672:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002676:	486f      	ldr	r0, [pc, #444]	; (8002834 <_printf_i+0x21c>)
 8002678:	220a      	movs	r2, #10
 800267a:	e039      	b.n	80026f0 <_printf_i+0xd8>
 800267c:	2973      	cmp	r1, #115	; 0x73
 800267e:	f000 809d 	beq.w	80027bc <_printf_i+0x1a4>
 8002682:	d808      	bhi.n	8002696 <_printf_i+0x7e>
 8002684:	296f      	cmp	r1, #111	; 0x6f
 8002686:	d020      	beq.n	80026ca <_printf_i+0xb2>
 8002688:	2970      	cmp	r1, #112	; 0x70
 800268a:	d1dd      	bne.n	8002648 <_printf_i+0x30>
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	6023      	str	r3, [r4, #0]
 8002694:	e003      	b.n	800269e <_printf_i+0x86>
 8002696:	2975      	cmp	r1, #117	; 0x75
 8002698:	d017      	beq.n	80026ca <_printf_i+0xb2>
 800269a:	2978      	cmp	r1, #120	; 0x78
 800269c:	d1d4      	bne.n	8002648 <_printf_i+0x30>
 800269e:	2378      	movs	r3, #120	; 0x78
 80026a0:	4865      	ldr	r0, [pc, #404]	; (8002838 <_printf_i+0x220>)
 80026a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026a6:	e055      	b.n	8002754 <_printf_i+0x13c>
 80026a8:	6813      	ldr	r3, [r2, #0]
 80026aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026ae:	1d19      	adds	r1, r3, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6011      	str	r1, [r2, #0]
 80026b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026b8:	2301      	movs	r3, #1
 80026ba:	e08c      	b.n	80027d6 <_printf_i+0x1be>
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026c2:	6011      	str	r1, [r2, #0]
 80026c4:	bf18      	it	ne
 80026c6:	b21b      	sxthne	r3, r3
 80026c8:	e7cf      	b.n	800266a <_printf_i+0x52>
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	6825      	ldr	r5, [r4, #0]
 80026ce:	1d18      	adds	r0, r3, #4
 80026d0:	6010      	str	r0, [r2, #0]
 80026d2:	0628      	lsls	r0, r5, #24
 80026d4:	d501      	bpl.n	80026da <_printf_i+0xc2>
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e002      	b.n	80026e0 <_printf_i+0xc8>
 80026da:	0668      	lsls	r0, r5, #25
 80026dc:	d5fb      	bpl.n	80026d6 <_printf_i+0xbe>
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	296f      	cmp	r1, #111	; 0x6f
 80026e2:	bf14      	ite	ne
 80026e4:	220a      	movne	r2, #10
 80026e6:	2208      	moveq	r2, #8
 80026e8:	4852      	ldr	r0, [pc, #328]	; (8002834 <_printf_i+0x21c>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026f0:	6865      	ldr	r5, [r4, #4]
 80026f2:	2d00      	cmp	r5, #0
 80026f4:	60a5      	str	r5, [r4, #8]
 80026f6:	f2c0 8095 	blt.w	8002824 <_printf_i+0x20c>
 80026fa:	6821      	ldr	r1, [r4, #0]
 80026fc:	f021 0104 	bic.w	r1, r1, #4
 8002700:	6021      	str	r1, [r4, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d13d      	bne.n	8002782 <_printf_i+0x16a>
 8002706:	2d00      	cmp	r5, #0
 8002708:	f040 808e 	bne.w	8002828 <_printf_i+0x210>
 800270c:	4665      	mov	r5, ip
 800270e:	2a08      	cmp	r2, #8
 8002710:	d10b      	bne.n	800272a <_printf_i+0x112>
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	07db      	lsls	r3, r3, #31
 8002716:	d508      	bpl.n	800272a <_printf_i+0x112>
 8002718:	6923      	ldr	r3, [r4, #16]
 800271a:	6862      	ldr	r2, [r4, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	bfde      	ittt	le
 8002720:	2330      	movle	r3, #48	; 0x30
 8002722:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002726:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800272a:	ebac 0305 	sub.w	r3, ip, r5
 800272e:	6123      	str	r3, [r4, #16]
 8002730:	f8cd 8000 	str.w	r8, [sp]
 8002734:	463b      	mov	r3, r7
 8002736:	aa03      	add	r2, sp, #12
 8002738:	4621      	mov	r1, r4
 800273a:	4630      	mov	r0, r6
 800273c:	f7ff fef6 	bl	800252c <_printf_common>
 8002740:	3001      	adds	r0, #1
 8002742:	d14d      	bne.n	80027e0 <_printf_i+0x1c8>
 8002744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002748:	b005      	add	sp, #20
 800274a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800274e:	4839      	ldr	r0, [pc, #228]	; (8002834 <_printf_i+0x21c>)
 8002750:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	6821      	ldr	r1, [r4, #0]
 8002758:	1d1d      	adds	r5, r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6015      	str	r5, [r2, #0]
 800275e:	060a      	lsls	r2, r1, #24
 8002760:	d50b      	bpl.n	800277a <_printf_i+0x162>
 8002762:	07ca      	lsls	r2, r1, #31
 8002764:	bf44      	itt	mi
 8002766:	f041 0120 	orrmi.w	r1, r1, #32
 800276a:	6021      	strmi	r1, [r4, #0]
 800276c:	b91b      	cbnz	r3, 8002776 <_printf_i+0x15e>
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	f022 0220 	bic.w	r2, r2, #32
 8002774:	6022      	str	r2, [r4, #0]
 8002776:	2210      	movs	r2, #16
 8002778:	e7b7      	b.n	80026ea <_printf_i+0xd2>
 800277a:	064d      	lsls	r5, r1, #25
 800277c:	bf48      	it	mi
 800277e:	b29b      	uxthmi	r3, r3
 8002780:	e7ef      	b.n	8002762 <_printf_i+0x14a>
 8002782:	4665      	mov	r5, ip
 8002784:	fbb3 f1f2 	udiv	r1, r3, r2
 8002788:	fb02 3311 	mls	r3, r2, r1, r3
 800278c:	5cc3      	ldrb	r3, [r0, r3]
 800278e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002792:	460b      	mov	r3, r1
 8002794:	2900      	cmp	r1, #0
 8002796:	d1f5      	bne.n	8002784 <_printf_i+0x16c>
 8002798:	e7b9      	b.n	800270e <_printf_i+0xf6>
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	6825      	ldr	r5, [r4, #0]
 800279e:	1d18      	adds	r0, r3, #4
 80027a0:	6961      	ldr	r1, [r4, #20]
 80027a2:	6010      	str	r0, [r2, #0]
 80027a4:	0628      	lsls	r0, r5, #24
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	d501      	bpl.n	80027ae <_printf_i+0x196>
 80027aa:	6019      	str	r1, [r3, #0]
 80027ac:	e002      	b.n	80027b4 <_printf_i+0x19c>
 80027ae:	066a      	lsls	r2, r5, #25
 80027b0:	d5fb      	bpl.n	80027aa <_printf_i+0x192>
 80027b2:	8019      	strh	r1, [r3, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	4665      	mov	r5, ip
 80027b8:	6123      	str	r3, [r4, #16]
 80027ba:	e7b9      	b.n	8002730 <_printf_i+0x118>
 80027bc:	6813      	ldr	r3, [r2, #0]
 80027be:	1d19      	adds	r1, r3, #4
 80027c0:	6011      	str	r1, [r2, #0]
 80027c2:	681d      	ldr	r5, [r3, #0]
 80027c4:	6862      	ldr	r2, [r4, #4]
 80027c6:	2100      	movs	r1, #0
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f837 	bl	800283c <memchr>
 80027ce:	b108      	cbz	r0, 80027d4 <_printf_i+0x1bc>
 80027d0:	1b40      	subs	r0, r0, r5
 80027d2:	6060      	str	r0, [r4, #4]
 80027d4:	6863      	ldr	r3, [r4, #4]
 80027d6:	6123      	str	r3, [r4, #16]
 80027d8:	2300      	movs	r3, #0
 80027da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027de:	e7a7      	b.n	8002730 <_printf_i+0x118>
 80027e0:	6923      	ldr	r3, [r4, #16]
 80027e2:	462a      	mov	r2, r5
 80027e4:	4639      	mov	r1, r7
 80027e6:	4630      	mov	r0, r6
 80027e8:	47c0      	blx	r8
 80027ea:	3001      	adds	r0, #1
 80027ec:	d0aa      	beq.n	8002744 <_printf_i+0x12c>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	079b      	lsls	r3, r3, #30
 80027f2:	d413      	bmi.n	800281c <_printf_i+0x204>
 80027f4:	68e0      	ldr	r0, [r4, #12]
 80027f6:	9b03      	ldr	r3, [sp, #12]
 80027f8:	4298      	cmp	r0, r3
 80027fa:	bfb8      	it	lt
 80027fc:	4618      	movlt	r0, r3
 80027fe:	e7a3      	b.n	8002748 <_printf_i+0x130>
 8002800:	2301      	movs	r3, #1
 8002802:	464a      	mov	r2, r9
 8002804:	4639      	mov	r1, r7
 8002806:	4630      	mov	r0, r6
 8002808:	47c0      	blx	r8
 800280a:	3001      	adds	r0, #1
 800280c:	d09a      	beq.n	8002744 <_printf_i+0x12c>
 800280e:	3501      	adds	r5, #1
 8002810:	68e3      	ldr	r3, [r4, #12]
 8002812:	9a03      	ldr	r2, [sp, #12]
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	42ab      	cmp	r3, r5
 8002818:	dcf2      	bgt.n	8002800 <_printf_i+0x1e8>
 800281a:	e7eb      	b.n	80027f4 <_printf_i+0x1dc>
 800281c:	2500      	movs	r5, #0
 800281e:	f104 0919 	add.w	r9, r4, #25
 8002822:	e7f5      	b.n	8002810 <_printf_i+0x1f8>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ac      	bne.n	8002782 <_printf_i+0x16a>
 8002828:	7803      	ldrb	r3, [r0, #0]
 800282a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800282e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002832:	e76c      	b.n	800270e <_printf_i+0xf6>
 8002834:	08002c26 	.word	0x08002c26
 8002838:	08002c37 	.word	0x08002c37

0800283c <memchr>:
 800283c:	b510      	push	{r4, lr}
 800283e:	b2c9      	uxtb	r1, r1
 8002840:	4402      	add	r2, r0
 8002842:	4290      	cmp	r0, r2
 8002844:	4603      	mov	r3, r0
 8002846:	d101      	bne.n	800284c <memchr+0x10>
 8002848:	2300      	movs	r3, #0
 800284a:	e003      	b.n	8002854 <memchr+0x18>
 800284c:	781c      	ldrb	r4, [r3, #0]
 800284e:	3001      	adds	r0, #1
 8002850:	428c      	cmp	r4, r1
 8002852:	d1f6      	bne.n	8002842 <memchr+0x6>
 8002854:	4618      	mov	r0, r3
 8002856:	bd10      	pop	{r4, pc}

08002858 <memmove>:
 8002858:	4288      	cmp	r0, r1
 800285a:	b510      	push	{r4, lr}
 800285c:	eb01 0302 	add.w	r3, r1, r2
 8002860:	d807      	bhi.n	8002872 <memmove+0x1a>
 8002862:	1e42      	subs	r2, r0, #1
 8002864:	4299      	cmp	r1, r3
 8002866:	d00a      	beq.n	800287e <memmove+0x26>
 8002868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800286c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002870:	e7f8      	b.n	8002864 <memmove+0xc>
 8002872:	4283      	cmp	r3, r0
 8002874:	d9f5      	bls.n	8002862 <memmove+0xa>
 8002876:	1881      	adds	r1, r0, r2
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	42d3      	cmn	r3, r2
 800287c:	d100      	bne.n	8002880 <memmove+0x28>
 800287e:	bd10      	pop	{r4, pc}
 8002880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002884:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002888:	e7f7      	b.n	800287a <memmove+0x22>
	...

0800288c <_free_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	4605      	mov	r5, r0
 8002890:	2900      	cmp	r1, #0
 8002892:	d043      	beq.n	800291c <_free_r+0x90>
 8002894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002898:	1f0c      	subs	r4, r1, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	bfb8      	it	lt
 800289e:	18e4      	addlt	r4, r4, r3
 80028a0:	f000 f8d0 	bl	8002a44 <__malloc_lock>
 80028a4:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <_free_r+0x94>)
 80028a6:	6813      	ldr	r3, [r2, #0]
 80028a8:	4610      	mov	r0, r2
 80028aa:	b933      	cbnz	r3, 80028ba <_free_r+0x2e>
 80028ac:	6063      	str	r3, [r4, #4]
 80028ae:	6014      	str	r4, [r2, #0]
 80028b0:	4628      	mov	r0, r5
 80028b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028b6:	f000 b8c6 	b.w	8002a46 <__malloc_unlock>
 80028ba:	42a3      	cmp	r3, r4
 80028bc:	d90b      	bls.n	80028d6 <_free_r+0x4a>
 80028be:	6821      	ldr	r1, [r4, #0]
 80028c0:	1862      	adds	r2, r4, r1
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bf01      	itttt	eq
 80028c6:	681a      	ldreq	r2, [r3, #0]
 80028c8:	685b      	ldreq	r3, [r3, #4]
 80028ca:	1852      	addeq	r2, r2, r1
 80028cc:	6022      	streq	r2, [r4, #0]
 80028ce:	6063      	str	r3, [r4, #4]
 80028d0:	6004      	str	r4, [r0, #0]
 80028d2:	e7ed      	b.n	80028b0 <_free_r+0x24>
 80028d4:	4613      	mov	r3, r2
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	b10a      	cbz	r2, 80028de <_free_r+0x52>
 80028da:	42a2      	cmp	r2, r4
 80028dc:	d9fa      	bls.n	80028d4 <_free_r+0x48>
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	1858      	adds	r0, r3, r1
 80028e2:	42a0      	cmp	r0, r4
 80028e4:	d10b      	bne.n	80028fe <_free_r+0x72>
 80028e6:	6820      	ldr	r0, [r4, #0]
 80028e8:	4401      	add	r1, r0
 80028ea:	1858      	adds	r0, r3, r1
 80028ec:	4282      	cmp	r2, r0
 80028ee:	6019      	str	r1, [r3, #0]
 80028f0:	d1de      	bne.n	80028b0 <_free_r+0x24>
 80028f2:	6810      	ldr	r0, [r2, #0]
 80028f4:	6852      	ldr	r2, [r2, #4]
 80028f6:	4401      	add	r1, r0
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	e7d8      	b.n	80028b0 <_free_r+0x24>
 80028fe:	d902      	bls.n	8002906 <_free_r+0x7a>
 8002900:	230c      	movs	r3, #12
 8002902:	602b      	str	r3, [r5, #0]
 8002904:	e7d4      	b.n	80028b0 <_free_r+0x24>
 8002906:	6820      	ldr	r0, [r4, #0]
 8002908:	1821      	adds	r1, r4, r0
 800290a:	428a      	cmp	r2, r1
 800290c:	bf01      	itttt	eq
 800290e:	6811      	ldreq	r1, [r2, #0]
 8002910:	6852      	ldreq	r2, [r2, #4]
 8002912:	1809      	addeq	r1, r1, r0
 8002914:	6021      	streq	r1, [r4, #0]
 8002916:	6062      	str	r2, [r4, #4]
 8002918:	605c      	str	r4, [r3, #4]
 800291a:	e7c9      	b.n	80028b0 <_free_r+0x24>
 800291c:	bd38      	pop	{r3, r4, r5, pc}
 800291e:	bf00      	nop
 8002920:	20000de0 	.word	0x20000de0

08002924 <_malloc_r>:
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	1ccd      	adds	r5, r1, #3
 8002928:	f025 0503 	bic.w	r5, r5, #3
 800292c:	3508      	adds	r5, #8
 800292e:	2d0c      	cmp	r5, #12
 8002930:	bf38      	it	cc
 8002932:	250c      	movcc	r5, #12
 8002934:	2d00      	cmp	r5, #0
 8002936:	4606      	mov	r6, r0
 8002938:	db01      	blt.n	800293e <_malloc_r+0x1a>
 800293a:	42a9      	cmp	r1, r5
 800293c:	d903      	bls.n	8002946 <_malloc_r+0x22>
 800293e:	230c      	movs	r3, #12
 8002940:	6033      	str	r3, [r6, #0]
 8002942:	2000      	movs	r0, #0
 8002944:	bd70      	pop	{r4, r5, r6, pc}
 8002946:	f000 f87d 	bl	8002a44 <__malloc_lock>
 800294a:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <_malloc_r+0xac>)
 800294c:	6814      	ldr	r4, [r2, #0]
 800294e:	4621      	mov	r1, r4
 8002950:	b991      	cbnz	r1, 8002978 <_malloc_r+0x54>
 8002952:	4c20      	ldr	r4, [pc, #128]	; (80029d4 <_malloc_r+0xb0>)
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	b91b      	cbnz	r3, 8002960 <_malloc_r+0x3c>
 8002958:	4630      	mov	r0, r6
 800295a:	f000 f863 	bl	8002a24 <_sbrk_r>
 800295e:	6020      	str	r0, [r4, #0]
 8002960:	4629      	mov	r1, r5
 8002962:	4630      	mov	r0, r6
 8002964:	f000 f85e 	bl	8002a24 <_sbrk_r>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d124      	bne.n	80029b6 <_malloc_r+0x92>
 800296c:	230c      	movs	r3, #12
 800296e:	4630      	mov	r0, r6
 8002970:	6033      	str	r3, [r6, #0]
 8002972:	f000 f868 	bl	8002a46 <__malloc_unlock>
 8002976:	e7e4      	b.n	8002942 <_malloc_r+0x1e>
 8002978:	680b      	ldr	r3, [r1, #0]
 800297a:	1b5b      	subs	r3, r3, r5
 800297c:	d418      	bmi.n	80029b0 <_malloc_r+0x8c>
 800297e:	2b0b      	cmp	r3, #11
 8002980:	d90f      	bls.n	80029a2 <_malloc_r+0x7e>
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	18cc      	adds	r4, r1, r3
 8002986:	50cd      	str	r5, [r1, r3]
 8002988:	4630      	mov	r0, r6
 800298a:	f000 f85c 	bl	8002a46 <__malloc_unlock>
 800298e:	f104 000b 	add.w	r0, r4, #11
 8002992:	1d23      	adds	r3, r4, #4
 8002994:	f020 0007 	bic.w	r0, r0, #7
 8002998:	1ac3      	subs	r3, r0, r3
 800299a:	d0d3      	beq.n	8002944 <_malloc_r+0x20>
 800299c:	425a      	negs	r2, r3
 800299e:	50e2      	str	r2, [r4, r3]
 80029a0:	e7d0      	b.n	8002944 <_malloc_r+0x20>
 80029a2:	684b      	ldr	r3, [r1, #4]
 80029a4:	428c      	cmp	r4, r1
 80029a6:	bf16      	itet	ne
 80029a8:	6063      	strne	r3, [r4, #4]
 80029aa:	6013      	streq	r3, [r2, #0]
 80029ac:	460c      	movne	r4, r1
 80029ae:	e7eb      	b.n	8002988 <_malloc_r+0x64>
 80029b0:	460c      	mov	r4, r1
 80029b2:	6849      	ldr	r1, [r1, #4]
 80029b4:	e7cc      	b.n	8002950 <_malloc_r+0x2c>
 80029b6:	1cc4      	adds	r4, r0, #3
 80029b8:	f024 0403 	bic.w	r4, r4, #3
 80029bc:	42a0      	cmp	r0, r4
 80029be:	d005      	beq.n	80029cc <_malloc_r+0xa8>
 80029c0:	1a21      	subs	r1, r4, r0
 80029c2:	4630      	mov	r0, r6
 80029c4:	f000 f82e 	bl	8002a24 <_sbrk_r>
 80029c8:	3001      	adds	r0, #1
 80029ca:	d0cf      	beq.n	800296c <_malloc_r+0x48>
 80029cc:	6025      	str	r5, [r4, #0]
 80029ce:	e7db      	b.n	8002988 <_malloc_r+0x64>
 80029d0:	20000de0 	.word	0x20000de0
 80029d4:	20000de4 	.word	0x20000de4

080029d8 <_realloc_r>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	4607      	mov	r7, r0
 80029dc:	4614      	mov	r4, r2
 80029de:	460e      	mov	r6, r1
 80029e0:	b921      	cbnz	r1, 80029ec <_realloc_r+0x14>
 80029e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80029e6:	4611      	mov	r1, r2
 80029e8:	f7ff bf9c 	b.w	8002924 <_malloc_r>
 80029ec:	b922      	cbnz	r2, 80029f8 <_realloc_r+0x20>
 80029ee:	f7ff ff4d 	bl	800288c <_free_r>
 80029f2:	4625      	mov	r5, r4
 80029f4:	4628      	mov	r0, r5
 80029f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029f8:	f000 f826 	bl	8002a48 <_malloc_usable_size_r>
 80029fc:	42a0      	cmp	r0, r4
 80029fe:	d20f      	bcs.n	8002a20 <_realloc_r+0x48>
 8002a00:	4621      	mov	r1, r4
 8002a02:	4638      	mov	r0, r7
 8002a04:	f7ff ff8e 	bl	8002924 <_malloc_r>
 8002a08:	4605      	mov	r5, r0
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d0f2      	beq.n	80029f4 <_realloc_r+0x1c>
 8002a0e:	4631      	mov	r1, r6
 8002a10:	4622      	mov	r2, r4
 8002a12:	f7ff fc05 	bl	8002220 <memcpy>
 8002a16:	4631      	mov	r1, r6
 8002a18:	4638      	mov	r0, r7
 8002a1a:	f7ff ff37 	bl	800288c <_free_r>
 8002a1e:	e7e9      	b.n	80029f4 <_realloc_r+0x1c>
 8002a20:	4635      	mov	r5, r6
 8002a22:	e7e7      	b.n	80029f4 <_realloc_r+0x1c>

08002a24 <_sbrk_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	2300      	movs	r3, #0
 8002a28:	4c05      	ldr	r4, [pc, #20]	; (8002a40 <_sbrk_r+0x1c>)
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	f7ff fb46 	bl	80020c0 <_sbrk>
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d102      	bne.n	8002a3e <_sbrk_r+0x1a>
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	b103      	cbz	r3, 8002a3e <_sbrk_r+0x1a>
 8002a3c:	602b      	str	r3, [r5, #0]
 8002a3e:	bd38      	pop	{r3, r4, r5, pc}
 8002a40:	20000e2c 	.word	0x20000e2c

08002a44 <__malloc_lock>:
 8002a44:	4770      	bx	lr

08002a46 <__malloc_unlock>:
 8002a46:	4770      	bx	lr

08002a48 <_malloc_usable_size_r>:
 8002a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a4c:	1f18      	subs	r0, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bfbc      	itt	lt
 8002a52:	580b      	ldrlt	r3, [r1, r0]
 8002a54:	18c0      	addlt	r0, r0, r3
 8002a56:	4770      	bx	lr

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr
